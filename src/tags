!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADJUST_INT_VECTOR_CAPACITY	./vectormgm.h	52;"	d
ADJUST_VECTOR_CAPACITY	./vectormgm.h	69;"	d
ALLOCATE	./macros.h	39;"	d
ALLOCATE_INI	./macros.h	46;"	d
ALLOCATE_INT_VECTOR	./vectormgm.h	30;"	d
ALLOCATE_VECTOR	./macros.h	53;"	d
ALLOCATE_VECTOR_INI	./macros.h	61;"	d
ALPHA	./grasp.c	20;"	d	file:
Arc	./digraph.h	/^} Arc;$/;"	t	typeref:struct:__anon7
BETA	./neighborhood.c	23;"	d	file:
BRON_KERBOSCH_H_INCLUDED	./bron_kerbosch.h	4;"	d
BUILDCGRAPH_H_INCLUDED	./build_cgraph.h	2;"	d
BronKerbosch	./bron_kerbosch.h	/^typedef struct _BronKerbosch BronKerbosch;$/;"	t	typeref:struct:_BronKerbosch
CANDIDATES_SLACK	./clique_extender.c	23;"	d	file:
CGArc	./cgraph.c	/^typedef struct CGArc {$/;"	s	file:
CGArc	./cgraph.c	/^} CGArc;$/;"	t	typeref:struct:CGArc	file:
CGArc::head	./cgraph.c	/^    int head;$/;"	m	struct:CGArc	file:	access:public
CGArc::tail	./cgraph.c	/^    int tail;$/;"	m	struct:CGArc	file:	access:public
CGRAPH_H_INCLUDED	./cgraph.h	10;"	d
CGraph	./cgraph.h	/^typedef struct _CGraph CGraph;$/;"	t	typeref:struct:_CGraph
CLEAR_VECTOR	./macros.h	96;"	d
CLIQUE_ELITE_SET_H	./clique_elite_set.h	9;"	d
CLIQUE_ENUM_H_INCLUDED	./clique_enum.h	2;"	d
CLIQUE_EXTENDER_H	./clique_extender.h	2;"	d
CLIQUE_H_INCLUDED	./clique.h	2;"	d
CLIQUE_SEPARATION_H_INCLUDED	./clique_separation.h	2;"	d
CLQEM_EXACT	./clique_extender.h	/^    CLQEM_EXACT = 4$/;"	e	enum:__anon4
CLQEM_MAX_DEGREE	./clique_extender.h	/^    CLQEM_MAX_DEGREE = 2,$/;"	e	enum:__anon4
CLQEM_PRIORITY_GREEDY	./clique_extender.h	/^    CLQEM_PRIORITY_GREEDY = 3,$/;"	e	enum:__anon4
CLQEM_RANDOM	./clique_extender.h	/^    CLQEM_RANDOM = 1,$/;"	e	enum:__anon4
CLQ_SEP_DEF_ENUM	./clique_separation.c	27;"	d	file:
CLQ_SEP_DEF_EXTEND	./clique_separation.c	26;"	d	file:
CLQ_SEP_DEF_MAX_CLIQUES	./clique_separation.c	30;"	d	file:
CLQ_SEP_DEF_MAX_PASSES	./clique_separation.c	23;"	d	file:
CLQ_SEP_DEF_MIN_FRAC	./clique_separation.c	25;"	d	file:
CLQ_SEP_DEF_MIN_VIOL	./clique_separation.c	24;"	d	file:
CLQ_SEP_DEF_TLBK	./clique_separation.c	29;"	d	file:
CLQ_SEP_DEF_VERBOSE	./clique_separation.c	28;"	d	file:
CLQ_SEP_STR_ENUM	./clique_separation.c	37;"	d	file:
CLQ_SEP_STR_EXTEND	./clique_separation.c	36;"	d	file:
CLQ_SEP_STR_MAX_CLIQUES	./clique_separation.c	40;"	d	file:
CLQ_SEP_STR_MAX_CLQE_SIZE	./clique_separation.c	39;"	d	file:
CLQ_SEP_STR_MAX_PASSES	./clique_separation.c	33;"	d	file:
CLQ_SEP_STR_MIN_FRAC	./clique_separation.c	35;"	d	file:
CLQ_SEP_STR_MIN_VIOL	./clique_separation.c	34;"	d	file:
CLQ_SEP_STR_VERBOSE	./clique_separation.c	38;"	d	file:
CONSTRUCTIVE_H	./constructive.h	9;"	d
CONS_CARDINALITY	./lp.h	42;"	d
CONS_COVERING	./lp.h	41;"	d
CONS_FLOW_BIN	./lp.h	45;"	d
CONS_FLOW_INT	./lp.h	46;"	d
CONS_FLOW_MX	./lp.h	47;"	d
CONS_INV_KNAPSACK	./lp.h	44;"	d
CONS_KNAPSACK	./lp.h	43;"	d
CONS_NUMBER	./lp.h	50;"	d
CONS_OTHER	./lp.h	49;"	d
CONS_PACKING	./lp.h	40;"	d
CONS_PARTITIONING	./lp.h	39;"	d
CONS_VBOUND	./lp.h	48;"	d
COPY_VECTOR	./macros.h	94;"	d
CREATE_STRING_VECTOR	./vectormgm.h	10;"	d
CUT_POOL	./cut_pool.h	13;"	d
CliqueEliteSet	./clique_elite_set.h	/^typedef struct _CliqueEliteSet CliqueEliteSet;$/;"	t	typeref:struct:_CliqueEliteSet
CliqueEnumerator	./clique_enum.h	/^typedef struct _CliqueEnumerator CliqueEnumerator;$/;"	t	typeref:struct:_CliqueEnumerator
CliqueExtender	./clique_extender.h	/^typedef struct _CliqueExtender CliqueExtender;$/;"	t	typeref:struct:_CliqueExtender
CliqueExtendingMethod	./clique_extender.h	/^} CliqueExtendingMethod;$/;"	t	typeref:enum:__anon4
CliqueSeparation	./clique_separation.h	/^typedef struct _CliqueSeparation CliqueSeparation;$/;"	t	typeref:struct:_CliqueSeparation
CliqueSet	./clique.h	/^typedef struct _CliqueSet CliqueSet;$/;"	t	typeref:struct:_CliqueSet
CliqueWeight	./clique_extender.c	/^} CliqueWeight;$/;"	t	typeref:struct:__anon3	file:
Cons_checkArgs	./constructive.c	/^void Cons_checkArgs(Constructive *cons, char **argv)$/;"	f	signature:(Constructive *cons, char **argv)
Cons_checkArgs	./constructive.h	/^void Cons_checkArgs(Constructive *cons, char **argv);$/;"	p	signature:(Constructive *cons, char **argv)
Cons_create	./constructive.c	/^Constructive *Cons_create( const Instance *inst, Solution* sol, char** argv )$/;"	f	signature:( const Instance *inst, Solution* sol, char** argv )
Cons_create	./constructive.h	/^Constructive *Cons_create( const Instance *inst, Solution* sol, char** argv );$/;"	p	signature:( const Instance *inst, Solution* sol, char** argv )
Cons_free	./constructive.c	/^void Cons_free( Constructive **_cons )$/;"	f	signature:( Constructive **_cons )
Cons_free	./constructive.h	/^void Cons_free( Constructive **_cons );$/;"	p	signature:( Constructive **_cons )
Cons_getInst	./constructive.c	/^const Instance *Cons_getInst(Constructive *cons)$/;"	f	signature:(Constructive *cons)
Cons_getIt	./constructive.c	/^int Cons_getIt(Constructive *cons)$/;"	f	signature:(Constructive *cons)
Cons_getIt	./constructive.h	/^int Cons_getIt(Constructive *cons);$/;"	p	signature:(Constructive *cons)
Cons_getLfa	./constructive.c	/^int Cons_getLfa(Constructive *cons)$/;"	f	signature:(Constructive *cons)
Cons_getLfa	./constructive.h	/^int Cons_getLfa(Constructive *cons);$/;"	p	signature:(Constructive *cons)
Cons_getSolInitial	./constructive.c	/^Cost Cons_getSolInitial(Constructive *cons)$/;"	f	signature:(Constructive *cons)
Cons_getSolInitial	./constructive.h	/^Cost Cons_getSolInitial(Constructive *cons);$/;"	p	signature:(Constructive *cons)
Cons_run	./constructive.c	/^void Cons_run(Constructive *cons)$/;"	f	signature:(Constructive *cons)
Cons_run	./constructive.h	/^void Cons_run(Constructive *cons);$/;"	p	signature:(Constructive *cons)
Cons_runByProj	./constructive.c	/^void Cons_runByProj(Constructive *cons)$/;"	f	signature:(Constructive *cons)
Cons_runByProj	./constructive.h	/^void Cons_runByProj(Constructive *cons);$/;"	p	signature:(Constructive *cons)
Constructive	./constructive.h	/^typedef struct _Constructive Constructive;$/;"	t	typeref:struct:_Constructive
Cost	./macros.h	/^typedef long int Cost;$/;"	t
CutP_addAllCutSlack	./cut_pool.h	/^void CutP_addAllCutSlack( CutPool *cutP, LinearProgram* lp, int continuous, double maxslack);$/;"	p	signature:( CutPool *cutP, LinearProgram* lp, int continuous, double maxslack)
CutP_addCut	./cut_pool.c	/^void CutP_addCut( CutPool *cutP, LinearProgram* lp, int continuous, double maxslack)$/;"	f	signature:( CutPool *cutP, LinearProgram* lp, int continuous, double maxslack)
CutP_addCut	./cut_pool.h	/^void CutP_addCut( CutPool *cutP, LinearProgram* lp, int continuous, double maxslack);$/;"	p	signature:( CutPool *cutP, LinearProgram* lp, int continuous, double maxslack)
CutP_compElemRepeatedCoef	./cut_pool.c	/^int CutP_compElemRepeatedCoef( CutPool *cutP, int c, const int* idx, const double* coe, int lp_cols, int lp_rows, int type) \/\/ cutPool$/;"	f	signature:( CutPool *cutP, int c, const int* idx, const double* coe, int lp_cols, int lp_rows, int type)
CutP_compElemRepeatedCoef	./cut_pool.h	/^int CutP_compElemRepeatedCoef( CutPool *cutP, int c, const int* idx, const double* coe, int lp_cols, int lp_rows, int type); \/\/ cutPool$/;"	p	signature:( CutPool *cutP, int c, const int* idx, const double* coe, int lp_cols, int lp_rows, int type)
CutP_create	./cut_pool.c	/^CutPool *CutP_create( const Instance *inst, int nHash)$/;"	f	signature:( const Instance *inst, int nHash)
CutP_create	./cut_pool.h	/^CutPool *CutP_create(const Instance *inst, int nHash );$/;"	p	signature:(const Instance *inst, int nHash )
CutP_free	./cut_pool.c	/^void CutP_free( CutPool **_cutP )$/;"	f	signature:( CutPool **_cutP )
CutP_free	./cut_pool.h	/^void CutP_free( CutPool **cutP );$/;"	p	signature:( CutPool **cutP )
CutP_getHC	./cut_pool.c	/^VecInt** CutP_getHC( CutPool *cutP )$/;"	f	signature:( CutPool *cutP )
CutP_getHC	./cut_pool.h	/^VecInt** CutP_getHC( CutPool *cutP );$/;"	p	signature:( CutPool *cutP )
CutP_getnHC	./cut_pool.h	/^int* CutP_getnHC( CutPool *cutP );$/;"	p	signature:( CutPool *cutP )
CutP_printHash	./cut_pool.c	/^void CutP_printHash( CutPool *cutP, LinearProgram* lp)$/;"	f	signature:( CutPool *cutP, LinearProgram* lp)
CutP_printHash	./cut_pool.h	/^void CutP_printHash( CutPool *cutP, LinearProgram* lp);$/;"	p	signature:( CutPool *cutP, LinearProgram* lp)
CutP_removeAllCuts	./cut_pool.h	/^void CutP_removeAllCuts( CutPool *cutP, LinearProgram* lp);$/;"	p	signature:( CutPool *cutP, LinearProgram* lp)
CutP_removeCut	./cut_pool.c	/^void CutP_removeCut( CutPool *cutP, LinearProgram* lp,  double maxslack)$/;"	f	signature:( CutPool *cutP, LinearProgram* lp, double maxslack)
CutP_removeCut	./cut_pool.h	/^void CutP_removeCut( CutPool *cutP, LinearProgram* lp, double maxslack);$/;"	p	signature:( CutPool *cutP, LinearProgram* lp, double maxslack)
CutPool	./cut_pool.h	/^typedef struct _CutPool CutPool;$/;"	t	typeref:struct:_CutPool
DBL_EQUAL	./macros.h	103;"	d
DEF_INI_CAP	./vec_str.c	18;"	d	file:
DICT_INT_H	./dict_int.h	9;"	d
DIGRAPH_H	./digraph.h	8;"	d
DIST_INF	./oddhs.c	21;"	d	file:
DIST_MAX	./oddhs.c	23;"	d	file:
DInt_clear	./dict_int.c	/^void DInt_clear( DictInt *dict )$/;"	f	signature:( DictInt *dict )
DInt_clear	./dict_int.h	/^void DInt_clear( DictInt *dict );$/;"	p	signature:( DictInt *dict )
DInt_cpy	./dict_int.c	/^void DInt_cpy( DictInt *target, const DictInt *source )$/;"	f	signature:( DictInt *target, const DictInt *source )
DInt_cpy	./dict_int.h	/^void DInt_cpy( DictInt *target, const DictInt *source );$/;"	p	signature:( DictInt *target, const DictInt *source )
DInt_create	./dict_int.c	/^DictInt *DInt_create( unsigned int hashSize, int defaultValue )$/;"	f	signature:( unsigned int hashSize, int defaultValue )
DInt_create	./dict_int.h	/^DictInt *DInt_create( unsigned int hashSize, int defaultValue );$/;"	p	signature:( unsigned int hashSize, int defaultValue )
DInt_free	./dict_int.c	/^void DInt_free( DictInt **dict )$/;"	f	signature:( DictInt **dict )
DInt_free	./dict_int.h	/^void DInt_free( DictInt **dict );$/;"	p	signature:( DictInt **dict )
DInt_get	./dict_int.c	/^int DInt_get( const DictInt *dict, const char *str )$/;"	f	signature:( const DictInt *dict, const char *str )
DInt_get	./dict_int.h	/^int DInt_get( const DictInt *dict, const char *str );$/;"	p	signature:( const DictInt *dict, const char *str )
DInt_iget	./dict_int.c	/^int DInt_iget( const DictInt *dict, const int key )$/;"	f	signature:( const DictInt *dict, const int key )
DInt_iget	./dict_int.h	/^int DInt_iget( const DictInt *dict, const int key );$/;"	p	signature:( const DictInt *dict, const int key )
DInt_ikey	./dict_int.c	/^int DInt_ikey( const DictInt *dict, int pos )$/;"	f	signature:( const DictInt *dict, int pos )
DInt_ikey	./dict_int.h	/^int DInt_ikey( const DictInt *dict, int pos );$/;"	p	signature:( const DictInt *dict, int pos )
DInt_iremove	./dict_int.c	/^void DInt_iremove( DictInt *dict, int key )$/;"	f	signature:( DictInt *dict, int key )
DInt_iremove	./dict_int.h	/^void DInt_iremove( DictInt *dict, int key );$/;"	p	signature:( DictInt *dict, int key )
DInt_iset	./dict_int.c	/^void DInt_iset( DictInt *dict, const int key, const int value )$/;"	f	signature:( DictInt *dict, const int key, const int value )
DInt_iset	./dict_int.h	/^void DInt_iset( DictInt *dict, const int key, const int value );$/;"	p	signature:( DictInt *dict, const int key, const int value )
DInt_key	./dict_int.c	/^const char *DInt_key( const DictInt *dict, int pos )$/;"	f	signature:( const DictInt *dict, int pos )
DInt_key	./dict_int.h	/^const char *DInt_key( const DictInt *dict, int pos );$/;"	p	signature:( const DictInt *dict, int pos )
DInt_remove	./dict_int.c	/^void DInt_remove( DictInt *dict, const char *key )$/;"	f	signature:( DictInt *dict, const char *key )
DInt_remove	./dict_int.h	/^void DInt_remove( DictInt *dict, const char *key );$/;"	p	signature:( DictInt *dict, const char *key )
DInt_set	./dict_int.c	/^void DInt_set( DictInt *dict, const char *key, const int value )$/;"	f	signature:( DictInt *dict, const char *key, const int value )
DInt_set	./dict_int.h	/^void DInt_set( DictInt *dict, const char *key, const int value );$/;"	p	signature:( DictInt *dict, const char *key, const int value )
DInt_size	./dict_int.c	/^int DInt_size( const DictInt *dict )$/;"	f	signature:( const DictInt *dict )
DInt_size	./dict_int.h	/^int DInt_size( const DictInt *dict );$/;"	p	signature:( const DictInt *dict )
DOUBLE_RANDOM	./macros.h	29;"	d
DictInt	./dict_int.h	/^typedef struct _Dict_int DictInt;$/;"	t	typeref:struct:_Dict_int
Dict_Bucket_int	./dict_int.c	/^} Dict_Bucket_int;$/;"	t	typeref:struct:__anon6	file:
E	./macros.h	101;"	d
EPS	./macros.h	99;"	d
EPS	./oddhs.c	18;"	d	file:
EPSILON	./learning.c	/^const double EPSILON = 0; \/\/0$/;"	v
EQ	./neighborhood.c	/^    long double *EQ;$/;"	m	struct:_Neighborhood	file:	access:public
EQ	./test.c	/^    long double **EQ;$/;"	m	struct:_Test	file:	access:public
FE	./neighborhood.c	/^    long double *FE;$/;"	m	struct:_Neighborhood	file:	access:public
FE	./test.c	/^    long double **FE;$/;"	m	struct:_Test	file:	access:public
FI	./neighborhood.c	/^    long double *FI;$/;"	m	struct:_Neighborhood	file:	access:public
FI	./test.c	/^    long double **FI;$/;"	m	struct:_Test	file:	access:public
FILE_NAME_SIZE	./macros.h	36;"	d
FILE_NAME_SIZE	./vec_str.c	20;"	d	file:
FILL	./macros.h	88;"	d
FREE_STRING_VECTOR	./vectormgm.h	23;"	d
False	./macros.h	85;"	d
GRASP_ALPHA_FIXED	./grasp.h	25;"	d
GRASP_ALPHA_RANDOM	./grasp.h	26;"	d
GRASP_ALPHA_REACTIVE	./grasp.h	27;"	d
GRASP_H_INCLUDED	./grasp.h	2;"	d
Grasp	./grasp.h	/^typedef struct _Grasp Grasp;$/;"	t	typeref:struct:_Grasp
HASH_SIZE	./clique.c	17;"	d	file:
HIGH	./vint_set.c	317;"	d	file:
HIGH	./vint_set.c	391;"	d	file:
I	./neighborhood.c	/^    long double *I;$/;"	m	struct:_Neighborhood	file:	access:public
I	./test.c	/^    long double **I;$/;"	m	struct:_Test	file:	access:public
ILS	./ils.h	/^typedef struct _ILS ILS;$/;"	t	typeref:struct:_ILS
ILS_H	./ils.h	9;"	d
ILS_create	./ils.c	/^ILS *ILS_create( const Instance *inst, Solution* sol )$/;"	f	signature:( const Instance *inst, Solution* sol )
ILS_create	./ils.h	/^ILS *ILS_create( const Instance *inst, Solution* sol);$/;"	p	signature:( const Instance *inst, Solution* sol)
ILS_free	./ils.c	/^void ILS_free( ILS **_ils )$/;"	f	signature:( ILS **_ils )
ILS_free	./ils.h	/^void ILS_free( ILS **_ils );$/;"	p	signature:( ILS **_ils )
ILS_run	./ils.c	/^void ILS_run(ILS *ils)$/;"	f	signature:(ILS *ils)
ILS_run	./ils.h	/^void ILS_run(ILS *ils);$/;"	p	signature:(ILS *ils)
INFTY	./clique_elite_set.c	12;"	d	file:
INFTY	./node_heap.c	/^    int INFTY;$/;"	m	struct:_NodeHeap	file:	access:public
INI_CAP	./clique.c	15;"	d	file:
INI_CAP	./rrusage.c	21;"	d	file:
INI_CAP	./vec_char.c	14;"	d	file:
INI_CAP	./vec_double.c	14;"	d	file:
INI_CAP	./vec_int.c	14;"	d	file:
INI_CLQ_CAP	./cgraph.c	16;"	d	file:
INSTANCE_H_DEFINED	./instance.h	9;"	d
INT_CHARS	./clique.c	119;"	d	file:
INT_CHARS	./clique.c	49;"	d	file:
INT_MAX_M	./macros.h	21;"	d
INT_RANDOM	./macros.h	23;"	d
INT_RANDOM_LU	./macros.h	26;"	d
Inst_capResN	./instance.c	/^int Inst_capResN( const Instance *inst, int i )$/;"	f	signature:( const Instance *inst, int i )
Inst_capResN	./instance.h	/^int Inst_capResN( const Instance *inst, int i );$/;"	p	signature:( const Instance *inst, int i )
Inst_capResR	./instance.c	/^int Inst_capResR( const Instance *inst, int i )$/;"	f	signature:( const Instance *inst, int i )
Inst_capResR	./instance.h	/^int Inst_capResR( const Instance *inst, int i );$/;"	p	signature:( const Instance *inst, int i )
Inst_computeCompPaths	./instance.c	/^static void Inst_computeCompPaths( const Instance *inst, VecInt **paths);$/;"	p	file:	signature:( const Instance *inst, VecInt **paths)
Inst_computeCompPaths	./instance.c	/^void Inst_computeCompPaths( const Instance *inst, VecInt **paths)$/;"	f	signature:( const Instance *inst, VecInt **paths)
Inst_computeCompPathsByJob	./instance.c	/^int Inst_computeCompPathsByJob( const Instance *inst, int i, int m,  int d)$/;"	f	signature:( const Instance *inst, int i, int m, int d)
Inst_computeCompPathsByJob	./instance.h	/^int Inst_computeCompPathsByJob( const Instance *inst, int i, int m,  int d);$/;"	p	signature:( const Instance *inst, int i, int m, int d)
Inst_computeCompPathsByJobAndInter	./instance.c	/^int Inst_computeCompPathsByJobAndInter( const Instance *inst, int i, int m, int d, int s, int m2 , int ds, int dsmin )$/;"	f	signature:( const Instance *inst, int i, int m, int d, int s, int m2 , int ds, int dsmin )
Inst_computeCompPathsByJobAndInter	./instance.h	/^int Inst_computeCompPathsByJobAndInter( const Instance *inst, int i, int m, int d, int s, int m2, int ds, int dsmin );$/;"	p	signature:( const Instance *inst, int i, int m, int d, int s, int m2, int ds, int dsmin )
Inst_computeCompPathsByJobAndInter_old	./instance.c	/^int Inst_computeCompPathsByJobAndInter_old( const Instance *inst, int i, int d, int s, int ds )$/;"	f	signature:( const Instance *inst, int i, int d, int s, int ds )
Inst_computeEST	./instance.c	/^static void Inst_computeEST( Instance *inst );$/;"	p	file:	signature:( Instance *inst )
Inst_computeEST	./instance.c	/^void Inst_computeEST( Instance *inst )$/;"	f	signature:( Instance *inst )
Inst_computeESTJob	./instance.c	/^static void Inst_computeESTJob( Instance *inst, int jIdx );$/;"	p	file:	signature:( Instance *inst, int jIdx )
Inst_computeESTJob	./instance.c	/^void Inst_computeESTJob( Instance *inst, int jIdx )$/;"	f	signature:( Instance *inst, int jIdx )
Inst_create	./instance.c	/^Instance *Inst_create( const char *dir, const char *instance )$/;"	f	signature:( const char *dir, const char *instance )
Inst_create	./instance.h	/^Instance *Inst_create( const char *dir, const char *instance );$/;"	p	signature:( const char *dir, const char *instance )
Inst_create_mrcpsp	./instance.c	/^Instance *Inst_create_mrcpsp( const char *dir, const char *instance )$/;"	f	signature:( const char *dir, const char *instance )
Inst_create_rcpsp	./instance.c	/^Instance *Inst_create_rcpsp( const char *dir, const char *instance )$/;"	f	signature:( const char *dir, const char *instance )
Inst_fileExists	./instance.c	/^int Inst_fileExists(char fileName[])$/;"	f	signature:(char fileName[])
Inst_fileExists	./instance.h	/^int Inst_fileExists(char fileName[]);$/;"	p	signature:(char fileName[])
Inst_fillModeResUsage	./instance.c	/^static void Inst_fillModeResUsage( const Instance *inst, Mode *m,$/;"	f	file:	signature:( const Instance *inst, Mode *m, int nresR, int nresN, const int *usage, int idxStartR, int idxStartNR, const int globalRCap[] )
Inst_free	./instance.c	/^void Inst_free( Instance **_inst )$/;"	f	signature:( Instance **_inst )
Inst_free	./instance.h	/^void Inst_free( Instance **_inst );$/;"	p	signature:( Instance **_inst )
Inst_freeJobVectorContents	./instance.c	/^static void Inst_freeJobVectorContents(Instance * inst, Job *jStart, Job *jEnd )$/;"	f	file:	signature:(Instance * inst, Job *jStart, Job *jEnd )
Inst_freeJobVectorContents	./instance.c	/^static void Inst_freeJobVectorContents(Instance * inst, Job *jStart, Job *jEnd );$/;"	p	file:	signature:(Instance * inst, Job *jStart, Job *jEnd )
Inst_getMaxDIJ	./instance.c	/^int Inst_getMaxDIJ(const Instance *inst, int i, int j)$/;"	f	signature:(const Instance *inst, int i, int j)
Inst_getMaxDIJ	./instance.h	/^int Inst_getMaxDIJ(const Instance *inst, int i, int j);$/;"	p	signature:(const Instance *inst, int i, int j)
Inst_getMaxDIJM	./instance.c	/^int Inst_getMaxDIJM(const Instance *inst, int i, int j, int m)$/;"	f	signature:(const Instance *inst, int i, int j, int m)
Inst_getMaxDIJM	./instance.h	/^int Inst_getMaxDIJM(const Instance *inst, int i, int j, int m);$/;"	p	signature:(const Instance *inst, int i, int j, int m)
Inst_getMaxDIM	./instance.c	/^int Inst_getMaxDIM(const Instance *inst, const Job *job,int m)$/;"	f	signature:(const Instance *inst, const Job *job,int m)
Inst_getMaxDIM	./instance.h	/^int Inst_getMaxDIM(const Instance *inst, const Job *job,int m);$/;"	p	signature:(const Instance *inst, const Job *job,int m)
Inst_getMaxDIMJM	./instance.c	/^int Inst_getMaxDIMJM(const Instance *inst, const Job *job, int m,  int j2, int m2)$/;"	f	signature:(const Instance *inst, const Job *job, int m, int j2, int m2)
Inst_getMaxDIMJM	./instance.h	/^int Inst_getMaxDIMJM(const Instance *inst, const Job *job, int m,  int j2, int m2);$/;"	p	signature:(const Instance *inst, const Job *job, int m, int j2, int m2)
Inst_getSizePath	./instance.c	/^int Inst_getSizePath(const Instance *inst, int i)$/;"	f	signature:(const Instance *inst, int i)
Inst_getSizePath	./instance.h	/^int Inst_getSizePath(const Instance *inst, int i);$/;"	p	signature:(const Instance *inst, int i)
Inst_getSumTPD	./instance.c	/^int Inst_getSumTPD(const Instance *inst)$/;"	f	signature:(const Instance *inst)
Inst_getSumTPD	./instance.h	/^int Inst_getSumTPD(const Instance *inst);$/;"	p	signature:(const Instance *inst)
Inst_getValuePosPath	./instance.c	/^int Inst_getValuePosPath(const Instance *inst, int i, int pos)$/;"	f	signature:(const Instance *inst, int i, int pos)
Inst_getValuePosPath	./instance.h	/^int Inst_getValuePosPath(const Instance *inst, int i, int pos);$/;"	p	signature:(const Instance *inst, int i, int pos)
Inst_idxResNProj	./instance.c	/^int Inst_idxResNProj( const Instance *inst, int idxProj )$/;"	f	signature:( const Instance *inst, int idxProj )
Inst_idxResNProj	./instance.h	/^int Inst_idxResNProj( const Instance *inst, int idxProj );$/;"	p	signature:( const Instance *inst, int idxProj )
Inst_job	./instance.c	/^const Job *Inst_job( const Instance *inst, int idxJob )$/;"	f	signature:( const Instance *inst, int idxJob )
Inst_job	./instance.h	/^const Job *Inst_job( const Instance *inst, int idxJob );$/;"	p	signature:( const Instance *inst, int idxJob )
Inst_nJobs	./instance.c	/^int Inst_nJobs( const Instance *inst )$/;"	f	signature:( const Instance *inst )
Inst_nJobs	./instance.h	/^int Inst_nJobs( const Instance *inst );$/;"	p	signature:( const Instance *inst )
Inst_nMaxModes	./instance.c	/^int Inst_nMaxModes( const Instance *inst )$/;"	f	signature:( const Instance *inst )
Inst_nMaxModes	./instance.h	/^int Inst_nMaxModes( const Instance *inst );$/;"	p	signature:( const Instance *inst )
Inst_nProjects	./instance.c	/^int Inst_nProjects( const Instance *inst )$/;"	f	signature:( const Instance *inst )
Inst_nProjects	./instance.h	/^int Inst_nProjects( const Instance *inst );$/;"	p	signature:( const Instance *inst )
Inst_nResN	./instance.c	/^int Inst_nResN( const Instance *inst )$/;"	f	signature:( const Instance *inst )
Inst_nResN	./instance.h	/^int Inst_nResN( const Instance *inst );$/;"	p	signature:( const Instance *inst )
Inst_nResR	./instance.c	/^int Inst_nResR( const Instance *inst )$/;"	f	signature:( const Instance *inst )
Inst_nResR	./instance.h	/^int Inst_nResR( const Instance *inst );$/;"	p	signature:( const Instance *inst )
Inst_nResRGlobal	./instance.c	/^int Inst_nResRGlobal( const Instance *inst )$/;"	f	signature:( const Instance *inst )
Inst_nResRGlobal	./instance.h	/^int Inst_nResRGlobal( const Instance *inst );$/;"	p	signature:( const Instance *inst )
Inst_print	./instance.c	/^void Inst_print( const Instance *inst )$/;"	f	signature:( const Instance *inst )
Inst_print	./instance.h	/^void Inst_print( const Instance *inst );$/;"	p	signature:( const Instance *inst )
Inst_project	./instance.c	/^const Project *Inst_project( const Instance *inst, int idxProject )$/;"	f	signature:( const Instance *inst, int idxProject )
Inst_project	./instance.h	/^const Project *Inst_project( const Instance *inst, int idxProject );$/;"	p	signature:( const Instance *inst, int idxProject )
Inst_read	./instance.c	/^Instance *Inst_read( char ** argv, int argc )$/;"	f	signature:( char ** argv, int argc )
Inst_read	./instance.h	/^Instance *Inst_read( char ** argv, int argc );$/;"	p	signature:( char ** argv, int argc )
Inst_readProject	./instance.c	/^static void Inst_readProject( const char *dir, const char *projectFile, int projIdx, Instance *inst, int nres, const int globalRCap[], VecInt *capR, VecInt *capNR );$/;"	p	file:	signature:( const char *dir, const char *projectFile, int projIdx, Instance *inst, int nres, const int globalRCap[], VecInt *capR, VecInt *capNR )
Inst_readProject	./instance.c	/^static void Inst_readProject( const char *dir, const char *projectFile, int projIdx,$/;"	f	file:	signature:( const char *dir, const char *projectFile, int projIdx, Instance *inst, int nres, const int globalRCap[], VecInt *capR, VecInt *capNR )
Inst_readProject_mrcpsp	./instance.c	/^static void Inst_readProject_mrcpsp( const char *dir, const char *projectFile, int projIdx, Instance *inst, VecInt *capR, VecInt *capNR );$/;"	p	file:	signature:( const char *dir, const char *projectFile, int projIdx, Instance *inst, VecInt *capR, VecInt *capNR )
Inst_readProject_mrcpsp	./instance.c	/^static void Inst_readProject_mrcpsp( const char *dir, const char *projectFile, int projIdx,$/;"	f	file:	signature:( const char *dir, const char *projectFile, int projIdx, Instance *inst, VecInt *capR, VecInt *capNR )
Inst_readProject_rcpsp	./instance.c	/^static void Inst_readProject_rcpsp( const char *dir, const char *projectFile, int projIdx, Instance *inst, VecInt *capR, VecInt *capNR );$/;"	p	file:	signature:( const char *dir, const char *projectFile, int projIdx, Instance *inst, VecInt *capR, VecInt *capNR )
Inst_readProject_rcpsp	./instance.c	/^static void Inst_readProject_rcpsp( const char *dir, const char *projectFile, int projIdx,$/;"	f	file:	signature:( const char *dir, const char *projectFile, int projIdx, Instance *inst, VecInt *capR, VecInt *capNR )
Inst_setSumTPD	./instance.c	/^void Inst_setSumTPD(Instance *inst, const int value)$/;"	f	signature:(Instance *inst, const int value)
Inst_setSumTPD	./instance.h	/^void Inst_setSumTPD(Instance *inst, int value);$/;"	p	signature:(Instance *inst, int value)
Instance	./instance.h	/^typedef struct _Instance Instance;$/;"	t	typeref:struct:_Instance
IntDblPair	./cut_pool.h	/^} IntDblPair;$/;"	t	typeref:struct:__anon5
IntPair	./instance.c	/^} IntPair;$/;"	t	typeref:struct:__anon9	file:
IntPair	./mip_compact.c	/^} IntPair;$/;"	t	typeref:struct:__anon11	file:
IntQueue	./vint_queue.h	/^} IntQueue;$/;"	t	typeref:struct:__anon13
IntSet	./vint_set.h	/^} IntSet;$/;"	t	typeref:struct:__anon14
IntTriple	./mip_compact.c	/^} IntTriple;$/;"	t	typeref:struct:__anon10	file:
Job	./instance.h	/^typedef struct _Job Job;$/;"	t	typeref:struct:_Job
Job_cpy	./instance.c	/^static void Job_cpy( const Instance *inst, Job *jTarget, const Job* jSource, int* nRemovedModes )$/;"	f	file:	signature:( const Instance *inst, Job *jTarget, const Job* jSource, int* nRemovedModes )
Job_cpy	./instance.c	/^static void Job_cpy( const Instance *inst, Job *jTarget, const Job* jSource, int* nRemovedModes );$/;"	p	file:	signature:( const Instance *inst, Job *jTarget, const Job* jSource, int* nRemovedModes )
Job_est	./instance.c	/^int Job_est( const Job *job )$/;"	f	signature:( const Job *job )
Job_est	./instance.h	/^int Job_est( const Job *job );$/;"	p	signature:( const Job *job )
Job_hasIndPred	./instance.c	/^int Job_hasIndPred(  const Job *job, int idxJob )$/;"	f	signature:( const Job *job, int idxJob )
Job_hasIndPred	./instance.h	/^int Job_hasIndPred(  const Job *job, int idxJob );$/;"	p	signature:( const Job *job, int idxJob )
Job_hasIndSucc	./instance.c	/^int Job_hasIndSucc(  const Job *job, int idxJob )$/;"	f	signature:( const Job *job, int idxJob )
Job_hasIndSucc	./instance.h	/^int Job_hasIndSucc(  const Job *job, int idxJob );$/;"	p	signature:( const Job *job, int idxJob )
Job_hasPred	./instance.c	/^int Job_hasPred( const Instance *inst, const Job *job, int idxJob )$/;"	f	signature:( const Instance *inst, const Job *job, int idxJob )
Job_hasPred	./instance.h	/^int Job_hasPred( const Instance *inst, const Job *job, int idxJob );$/;"	p	signature:( const Instance *inst, const Job *job, int idxJob )
Job_hasSucc	./instance.c	/^int Job_hasSucc( const Instance *inst, const Job *job, int idxJob )$/;"	f	signature:( const Instance *inst, const Job *job, int idxJob )
Job_hasSucc	./instance.h	/^int Job_hasSucc( const Instance *inst, const Job *job, int idxJob );$/;"	p	signature:( const Instance *inst, const Job *job, int idxJob )
Job_idxMode	./instance.h	/^int Job_idxMode( const Job *job, int idMode );$/;"	p	signature:( const Job *job, int idMode )
Job_idxOnProject	./instance.c	/^int Job_idxOnProject( const Job *job )$/;"	f	signature:( const Job *job )
Job_idxOnProject	./instance.h	/^int Job_idxOnProject( const Job *job );$/;"	p	signature:( const Job *job )
Job_index	./instance.c	/^int Job_index( const Job *job )$/;"	f	signature:( const Job *job )
Job_index	./instance.h	/^int Job_index( const Job *job );$/;"	p	signature:( const Job *job )
Job_maxDuration	./instance.c	/^int Job_maxDuration( const Job *job )$/;"	f	signature:( const Job *job )
Job_maxDuration	./instance.h	/^int Job_maxDuration( const Job *job );$/;"	p	signature:( const Job *job )
Job_minDuration	./instance.c	/^int Job_minDuration( const Job *job )$/;"	f	signature:( const Job *job )
Job_minDuration	./instance.h	/^int Job_minDuration( const Job *job );$/;"	p	signature:( const Job *job )
Job_mode	./instance.c	/^const Mode *Job_mode( const Job *job, int idxMode )$/;"	f	signature:( const Job *job, int idxMode )
Job_mode	./instance.h	/^const Mode *Job_mode( const Job *job, int idxMode );$/;"	p	signature:( const Job *job, int idxMode )
Job_nInfeasModes	./instance.c	/^int Job_nInfeasModes( const Job *job )$/;"	f	signature:( const Job *job )
Job_nInfeasModes	./instance.h	/^int Job_nInfeasModes( const Job *job );$/;"	p	signature:( const Job *job )
Job_nModes	./instance.c	/^int Job_nModes( const Job *job )$/;"	f	signature:( const Job *job )
Job_nModes	./instance.h	/^int Job_nModes( const Job *job );$/;"	p	signature:( const Job *job )
Job_nPred	./instance.c	/^int Job_nPred( const Job *job )$/;"	f	signature:( const Job *job )
Job_nPred	./instance.h	/^int Job_nPred( const Job *job );$/;"	p	signature:( const Job *job )
Job_nSucc	./instance.c	/^int Job_nSucc( const Job *job )$/;"	f	signature:( const Job *job )
Job_nSucc	./instance.h	/^int Job_nSucc( const Job *job );$/;"	p	signature:( const Job *job )
Job_pred	./instance.c	/^int Job_pred( const Job *job, int idxPred )$/;"	f	signature:( const Job *job, int idxPred )
Job_pred	./instance.h	/^int Job_pred( const Job *job, int idxPred );$/;"	p	signature:( const Job *job, int idxPred )
Job_print	./instance.c	/^void Job_print( const Instance *inst, int i )$/;"	f	signature:( const Instance *inst, int i )
Job_print	./instance.h	/^void Job_print( const Instance *inst, int i );$/;"	p	signature:( const Instance *inst, int i )
Job_project	./instance.c	/^int Job_project( const Job *job)$/;"	f	signature:( const Job *job)
Job_project	./instance.h	/^int Job_project( const Job *job );$/;"	p	signature:( const Job *job )
Job_succ	./instance.c	/^int Job_succ( const Job *job, int idxSucc )$/;"	f	signature:( const Job *job, int idxSucc )
Job_succ	./instance.h	/^int Job_succ( const Job *job, int idxSucc );$/;"	p	signature:( const Job *job, int idxSucc )
LAHC	./lahc.h	/^typedef struct _LAHC LAHC;$/;"	t	typeref:struct:_LAHC
LAHC_H	./lahc.h	9;"	d
LAHC_checkArgs	./lahc.c	/^void LAHC_checkArgs(LAHC *lahc, char **argv, int argc)$/;"	f	signature:(LAHC *lahc, char **argv, int argc)
LAHC_checkArgs	./lahc.h	/^void LAHC_checkArgs(LAHC *lahc, char **argv,int argc);$/;"	p	signature:(LAHC *lahc, char **argv,int argc)
LAHC_create	./lahc.c	/^LAHC *LAHC_create( const Instance *inst, Solution* sol, Neighborhood* neighborhood, char **argv, int argc )$/;"	f	signature:( const Instance *inst, Solution* sol, Neighborhood* neighborhood, char **argv, int argc )
LAHC_create	./lahc.h	/^LAHC *LAHC_create( const Instance *inst, Solution* sol, Neighborhood* neighborhood, char **argv, int argc );$/;"	p	signature:( const Instance *inst, Solution* sol, Neighborhood* neighborhood, char **argv, int argc )
LAHC_free	./lahc.c	/^void LAHC_free( LAHC **_lahc )$/;"	f	signature:( LAHC **_lahc )
LAHC_free	./lahc.h	/^void LAHC_free( LAHC **_lahc );$/;"	p	signature:( LAHC **_lahc )
LAHC_getBestSol	./lahc.c	/^Solution* LAHC_getBestSol(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getF	./lahc.c	/^int LAHC_getF(LAHC *lahc, int idxF)$/;"	f	signature:(LAHC *lahc, int idxF)
LAHC_getF	./lahc.h	/^int LAHC_getF(LAHC *lahc, int idxF);$/;"	p	signature:(LAHC *lahc, int idxF)
LAHC_getItUp	./lahc.c	/^int LAHC_getItUp(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getItUp	./lahc.h	/^int LAHC_getItUp(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getLA	./lahc.c	/^LearningAutomata *LAHC_getLA(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getLA	./lahc.h	/^LearningAutomata *LAHC_getLA(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getLfa	./lahc.c	/^int LAHC_getLfa(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getLfa	./lahc.h	/^int LAHC_getLfa(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getNChangesModes	./lahc.c	/^int LAHC_getNChangesModes(LAHC *lahc, int idx)$/;"	f	signature:(LAHC *lahc, int idx)
LAHC_getNChangesModes	./lahc.h	/^int LAHC_getNChangesModes(LAHC *lahc, int idx);$/;"	p	signature:(LAHC *lahc, int idx)
LAHC_getNCostList	./lahc.c	/^int LAHC_getNCostList(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getNCostList	./lahc.h	/^int LAHC_getNCostList(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getNDiversification	./lahc.c	/^int LAHC_getNDiversification(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getNDiversification	./lahc.h	/^int LAHC_getNDiversification(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getNStayDiversification	./lahc.c	/^int LAHC_getNStayDiversification(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getNStayDiversification	./lahc.h	/^int LAHC_getNStayDiversification(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getNThread	./lahc.c	/^int LAHC_getNThread(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getNThread	./lahc.h	/^int LAHC_getNThread(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getNWOImprove	./lahc.c	/^int LAHC_getNWOImprove(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getNWOImprove	./lahc.h	/^int LAHC_getNWOImprove(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getPSW	./lahc.c	/^float LAHC_getPSW(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getPSW	./lahc.h	/^float LAHC_getPSW(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getPerc	./lahc.c	/^double LAHC_getPerc(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getPerc	./lahc.h	/^double LAHC_getPerc(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getRJ	./lahc.c	/^int LAHC_getRJ(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getRJ	./lahc.h	/^int LAHC_getRJ(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getRM	./lahc.c	/^int LAHC_getRM(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getRM	./lahc.h	/^int LAHC_getRM(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getSW	./lahc.c	/^int LAHC_getSW(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getSW	./lahc.h	/^int LAHC_getSW(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getTJ	./lahc.c	/^int LAHC_getTJ(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getTJ	./lahc.h	/^int LAHC_getTJ(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_getTM	./lahc.c	/^int LAHC_getTM(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_getTM	./lahc.h	/^int LAHC_getTM(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LAHC_increasingResidency	./lahc.h	/^void LAHC_increasingResidency(LAHC* lahc, Solution* current);$/;"	p	signature:(LAHC* lahc, Solution* current)
LAHC_increasingResidencyJobInMode	./lahc.c	/^void LAHC_increasingResidencyJobInMode(LAHC* lahc, Solution* current)$/;"	f	signature:(LAHC* lahc, Solution* current)
LAHC_increasingResidencyJobInSequence	./lahc.c	/^void LAHC_increasingResidencyJobInSequence(LAHC* lahc, Solution* current)$/;"	f	signature:(LAHC* lahc, Solution* current)
LAHC_increasingTransitivity	./lahc.h	/^void LAHC_increasingTransitivity(LAHC* lahc, Neighborhood* neighborhood);$/;"	p	signature:(LAHC* lahc, Neighborhood* neighborhood)
LAHC_increasingTransitivityOfModes	./lahc.c	/^void LAHC_increasingTransitivityOfModes(LAHC* lahc, Neighborhood* neighborhood)$/;"	f	signature:(LAHC* lahc, Neighborhood* neighborhood)
LAHC_increasingTransitivityOfSequence	./lahc.c	/^void LAHC_increasingTransitivityOfSequence(LAHC* lahc, Neighborhood* neighborhood)$/;"	f	signature:(LAHC* lahc, Neighborhood* neighborhood)
LAHC_penalty	./lahc.h	/^Cost LAHC_penalty(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent);$/;"	p	signature:(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)
LAHC_penaltyJobs	./lahc.c	/^Cost LAHC_penaltyJobs(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)$/;"	f	signature:(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)
LAHC_penaltyModes	./lahc.c	/^Cost LAHC_penaltyModes(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)$/;"	f	signature:(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)
LAHC_penaltyTransModes	./lahc.c	/^Cost LAHC_penaltyTransModes(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)$/;"	f	signature:(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)
LAHC_penaltyTransSequence	./lahc.c	/^Cost LAHC_penaltyTransSequence(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)$/;"	f	signature:(LAHC* lahc, Neighborhood* neighborhood, Cost foCurrent)
LAHC_run	./lahc.c	/^void LAHC_run(LAHC *lahc, Neighborhood* neighborhood, double timeRem, Test *test, char* nameInst)$/;"	f	signature:(LAHC *lahc, Neighborhood* neighborhood, double timeRem, Test *test, char* nameInst)
LAHC_run	./lahc.h	/^void LAHC_run(LAHC *lahc, Neighborhood* neighborhood, double timeRem, Test *test, char * nameInst);$/;"	p	signature:(LAHC *lahc, Neighborhood* neighborhood, double timeRem, Test *test, char * nameInst)
LAHC_run_nIt	./lahc.c	/^void LAHC_run_nIt(LAHC *lahc, Neighborhood* neighborhood, double timeRem, int nIterations, Test *test, char* nameInst)$/;"	f	signature:(LAHC *lahc, Neighborhood* neighborhood, double timeRem, int nIterations, Test *test, char* nameInst)
LAHC_run_nIt	./lahc.h	/^void LAHC_run_nIt(LAHC *lahc, Neighborhood* neighborhood, double timeRem, int nIterations, Test *test, char* nameInst);$/;"	p	signature:(LAHC *lahc, Neighborhood* neighborhood, double timeRem, int nIterations, Test *test, char* nameInst)
LAHC_run_parallel	./lahc.c	/^void LAHC_run_parallel(LAHC *lahc, Neighborhood* neighborhood, double timeRem, Solution *globalBest, Test *test)$/;"	f	signature:(LAHC *lahc, Neighborhood* neighborhood, double timeRem, Solution *globalBest, Test *test)
LAHC_run_parallel	./lahc.h	/^void LAHC_run_parallel(LAHC *lahc, Neighborhood* neighborhood, double timeRem, Solution *globalBest, Test *test);$/;"	p	signature:(LAHC *lahc, Neighborhood* neighborhood, double timeRem, Solution *globalBest, Test *test)
LAHC_run_vns	./lahc.c	/^void LAHC_run_vns(LAHC *lahc, VNS* vns, Neighborhood* neighborhood, double timeRem,  int nIterations, char* nameInst)$/;"	f	signature:(LAHC *lahc, VNS* vns, Neighborhood* neighborhood, double timeRem, int nIterations, char* nameInst)
LAHC_run_vns	./lahc.h	/^void LAHC_run_vns(LAHC *lahc, VNS* vns, Neighborhood* neighborhood, double timeRem,  int nIterations,  char* nameInst);$/;"	p	signature:(LAHC *lahc, VNS* vns, Neighborhood* neighborhood, double timeRem, int nIterations, char* nameInst)
LAHC_setF	./lahc.c	/^void LAHC_setF(LAHC *lahc, int idxF, Cost value)$/;"	f	signature:(LAHC *lahc, int idxF, Cost value)
LAHC_setF	./lahc.h	/^void LAHC_setF(LAHC *lahc, int idxF, Cost value);$/;"	p	signature:(LAHC *lahc, int idxF, Cost value)
LAHC_updateF	./lahc.c	/^void LAHC_updateF(LAHC *lahc)$/;"	f	signature:(LAHC *lahc)
LAHC_updateF	./lahc.h	/^void LAHC_updateF(LAHC *lahc);$/;"	p	signature:(LAHC *lahc)
LARGE_VECTOR	./vint_set.c	13;"	d	file:
LA_checkArgs	./learning.c	/^void LA_checkArgs(LearningAutomata *la, char **argv, int argc)$/;"	f	signature:(LearningAutomata *la, char **argv, int argc)
LA_checkArgs	./learning.h	/^void LA_checkArgs(LearningAutomata *la, char **argv, int argc);$/;"	p	signature:(LearningAutomata *la, char **argv, int argc)
LA_create	./learning.c	/^LearningAutomata *LA_create( const int nIntensities, const long double intensities[], char **argv, int argc )$/;"	f	signature:( const int nIntensities, const long double intensities[], char **argv, int argc )
LA_create	./learning.h	/^LearningAutomata *LA_create( const int nIntensities, const long double intensities[], char **argv, int argc );$/;"	p	signature:( const int nIntensities, const long double intensities[], char **argv, int argc )
LA_free	./learning.c	/^void LA_free( LearningAutomata **_la )$/;"	f	signature:( LearningAutomata **_la )
LA_free	./learning.h	/^void LA_free( LearningAutomata **_la );$/;"	p	signature:( LearningAutomata **_la )
LA_getIters	./learning.c	/^int LA_getIters( const LearningAutomata *la )$/;"	f	signature:( const LearningAutomata *la )
LA_getIters	./learning.h	/^int LA_getIters( const LearningAutomata *la );$/;"	p	signature:( const LearningAutomata *la )
LA_getLastSelection	./learning.c	/^int LA_getLastSelection( const LearningAutomata *la )$/;"	f	signature:( const LearningAutomata *la )
LA_getLastSelection	./learning.h	/^int LA_getLastSelection( const LearningAutomata *la );$/;"	p	signature:( const LearningAutomata *la )
LA_getLearningRate	./learning.c	/^double LA_getLearningRate( const LearningAutomata *la )$/;"	f	signature:( const LearningAutomata *la )
LA_getLearningRate	./learning.h	/^double LA_getLearningRate( const LearningAutomata *la );$/;"	p	signature:( const LearningAutomata *la )
LA_getResetInterval	./learning.c	/^int LA_getResetInterval( const LearningAutomata *la )$/;"	f	signature:( const LearningAutomata *la )
LA_getResetInterval	./learning.h	/^int LA_getResetInterval( const LearningAutomata *la );$/;"	p	signature:( const LearningAutomata *la )
LA_next	./learning.c	/^int LA_next( LearningAutomata *la )$/;"	f	signature:( LearningAutomata *la )
LA_next	./learning.h	/^int LA_next( LearningAutomata *la );$/;"	p	signature:( LearningAutomata *la )
LA_printProbabilities	./learning.c	/^void LA_printProbabilities( LearningAutomata *la, float pesw)$/;"	f	signature:( LearningAutomata *la, float pesw)
LA_printProbabilities	./learning.h	/^void LA_printProbabilities( LearningAutomata *la, float pesw);$/;"	p	signature:( LearningAutomata *la, float pesw)
LA_reset	./learning.c	/^void LA_reset( LearningAutomata *la )$/;"	f	signature:( LearningAutomata *la )
LA_reset	./learning.h	/^void LA_reset( LearningAutomata *la );$/;"	p	signature:( LearningAutomata *la )
LA_runSimpleTest	./learning.h	/^void LA_runSimpleTest();$/;"	p	signature:()
LA_setIntensities	./learning.c	/^void LA_setIntensities( LearningAutomata *la, double intensities[] )$/;"	f	signature:( LearningAutomata *la, double intensities[] )
LA_setIntensities	./learning.h	/^void LA_setIntensities( LearningAutomata *la, double intensities[] );$/;"	p	signature:( LearningAutomata *la, double intensities[] )
LA_setLearningRate	./learning.c	/^void LA_setLearningRate( LearningAutomata *la, double learningRate )$/;"	f	signature:( LearningAutomata *la, double learningRate )
LA_setLearningRate	./learning.h	/^void LA_setLearningRate( LearningAutomata *la, double learningRate );$/;"	p	signature:( LearningAutomata *la, double learningRate )
LA_setProbabilities	./learning.c	/^void LA_setProbabilities( LearningAutomata *la, double probabilities[] )$/;"	f	signature:( LearningAutomata *la, double probabilities[] )
LA_setProbabilities	./learning.h	/^void LA_setProbabilities( LearningAutomata *la, double probabilities[] );$/;"	p	signature:( LearningAutomata *la, double probabilities[] )
LA_setTime	./learning.c	/^void LA_setTime( LearningAutomata *la)$/;"	f	signature:( LearningAutomata *la)
LA_setTime	./learning.h	/^void LA_setTime( LearningAutomata *la);$/;"	p	signature:( LearningAutomata *la)
LA_update	./learning.c	/^void LA_update( LearningAutomata *la, const double obtainedReinforcement )$/;"	f	signature:( LearningAutomata *la, const double obtainedReinforcement )
LA_update	./learning.h	/^void LA_update( LearningAutomata *la, const double obtainedReinforcement );$/;"	p	signature:( LearningAutomata *la, const double obtainedReinforcement )
LA_updateProbability	./learning.c	/^void LA_updateProbability( LearningAutomata *la, int usedAction, double obtainedReinforcement )$/;"	f	signature:( LearningAutomata *la, int usedAction, double obtainedReinforcement )
LEARNING_HEADER	./learning.h	9;"	d
LEARNING_RATE	./learning.c	/^const double LEARNING_RATE = 1e-6; \/\/4,3,2...$/;"	v
LINE_SIZE	./cgraph.c	1029;"	d	file:
LINE_SIZE	./cgraph.c	1057;"	d	file:
LINE_SIZE	./cgraph.c	739;"	d	file:
LINE_SIZE	./cgraph.c	936;"	d	file:
LINE_SIZE	./clique.c	118;"	d	file:
LINE_SIZE	./clique.c	48;"	d	file:
LINE_SIZE	./macros.h	37;"	d
LINE_SIZE	./vec_str.c	19;"	d	file:
LIST_INT_HEADER	./list_int.h	9;"	d
LIntIter_hasNext	./list_int.c	/^char LIntIter_hasNext( const ListIntIter *it )$/;"	f	signature:( const ListIntIter *it )
LIntIter_hasNext	./list_int.h	/^char LIntIter_hasNext( const ListIntIter *it );$/;"	p	signature:( const ListIntIter *it )
LIntIter_next	./list_int.c	/^int LIntIter_next( ListIntIter **_it )$/;"	f	signature:( ListIntIter **_it )
LIntIter_next	./list_int.h	/^int LIntIter_next( ListIntIter **_it );$/;"	p	signature:( ListIntIter **_it )
LInt_clear	./list_int.c	/^void LInt_clear( ListInt *list )$/;"	f	signature:( ListInt *list )
LInt_clear	./list_int.h	/^void LInt_clear( ListInt *list );$/;"	p	signature:( ListInt *list )
LInt_create	./list_int.c	/^ListInt *LInt_create()$/;"	f
LInt_create	./list_int.h	/^ListInt *LInt_create();$/;"	p	signature:()
LInt_free	./list_int.c	/^void LInt_free( ListInt *_list )$/;"	f	signature:( ListInt *_list )
LInt_free	./list_int.h	/^void LInt_free( ListInt *_list );$/;"	p	signature:( ListInt *_list )
LInt_iterator	./list_int.c	/^ListIntIter *LInt_iterator( ListInt *list )$/;"	f	signature:( ListInt *list )
LInt_iterator	./list_int.h	/^ListIntIter *LInt_iterator( ListInt *list );$/;"	p	signature:( ListInt *list )
LInt_poll	./list_int.c	/^int LInt_poll( ListInt *list )$/;"	f	signature:( ListInt *list )
LInt_poll	./list_int.h	/^int LInt_poll( ListInt *list );$/;"	p	signature:( ListInt *list )
LInt_push	./list_int.c	/^void LInt_push( ListInt *list, const int value )$/;"	f	signature:( ListInt *list, const int value )
LInt_push	./list_int.h	/^void LInt_push( ListInt *list, int value );$/;"	p	signature:( ListInt *list, int value )
LInt_size	./list_int.c	/^int LInt_size( const ListInt *list )$/;"	f	signature:( const ListInt *list )
LInt_size	./list_int.h	/^int LInt_size( const ListInt *list );$/;"	p	signature:( const ListInt *list )
LONG_COMPL_PATH_HPP	./long_compl_path.h	9;"	d
LOW	./vint_set.c	316;"	d	file:
LOW	./vint_set.c	390;"	d	file:
LPCB_CUTS	./lp.h	53;"	d
LPCB_HEUR	./lp.h	54;"	d
LPC_CLIQUE	./lp.h	36;"	d
LPC_FLOW	./lp.h	30;"	d
LPC_GOMORY	./lp.h	23;"	d
LPC_KNAPSACK	./lp.h	29;"	d
LPC_L_AND_P	./lp.h	27;"	d
LPC_MIR	./lp.h	25;"	d
LPC_PREC	./lp.h	34;"	d
LPC_REDUCE	./lp.h	24;"	d
LPC_RR	./lp.h	35;"	d
LPC_TWO_MIR	./lp.h	26;"	d
LPC_ZERO_HALF	./lp.h	28;"	d
LP_CUT_NEW	./lp.h	33;"	d
LP_CUT_TYPES	./lp.h	22;"	d
LP_ERROR	./lp.h	19;"	d
LP_FEASIBLE	./lp.h	16;"	d
LP_HEADER	./lp.h	2;"	d
LP_INFEASIBLE	./lp.h	14;"	d
LP_INTINFEASIBLE	./lp.h	17;"	d
LP_MAX	./lp.h	10;"	d
LP_ME_DEFAULT	./lp.h	4;"	d
LP_ME_FEASIBILITY	./lp.h	6;"	d
LP_ME_OPTIMALITY	./lp.h	5;"	d
LP_MIN	./lp.h	9;"	d
LP_NO_SOL_FOUND	./lp.h	18;"	d
LP_OPTIMAL	./lp.h	13;"	d
LP_UNBOUNDED	./lp.h	15;"	d
LearningAutomata	./learning.h	/^typedef struct _LearningAutomata LearningAutomata;$/;"	t	typeref:struct:_LearningAutomata
LinearProgram	./lp.h	/^typedef struct _LinearProgram LinearProgram;$/;"	t	typeref:struct:_LinearProgram
LinearProgramPtr	./lp.h	/^typedef LinearProgram * LinearProgramPtr;$/;"	t
ListInt	./list_int.h	/^typedef struct _ListInt ListInt;$/;"	t	typeref:struct:_ListInt
ListIntIter	./list_int.h	/^typedef struct _Node ListIntIter;$/;"	t	typeref:struct:_Node
LongCP_create	./long_compl_path.c	/^LongestComplPath *LongCP_create( const Instance *inst )$/;"	f	signature:( const Instance *inst )
LongCP_create	./long_compl_path.h	/^LongestComplPath *LongCP_create( const Instance *inst );$/;"	p	signature:( const Instance *inst )
LongCP_free	./long_compl_path.c	/^void LongCP_free( LongestComplPath **_lcp )$/;"	f	signature:( LongestComplPath **_lcp )
LongCP_free	./long_compl_path.h	/^void LongCP_free( LongestComplPath **_lcp );$/;"	p	signature:( LongestComplPath **_lcp )
LongCP_get	./long_compl_path.c	/^const int *LongCP_get( const LongestComplPath *lcp )$/;"	f	signature:( const LongestComplPath *lcp )
LongCP_get	./long_compl_path.h	/^const int *LongCP_get( const LongestComplPath *lcp );$/;"	p	signature:( const LongestComplPath *lcp )
LongCP_solve	./long_compl_path.c	/^void LongCP_solve( LongestComplPath *lcp )$/;"	f	signature:( LongestComplPath *lcp )
LongCP_solve	./long_compl_path.h	/^void LongCP_solve( LongestComplPath *lcp );$/;"	p	signature:( LongestComplPath *lcp )
LongestComplPath	./long_compl_path.h	/^typedef struct _LongestComplPath LongestComplPath;$/;"	t	typeref:struct:_LongestComplPath
MACROS_H_INCLUDED	./macros.h	10;"	d
MAX	./macros.h	32;"	d
MAXELEMCUT	./results.c	20;"	d	file:
MAXROUND	./results.c	19;"	d	file:
MAX_CANDIDATES	./clique_extender.c	18;"	d	file:
MAX_CLIQUES_GENERATED	./clique_extender.c	19;"	d	file:
MAX_COMMAS	./cut_pool.c	25;"	d	file:
MAX_COMMAS	./cut_pool.c	78;"	d	file:
MAX_COMMAS	./mip_compact.c	5575;"	d	file:
MAX_COMMAS	./mip_compact.c	5628;"	d	file:
MAX_IDX	./mip_compact.c	1150;"	d	file:
MAX_IDX	./mip_compact.c	1171;"	d	file:
MAX_IDX	./mip_compact.c	1601;"	d	file:
MAX_IDX	./mip_compact.c	1622;"	d	file:
MAX_IDX	./mip_compact.c	2039;"	d	file:
MAX_IDX	./mip_compact.c	2067;"	d	file:
MAX_IDX	./mip_compact.c	2784;"	d	file:
MAX_IDX	./mip_compact.c	291;"	d	file:
MAX_IDX	./mip_compact.c	626;"	d	file:
MAX_IDX	./mip_compact.c	647;"	d	file:
MAX_NAME_SIZE	./cgraph.c	18;"	d	file:
MAX_NO_IMPROVEMENT	./grasp.c	17;"	d	file:
MAX_PRIORITY	./clique_elite_set.c	55;"	d	file:
MAX_PRIORITY	./clique_elite_set.c	77;"	d	file:
MAX_PRIORITYNZ	./clique_elite_set.c	56;"	d	file:
MAX_PRIORITYNZ	./clique_elite_set.c	78;"	d	file:
MAX_SECONDS	./grasp.c	18;"	d	file:
MAX_STACK_HEIGHT	./vint_set.c	319;"	d	file:
MAX_STACK_HEIGHT	./vint_set.c	387;"	d	file:
MAX_WHEEL_CENTERS	./oddhs.c	26;"	d	file:
MEMORY_H_DEFINED	./memory.h	9;"	d
MIN	./macros.h	33;"	d
MIN_CAP	./vint_set.c	12;"	d	file:
MIN_FRAC	./oddhs.c	19;"	d	file:
MIPC_ALL_PROJECTS	./mip_compact.h	22;"	d
MIPCompact	./mip_compact.h	/^typedef struct _MIPCompact MIPCompact;$/;"	t	typeref:struct:_MIPCompact
MIP_COMPACT	./mip_compact.h	12;"	d
MODE_SET_H	./mode_set.h	9;"	d
MSM_Solver	./ms_solver_mip.h	/^typedef struct _MSM_Solver MSM_Solver;$/;"	t	typeref:struct:_MSM_Solver
MSM_changeModes	./ms_solver_mip.c	/^char MSM_changeModes( MSM_Solver *msm, const ModeSet *current, int minChanges,  int maxChanges, const int **residency )$/;"	f	signature:( MSM_Solver *msm, const ModeSet *current, int minChanges, int maxChanges, const int **residency )
MSM_changeModes	./ms_solver_mip.h	/^char MSM_changeModes( MSM_Solver *msm, const ModeSet *current, int minChanges,  int maxChanges, const int **residency );$/;"	p	signature:( MSM_Solver *msm, const ModeSet *current, int minChanges, int maxChanges, const int **residency )
MSM_create	./ms_solver_mip.c	/^MSM_Solver *MSM_create( const Instance *inst, int firstJob, int lastJob, double timeLeft)$/;"	f	signature:( const Instance *inst, int firstJob, int lastJob, double timeLeft)
MSM_create	./ms_solver_mip.h	/^MSM_Solver *MSM_create( const Instance *inst, int firstJob, int lastJob, double timeLeft );$/;"	p	signature:( const Instance *inst, int firstJob, int lastJob, double timeLeft )
MSM_free	./ms_solver_mip.c	/^void MSM_free( MSM_Solver **_msm )$/;"	f	signature:( MSM_Solver **_msm )
MSM_free	./ms_solver_mip.h	/^void MSM_free( MSM_Solver **_msm );$/;"	p	signature:( MSM_Solver **_msm )
MSM_getSIdx	./ms_solver_mip.c	/^int MSM_getSIdx( const MSM_Solver *msm, int j, int m)$/;"	f	signature:( const MSM_Solver *msm, int j, int m)
MSM_getSIdx	./ms_solver_mip.h	/^int MSM_getSIdx( const MSM_Solver *msm, int j, int m);$/;"	p	signature:( const MSM_Solver *msm, int j, int m)
MSM_getSol	./ms_solver_mip.c	/^static void MSM_getSol( MSM_Solver *msm );$/;"	p	file:	signature:( MSM_Solver *msm )
MSM_getSol	./ms_solver_mip.c	/^void MSM_getSol( MSM_Solver *msm )$/;"	f	signature:( MSM_Solver *msm )
MSM_lp	./ms_solver_mip.c	/^LinearProgram *MSM_lp(const MSM_Solver *msm)$/;"	f	signature:(const MSM_Solver *msm)
MSM_lp	./ms_solver_mip.h	/^LinearProgram *MSM_lp(const MSM_Solver *msm);$/;"	p	signature:(const MSM_Solver *msm)
MSM_modes	./ms_solver_mip.c	/^const ModeSet *MSM_modes( const MSM_Solver *msm )$/;"	f	signature:( const MSM_Solver *msm )
MSM_modes	./ms_solver_mip.h	/^const ModeSet *MSM_modes( const MSM_Solver *msm );$/;"	p	signature:( const MSM_Solver *msm )
MSM_roundVar	./ms_solver_mip.h	/^void MSM_roundVar(MSM_Solver *msm, Solution *sol);$/;"	p	signature:(MSM_Solver *msm, Solution *sol)
MSM_roundingHeuristc	./ms_solver_mip.h	/^void MSM_roundingHeuristc(MSM_Solver *msm, Solution *sol);$/;"	p	signature:(MSM_Solver *msm, Solution *sol)
MSM_solve	./ms_solver_mip.c	/^int MSM_solve( MSM_Solver *msm, double timeLeft)$/;"	f	signature:( MSM_Solver *msm, double timeLeft)
MSM_solve	./ms_solver_mip.h	/^int MSM_solve( MSM_Solver *msm, double timeLeft);$/;"	p	signature:( MSM_Solver *msm, double timeLeft)
MSM_solve_as_continuous	./ms_solver_mip.c	/^void MSM_solve_as_continuous( MSM_Solver *msm )$/;"	f	signature:( MSM_Solver *msm )
MSSolverLAHC	./ms_solver_lahc.h	/^typedef struct _MSSolverLAHC MSSolverLAHC;$/;"	t	typeref:struct:_MSSolverLAHC
MS_SOLVER_LAHC_H	./ms_solver_lahc.h	9;"	d
MS_SOLVER_MIP_H	./ms_solver_mip.h	9;"	d
MS_bestModes	./ms_solver_lahc.c	/^ModeSet *MS_bestModes( const MSSolverLAHC *solver )$/;"	f	signature:( const MSSolverLAHC *solver )
MS_bestModes	./ms_solver_lahc.h	/^ModeSet *MS_bestModes( const MSSolverLAHC *solver );$/;"	p	signature:( const MSSolverLAHC *solver )
MS_create	./ms_solver_lahc.h	/^MSSolverLAHC *MS_create( const Instance *inst, int sizeList);$/;"	p	signature:( const Instance *inst, int sizeList)
MS_createByProj	./ms_solver_lahc.h	/^MSSolverLAHC *MS_createByProj( const Instance *inst, int sizeList, int firstJob, int lastJob );$/;"	p	signature:( const Instance *inst, int sizeList, int firstJob, int lastJob )
MS_free	./ms_solver_lahc.c	/^void MS_free( MSSolverLAHC **_msLahc )$/;"	f	signature:( MSSolverLAHC **_msLahc )
MS_free	./ms_solver_lahc.h	/^void MS_free( MSSolverLAHC **_msLahc );$/;"	p	signature:( MSSolverLAHC **_msLahc )
MS_getNeighborhood	./ms_solver_lahc.c	/^Neighborhood *MS_getNeighborhood( const MSSolverLAHC *solver )$/;"	f	signature:( const MSSolverLAHC *solver )
MS_getNeighborhood	./ms_solver_lahc.h	/^Neighborhood *MS_getNeighborhood( const MSSolverLAHC *solver );$/;"	p	signature:( const MSSolverLAHC *solver )
MS_run	./ms_solver_lahc.c	/^void MS_run(MSSolverLAHC *msLahc, int iterat)$/;"	f	signature:(MSSolverLAHC *msLahc, int iterat)
MS_run	./ms_solver_lahc.h	/^void MS_run(MSSolverLAHC *msLahc, int iterat);$/;"	p	signature:(MSSolverLAHC *msLahc, int iterat)
MS_runByProj	./ms_solver_lahc.c	/^void MS_runByProj(const Instance *inst, Solution *sol, int LFA, int iterat)$/;"	f	signature:(const Instance *inst, Solution *sol, int LFA, int iterat)
MS_runByProj	./ms_solver_lahc.h	/^void MS_runByProj(const Instance *inst, Solution *sol, int LFA, int iterat);$/;"	p	signature:(const Instance *inst, Solution *sol, int LFA, int iterat)
MipC_CutSeparatedModesRR	./mip_compact.c	/^int MipC_CutSeparatedModesRR( MIPCompact *mipC ,  double timeLeft)$/;"	f	signature:( MIPCompact *mipC , double timeLeft)
MipC_CutSeparatedModesRR	./mip_compact.h	/^int MipC_CutSeparatedModesRR( MIPCompact *mipC , double timeLeft);$/;"	p	signature:( MIPCompact *mipC , double timeLeft)
MipC_TPD	./mip_compact.c	/^double MipC_TPD( MIPCompact *MipP )$/;"	f	signature:( MIPCompact *MipP )
MipC_TPD	./mip_compact.h	/^double MipC_TPD( MIPCompact *MipP );$/;"	p	signature:( MIPCompact *MipP )
MipC_allocateSol	./mip_compact.c	/^void MipC_allocateSol(MIPCompact *mipC)$/;"	f	signature:(MIPCompact *mipC)
MipC_allocateSol	./mip_compact.h	/^void MipC_allocateSol(MIPCompact *mipC);$/;"	p	signature:(MIPCompact *mipC)
MipC_checkArgs	./mip_compact.c	/^void MipC_checkArgs(MIPCompact *mipC, char **argv, int argc)$/;"	f	signature:(MIPCompact *mipC, char **argv, int argc)
MipC_checkArgs	./mip_compact.h	/^void MipC_checkArgs(MIPCompact *mipC, char **argv, int argc);$/;"	p	signature:(MIPCompact *mipC, char **argv, int argc)
MipC_clear	./mip_compact.c	/^void MipC_clear( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_create	./mip_compact.c	/^MIPCompact *MipC_create( Instance *inst, char **argv, int argc, const int idxProj, const int tpdSum, double timeLeft )$/;"	f	signature:( Instance *inst, char **argv, int argc, const int idxProj, const int tpdSum, double timeLeft )
MipC_create	./mip_compact.h	/^MIPCompact *MipC_create( Instance *inst, char ** argv, int argc, const int idxProj, const int tpdSum, double timeLeft );$/;"	p	signature:( Instance *inst, char ** argv, int argc, const int idxProj, const int tpdSum, double timeLeft )
MipC_cutCLIQUE	./mip_compact.c	/^int MipC_cutCLIQUE( MIPCompact *mipC , double timeLeft)$/;"	f	signature:( MIPCompact *mipC , double timeLeft)
MipC_cutCLIQUE	./mip_compact.h	/^int MipC_cutCLIQUE( MIPCompact *mipC , double timeLeft);$/;"	p	signature:( MIPCompact *mipC , double timeLeft)
MipC_cutPrec	./mip_compact.c	/^int MipC_cutPrec( MIPCompact *mipC , double timeLeft)$/;"	f	signature:( MIPCompact *mipC , double timeLeft)
MipC_cutPrec	./mip_compact.h	/^int MipC_cutPrec( MIPCompact *mipC, double timeLeft);$/;"	p	signature:( MIPCompact *mipC, double timeLeft)
MipC_free	./mip_compact.c	/^void MipC_free( MIPCompact **mipp )$/;"	f	signature:( MIPCompact **mipp )
MipC_free	./mip_compact.h	/^void MipC_free( MIPCompact **mipp );$/;"	p	signature:( MIPCompact **mipp )
MipC_getBestObj	./mip_compact.c	/^double MipC_getBestObj( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getBestObj	./mip_compact.h	/^double MipC_getBestObj( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getBestPossibleObj	./mip_compact.c	/^double MipC_getBestPossibleObj( MIPCompact *mipC)$/;"	f	signature:( MIPCompact *mipC)
MipC_getBestPossibleObj	./mip_compact.h	/^double MipC_getBestPossibleObj( MIPCompact *mipC);$/;"	p	signature:( MIPCompact *mipC)
MipC_getContinuous	./mip_compact.c	/^int MipC_getContinuous(MIPCompact *mipC)$/;"	f	signature:(MIPCompact *mipC)
MipC_getContinuous	./mip_compact.h	/^int MipC_getContinuous(MIPCompact *mipC);$/;"	p	signature:(MIPCompact *mipC)
MipC_getCurrentObj	./mip_compact.c	/^double MipC_getCurrentObj( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getCurrentObj	./mip_compact.h	/^double MipC_getCurrentObj( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getCutCLIQUE	./mip_compact.c	/^int MipC_getCutCLIQUE( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getCutCLIQUE	./mip_compact.h	/^int MipC_getCutCLIQUE( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getCutDefaultCBC	./mip_compact.c	/^int MipC_getCutDefaultCBC( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getCutDefaultCBC	./mip_compact.h	/^int MipC_getCutDefaultCBC( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getCutPrec	./mip_compact.c	/^int MipC_getCutPrec( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getCutPrec	./mip_compact.h	/^int MipC_getCutPrec( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getCutRR	./mip_compact.c	/^int MipC_getCutRR( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getCutRR	./mip_compact.h	/^int MipC_getCutRR( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getLifting	./mip_compact.c	/^int MipC_getLifting(MIPCompact *mipC)$/;"	f	signature:(MIPCompact *mipC)
MipC_getLifting	./mip_compact.h	/^int MipC_getLifting(MIPCompact *mipC);$/;"	p	signature:(MIPCompact *mipC)
MipC_getMaxCut	./mip_compact.c	/^int MipC_getMaxCut( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getMaxCut	./mip_compact.h	/^int MipC_getMaxCut( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getMaxCutElements	./mip_compact.h	/^int MipC_getMaxCutElements(int idx);$/;"	p	signature:(int idx)
MipC_getMaxElements	./mip_compact.h	/^int MipC_getMaxElements(int idx);$/;"	p	signature:(int idx)
MipC_getMaxReducedCost	./mip_compact.c	/^double MipC_getMaxReducedCost(MIPCompact *mipC)$/;"	f	signature:(MIPCompact *mipC)
MipC_getMaxReducedCost	./mip_compact.h	/^double MipC_getMaxReducedCost(MIPCompact *mipC);$/;"	p	signature:(MIPCompact *mipC)
MipC_getMinRoundUp	./mip_compact.c	/^float MipC_getMinRoundUp(MIPCompact *mipC)$/;"	f	signature:(MIPCompact *mipC)
MipC_getNCut	./mip_compact.h	/^int MipC_getNCut( MIPCompact *mipC, int idx );$/;"	p	signature:( MIPCompact *mipC, int idx )
MipC_getRemoveCuts	./mip_compact.h	/^int MipC_getRemoveCuts( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getSlack	./mip_compact.c	/^double MipC_getSlack( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getSlack	./mip_compact.h	/^double MipC_getSlack( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getSol	./mip_compact.c	/^Solution* MipC_getSol( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_getSol	./mip_compact.h	/^Solution* MipC_getSol( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_getSumAllElements	./mip_compact.h	/^int MipC_getSumAllElements(int idx);$/;"	p	signature:(int idx)
MipC_getSumAllVarWithConflicts	./mip_compact.h	/^int MipC_getSumAllVarWithConflicts(int idx);$/;"	p	signature:(int idx)
MipC_getSumElementsCut	./mip_compact.h	/^int MipC_getSumElementsCut(int idx);$/;"	p	signature:(int idx)
MipC_getTCut	./mip_compact.h	/^double MipC_getTCut( MIPCompact *mipC, int idx );$/;"	p	signature:( MIPCompact *mipC, int idx )
MipC_getnRounds	./mip_compact.h	/^int MipC_getnRounds();$/;"	p	signature:()
MipC_hasSolution	./mip_compact.c	/^char MipC_hasSolution( MIPCompact *MipP )$/;"	f	signature:( MIPCompact *MipP )
MipC_hasSolution	./mip_compact.h	/^char MipC_hasSolution( MIPCompact *MipP );$/;"	p	signature:( MIPCompact *MipP )
MipC_help	./mip_compact.c	/^void MipC_help( )$/;"	f
MipC_help	./mip_compact.h	/^void MipC_help( );$/;"	p	signature:( )
MipC_inst	./mip_compact.c	/^const Instance* MipC_inst( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_inst	./mip_compact.h	/^const Instance* MipC_inst( MIPCompact *mipC );$/;"	p	signature:( MIPCompact *mipC )
MipC_mip	./mip_compact.c	/^LinearProgram* MipC_mip( MIPCompact *mipC )$/;"	f	signature:( MIPCompact *mipC )
MipC_mip	./mip_compact.h	/^LinearProgram* MipC_mip( MIPCompact *mipC);$/;"	p	signature:( MIPCompact *mipC)
MipC_parseParameters	./mip_compact.c	/^void MipC_parseParameters( int argc, const char **argv )$/;"	f	signature:( int argc, const char **argv )
MipC_parseParameters	./mip_compact.h	/^void MipC_parseParameters( int argc, const char **argv );$/;"	p	signature:( int argc, const char **argv )
MipC_printConfig	./mip_compact.c	/^void MipC_printConfig( )$/;"	f
MipC_printConfig	./mip_compact.h	/^void MipC_printConfig( );$/;"	p	signature:( )
MipC_quick_sort	./mip_compact.c	/^void MipC_quick_sort (IntDblPair *a, int n)$/;"	f	signature:(IntDblPair *a, int n)
MipC_quick_sort	./mip_compact.h	/^void MipC_quick_sort(IntDblPair *a, int n);$/;"	p	signature:(IntDblPair *a, int n)
MipC_quick_sort_vec	./mip_compact.c	/^void MipC_quick_sort_vec ( int *idx, double *coe, int n)$/;"	f	signature:( int *idx, double *coe, int n)
MipC_roundVar	./mip_compact.c	/^int MipC_roundVar(MIPCompact *mipC, double timeLeft)$/;"	f	signature:(MIPCompact *mipC, double timeLeft)
MipC_roundVar	./mip_compact.h	/^int MipC_roundVar(MIPCompact *mipC, double timeLeft);$/;"	p	signature:(MIPCompact *mipC, double timeLeft)
MipC_roundingHeuristc	./mip_compact.c	/^int MipC_roundingHeuristc(MIPCompact *mipC, double timeLeft)$/;"	f	signature:(MIPCompact *mipC, double timeLeft)
MipC_roundingHeuristc	./mip_compact.h	/^int MipC_roundingHeuristc(MIPCompact *mipC, double timeLeft);$/;"	p	signature:(MIPCompact *mipC, double timeLeft)
MipC_run	./mip_compact.c	/^MIPCompact *MipC_run( Instance *inst,  char **argv, int argc, int sumtpd,  double timeLeft)$/;"	f	signature:( Instance *inst, char **argv, int argc, int sumtpd, double timeLeft)
MipC_run	./mip_compact.h	/^MIPCompact *MipC_run( Instance *inst,  char **argv, int argc, int sumtpd, double timeLeft);$/;"	p	signature:( Instance *inst, char **argv, int argc, int sumtpd, double timeLeft)
MipC_runExact	./mip_compact.c	/^MIPCompact *MipC_runExact( Instance *inst,  char **argv, int argc, int sumtpd, double timeLeft)$/;"	f	signature:( Instance *inst, char **argv, int argc, int sumtpd, double timeLeft)
MipC_runExact	./mip_compact.h	/^MIPCompact *MipC_runExact( Instance *inst,  char **argv, int argc, int sumtpd, double timeLeft);$/;"	p	signature:( Instance *inst, char **argv, int argc, int sumtpd, double timeLeft)
MipC_runHeuristc	./mip_compact.c	/^MIPCompact *MipC_runHeuristc( Instance *inst,  char **argv, int argc, int sumtpd, double timeLeft)$/;"	f	signature:( Instance *inst, char **argv, int argc, int sumtpd, double timeLeft)
MipC_runHeuristc	./mip_compact.h	/^MIPCompact *MipC_runHeuristc( Instance *inst,  char **argv, int argc, int sumtpd, double timeLeft);$/;"	p	signature:( Instance *inst, char **argv, int argc, int sumtpd, double timeLeft)
MipC_setInitialSolution	./mip_compact.c	/^void MipC_setInitialSolution( MIPCompact *mipp, const Solution *_bestSol )$/;"	f	signature:( MIPCompact *mipp, const Solution *_bestSol )
MipC_setInitialSolution	./mip_compact.h	/^void MipC_setInitialSolution( MIPCompact *mipp, const Solution *_bestSol );$/;"	p	signature:( MIPCompact *mipp, const Solution *_bestSol )
MipC_setMaxSeconds	./mip_compact.c	/^void MipC_setMaxSeconds( MIPCompact *MipP, int maxSeconds )$/;"	f	signature:( MIPCompact *MipP, int maxSeconds )
MipC_setMaxSeconds	./mip_compact.h	/^void MipC_setMaxSeconds( MIPCompact *MipP, int maxSeconds );$/;"	p	signature:( MIPCompact *MipP, int maxSeconds )
MipC_solve	./mip_compact.c	/^void MipC_solve( MIPCompact *mipp, double timeLeft)$/;"	f	signature:( MIPCompact *mipp, double timeLeft)
MipC_solve	./mip_compact.h	/^void MipC_solve( MIPCompact *mipp, double timeLeft );$/;"	p	signature:( MIPCompact *mipp, double timeLeft )
MipC_solve_as_continuous	./mip_compact.c	/^int MipC_solve_as_continuous( MIPCompact *mipC, double timeLeft )$/;"	f	signature:( MIPCompact *mipC, double timeLeft )
MipC_solve_as_continuous	./mip_compact.h	/^int MipC_solve_as_continuous( MIPCompact *mipC, double timeLeft);$/;"	p	signature:( MIPCompact *mipC, double timeLeft)
MipC_solve_as_continuous_analyzing_cut	./mip_compact.c	/^int MipC_solve_as_continuous_analyzing_cut( MIPCompact *mipC, double timeLeft )$/;"	f	signature:( MIPCompact *mipC, double timeLeft )
MipC_solve_as_continuous_analyzing_cut	./mip_compact.h	/^int MipC_solve_as_continuous_analyzing_cut( MIPCompact *mipC, double timeLeft );$/;"	p	signature:( MIPCompact *mipC, double timeLeft )
MipC_writeArgs	./mip_compact.c	/^void MipC_writeArgs(MIPCompact *mipC, FILE *fp, char **argv, int argc, double startT, int sumtpd)$/;"	f	signature:(MIPCompact *mipC, FILE *fp, char **argv, int argc, double startT, int sumtpd)
MipC_writeArgs	./mip_compact.h	/^void MipC_writeArgs(MIPCompact *mipC, FILE *fp, char **argv, int argc,  double startT, int sumtpd);$/;"	p	signature:(MIPCompact *mipC, FILE *fp, char **argv, int argc, double startT, int sumtpd)
MipC_writeLP	./mip_compact.c	/^void MipC_writeLP( const MIPCompact *mipp, const char *fileName )$/;"	f	signature:( const MIPCompact *mipp, const char *fileName )
MipC_writeLP	./mip_compact.h	/^void MipC_writeLP( const MIPCompact *mipp, const char *fileName );$/;"	p	signature:( const MIPCompact *mipp, const char *fileName )
Mode	./instance.h	/^typedef struct _Mode Mode;$/;"	t	typeref:struct:_Mode
ModeSet	./mode_set.h	/^typedef struct _ModeSet ModeSet;$/;"	t	typeref:struct:_ModeSet
Mode_cpy	./instance.c	/^static void Mode_cpy( Mode *mTarget, const Mode *mSource)$/;"	f	file:	signature:( Mode *mTarget, const Mode *mSource)
Mode_cpy	./instance.c	/^static void Mode_cpy( Mode *mTarget, const Mode *mSource);$/;"	p	file:	signature:( Mode *mTarget, const Mode *mSource)
Mode_duration	./instance.c	/^int Mode_duration( const Mode *mode )$/;"	f	signature:( const Mode *mode )
Mode_duration	./instance.h	/^int Mode_duration( const Mode *mode );$/;"	p	signature:( const Mode *mode )
Mode_idxResN	./instance.c	/^int Mode_idxResN( const Mode *mode, int i )$/;"	f	signature:( const Mode *mode, int i )
Mode_idxResN	./instance.h	/^int Mode_idxResN( const Mode *mode, int i );$/;"	p	signature:( const Mode *mode, int i )
Mode_idxResR	./instance.c	/^int Mode_idxResR( const Mode *mode, int i )$/;"	f	signature:( const Mode *mode, int i )
Mode_idxResR	./instance.h	/^int Mode_idxResR( const Mode *mode, int i );$/;"	p	signature:( const Mode *mode, int i )
Mode_idxResROnMode	./instance.c	/^int Mode_idxResROnMode( const Instance *inst, const Mode *mode, int i )$/;"	f	signature:( const Instance *inst, const Mode *mode, int i )
Mode_idxResROnMode	./instance.h	/^int Mode_idxResROnMode( const Instance *inst, const Mode *mode, int i );$/;"	p	signature:( const Instance *inst, const Mode *mode, int i )
Mode_index	./instance.c	/^int Mode_index( const Mode *mode )$/;"	f	signature:( const Mode *mode )
Mode_index	./instance.h	/^int Mode_index( const Mode *mode );$/;"	p	signature:( const Mode *mode )
Mode_isFeasible	./instance.c	/^char Mode_isFeasible( const Instance *inst, const Mode *mode )$/;"	f	signature:( const Instance *inst, const Mode *mode )
Mode_isFeasible	./instance.h	/^char Mode_isFeasible( const Instance *inst, const Mode *mode );$/;"	p	signature:( const Instance *inst, const Mode *mode )
Mode_nResN	./instance.c	/^int Mode_nResN( const Mode *mode )$/;"	f	signature:( const Mode *mode )
Mode_nResN	./instance.h	/^int Mode_nResN( const Mode *mode );$/;"	p	signature:( const Mode *mode )
Mode_nResR	./instance.c	/^int Mode_nResR( const Mode *mode )$/;"	f	signature:( const Mode *mode )
Mode_nResR	./instance.h	/^int Mode_nResR( const Mode *mode );$/;"	p	signature:( const Mode *mode )
Mode_print	./instance.c	/^void Mode_print( const Instance *inst, const Job *job, int i, int nHid )$/;"	f	signature:( const Instance *inst, const Job *job, int i, int nHid )
Mode_print	./instance.h	/^void Mode_print( const Instance *inst, const Job *job, int i, int nHid );$/;"	p	signature:( const Instance *inst, const Job *job, int i, int nHid )
Mode_useResN	./instance.c	/^int Mode_useResN( const Mode *mode, int i )$/;"	f	signature:( const Mode *mode, int i )
Mode_useResN	./instance.h	/^int Mode_useResN( const Mode *mode, int i );$/;"	p	signature:( const Mode *mode, int i )
Mode_useResR	./instance.c	/^int Mode_useResR( const Mode *mode, int i )$/;"	f	signature:( const Mode *mode, int i )
Mode_useResR	./instance.h	/^int Mode_useResR( const Mode *mode, int i );$/;"	p	signature:( const Mode *mode, int i )
Modes_cost	./mode_set.c	/^Cost Modes_cost(const ModeSet *modeSet)$/;"	f	signature:(const ModeSet *modeSet)
Modes_cost	./mode_set.h	/^Cost Modes_cost( const ModeSet *modeSet );$/;"	p	signature:( const ModeSet *modeSet )
Modes_cpy	./mode_set.c	/^void Modes_cpy( ModeSet *target, const ModeSet *modeSet )$/;"	f	signature:( ModeSet *target, const ModeSet *modeSet )
Modes_cpy	./mode_set.h	/^void Modes_cpy( ModeSet *target, const ModeSet *modeSet );$/;"	p	signature:( ModeSet *target, const ModeSet *modeSet )
Modes_create	./mode_set.c	/^ModeSet *Modes_create( const Instance* inst )$/;"	f	signature:( const Instance* inst )
Modes_create	./mode_set.h	/^ModeSet *Modes_create( const Instance* inst );$/;"	p	signature:( const Instance* inst )
Modes_free	./mode_set.c	/^void Modes_free( ModeSet **_modeSet )$/;"	f	signature:( ModeSet **_modeSet )
Modes_free	./mode_set.h	/^void Modes_free( ModeSet **_modeSet );$/;"	p	signature:( ModeSet **_modeSet )
Modes_getModes	./mode_set.c	/^int *Modes_getModes(const ModeSet *modeSet)$/;"	f	signature:(const ModeSet *modeSet)
Modes_getModes	./mode_set.h	/^int *Modes_getModes(const ModeSet *modeSet);$/;"	p	signature:(const ModeSet *modeSet)
Modes_inf	./mode_set.c	/^int Modes_inf(const ModeSet *modeSet)$/;"	f	signature:(const ModeSet *modeSet)
Modes_inf	./mode_set.h	/^int Modes_inf( const ModeSet *modeSet );$/;"	p	signature:( const ModeSet *modeSet )
Modes_isntEmpty	./mode_set.c	/^void Modes_isntEmpty( ModeSet *modeSet )$/;"	f	signature:( ModeSet *modeSet )
Modes_isntEmpty	./mode_set.h	/^void Modes_isntEmpty( ModeSet *modeSet );$/;"	p	signature:( ModeSet *modeSet )
Modes_job	./mode_set.c	/^int Modes_job( const ModeSet *modeSet, int idxJob )$/;"	f	signature:( const ModeSet *modeSet, int idxJob )
Modes_job	./mode_set.h	/^int Modes_job( const ModeSet *modeSet, int idxJob );$/;"	p	signature:( const ModeSet *modeSet, int idxJob )
Modes_modify	./mode_set.c	/^void Modes_modify( ModeSet *modeSet, int idxJob, int idxNewMode)$/;"	f	signature:( ModeSet *modeSet, int idxJob, int idxNewMode)
Modes_modify	./mode_set.h	/^void Modes_modify( ModeSet *modeSet, int idxJob, int idxNewMode);$/;"	p	signature:( ModeSet *modeSet, int idxJob, int idxNewMode)
Modes_modifyAndVerify	./mode_set.c	/^int Modes_modifyAndVerify( ModeSet *modeSet, int idxJob, int idxNewMode )$/;"	f	signature:( ModeSet *modeSet, int idxJob, int idxNewMode )
Modes_modifyAndVerify	./mode_set.h	/^int Modes_modifyAndVerify( ModeSet *modeSet, int idxJob, int idxNewMode );$/;"	p	signature:( ModeSet *modeSet, int idxJob, int idxNewMode )
Modes_verify	./mode_set.c	/^int Modes_verify( ModeSet *modeSet, int idxJob, int idxNewMode )$/;"	f	signature:( ModeSet *modeSet, int idxJob, int idxNewMode )
Modes_verify	./mode_set.h	/^int Modes_verify( ModeSet *modeSet, int idxJob, int idxNewMode );$/;"	p	signature:( ModeSet *modeSet, int idxJob, int idxNewMode )
NEIGHBORHOOD_H	./neighborhood.h	2;"	d
NODE_HEAP_H	./node_heap.h	12;"	d
NULL_NODE	./spaths.h	14;"	d
N_FIELDS	./instance.c	1076;"	d	file:
N_FIELDS	./instance.c	1304;"	d	file:
N_FIELDS	./instance.c	1616;"	d	file:
N_NEIGHBORHOOD_LS	./neighborhood.c	22;"	d	file:
N_REWARDED_ACTIONS	./learning.c	/^const int N_REWARDED_ACTIONS = 1;$/;"	v
NeighIterator	./cgraph.h	/^typedef struct _NeighIterator NeighIterator;$/;"	t	typeref:struct:_NeighIterator
Neighbor	./digraph.h	/^} Neighbor;$/;"	t	typeref:struct:__anon8
Neighbor_Shake	./neighborhood.c	/^void Neighbor_Shake( VNS *vns, Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int nMoves,  Test *test)$/;"	f	signature:( VNS *vns, Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int nMoves, Test *test)
Neighbor_Shake2	./neighborhood.c	/^void Neighbor_Shake2( VNS *vns, Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int nMoves,  Test *test)$/;"	f	signature:( VNS *vns, Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int nMoves, Test *test)
Neighbor_SmartShake	./neighborhood.c	/^void Neighbor_SmartShake( VNS *vns, Neighborhood *neighborhood, Solution *sol, Solution *bestSol, int nMovesShake, int sizeSamplingShake, double timeRem)$/;"	f	signature:( VNS *vns, Neighborhood *neighborhood, Solution *sol, Solution *bestSol, int nMovesShake, int sizeSamplingShake, double timeRem)
Neighbor_callDetLS	./neighborhood.c	/^int Neighbor_callDetLS( Neighborhood *neighborhood,$/;"	f	signature:( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem, Test *test)
Neighbor_callDetLS	./neighborhood.h	/^int Neighbor_callDetLS( Neighborhood *neighborhood,$/;"	p	signature:( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem, Test *test)
Neighbor_callDetLS_Parallel	./neighborhood.c	/^int Neighbor_callDetLS_Parallel( Neighborhood *neigh,$/;"	f	signature:( Neighborhood *neigh, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nThreads, Test *test)
Neighbor_callDetLS_Parallel	./neighborhood.h	/^int Neighbor_callDetLS_Parallel( Neighborhood *neigh,$/;"	p	signature:( Neighborhood *neigh, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nThreads, Test *test)
Neighbor_callStocChosen	./neighborhood.c	/^int Neighbor_callStocChosen( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN,  Test *test)$/;"	f	signature:( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, Test *test)
Neighbor_callStocChosen	./neighborhood.h	/^int Neighbor_callStocChosen( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, Test *test);$/;"	p	signature:( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, Test *test)
Neighbor_callStocLS	./neighborhood.c	/^int Neighbor_callStocLS( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, LearningAutomata *la, int learning)$/;"	f	signature:( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, LearningAutomata *la, int learning)
Neighbor_callStocLS	./neighborhood.h	/^int Neighbor_callStocLS( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current,  LearningAutomata *la, int learning);$/;"	p	signature:( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, LearningAutomata *la, int learning)
Neighbor_callStocRandom	./neighborhood.c	/^int Neighbor_callStocRandom( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current)$/;"	f	signature:( Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current)
Neighbor_changeFourMode	./neighborhood.c	/^int Neighbor_changeFourMode(Neighborhood *neighborhood, Solution *sol,int j1, int j2, int j3, int j4, int m1, int m2, int m3, int m4)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol,int j1, int j2, int j3, int j4, int m1, int m2, int m3, int m4)
Neighbor_changeFourMode	./neighborhood.h	/^int Neighbor_changeFourMode(Neighborhood *neighborhood,Solution *sol,int j1, int j2, int j3, int j4, int m1, int m2, int m3, int m4);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol,int j1, int j2, int j3, int j4, int m1, int m2, int m3, int m4)
Neighbor_changeOneMode	./neighborhood.c	/^int Neighbor_changeOneMode(Neighborhood *neighborhood, Solution *sol, int j, int m)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, int j, int m)
Neighbor_changeOneMode	./neighborhood.h	/^int Neighbor_changeOneMode(Neighborhood *neighborhood,Solution *sol, int j, int m);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, int j, int m)
Neighbor_changeThreeMode	./neighborhood.c	/^int Neighbor_changeThreeMode(Neighborhood *neighborhood, Solution *sol, int j1, int j2, int j3, int m1, int m2, int m3)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, int j1, int j2, int j3, int m1, int m2, int m3)
Neighbor_changeThreeMode	./neighborhood.h	/^int Neighbor_changeThreeMode(Neighborhood *neighborhood,Solution *sol, int j1, int j2, int j3, int m1, int m2, int m3);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, int j1, int j2, int j3, int m1, int m2, int m3)
Neighbor_changeTwoMode	./neighborhood.c	/^int Neighbor_changeTwoMode(Neighborhood *neighborhood, Solution *sol, int j1, int j2, int m1, int m2)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, int j1, int j2, int m1, int m2)
Neighbor_changeTwoMode	./neighborhood.h	/^int Neighbor_changeTwoMode(Neighborhood *neighborhood,Solution *sol, int j1, int j2, int m1, int m2);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, int j1, int j2, int m1, int m2)
Neighbor_checkArgs	./neighborhood.c	/^void Neighbor_checkArgs(Neighborhood *neighbor, char **argv, int argc)$/;"	f	signature:(Neighborhood *neighbor, char **argv, int argc)
Neighbor_checkArgs	./neighborhood.h	/^void Neighbor_checkArgs(Neighborhood *neighbor, char **argv, int argc);$/;"	p	signature:(Neighborhood *neighbor, char **argv, int argc)
Neighbor_checkMoveSW	./neighborhood.c	/^void Neighbor_checkMoveSW(Neighborhood *neighborhood, Solution * sol, Solution * oldSol)$/;"	f	signature:(Neighborhood *neighborhood, Solution * sol, Solution * oldSol)
Neighbor_checkMoveSW	./neighborhood.h	/^void Neighbor_checkMoveSW(Neighborhood *neighborhood, Solution * sol, Solution * oldSol);$/;"	p	signature:(Neighborhood *neighborhood, Solution * sol, Solution * oldSol)
Neighbor_clearImpTime	./neighborhood.c	/^void Neighbor_clearImpTime(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_clearImpTime	./neighborhood.h	/^void Neighbor_clearImpTime(Neighborhood *neighborhood);$/;"	p	signature:(Neighborhood *neighborhood)
Neighbor_compactOnExtreme	./neighborhood.c	/^int Neighbor_compactOnExtreme(Neighborhood *neighborhood, Solution *sol, int j1)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, int j1)
Neighbor_compactOnExtreme	./neighborhood.h	/^int Neighbor_compactOnExtreme(Neighborhood *neighborhood,Solution *sol, int j1);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, int j1)
Neighbor_compactProj	./neighborhood.c	/^int Neighbor_compactProj(Neighborhood *neighborhood, Solution *sol, double perc, int p)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, double perc, int p)
Neighbor_compactProj	./neighborhood.h	/^int Neighbor_compactProj(Neighborhood *neighborhood,Solution *sol, double perc, int p);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, double perc, int p)
Neighbor_create	./neighborhood.c	/^Neighborhood *Neighbor_create( const Instance* inst, char ** argv, int argc )$/;"	f	signature:( const Instance* inst, char ** argv, int argc )
Neighbor_create	./neighborhood.h	/^Neighborhood *Neighbor_create( const Instance* inst, char **argv, int argc );$/;"	p	signature:( const Instance* inst, char **argv, int argc )
Neighbor_free	./neighborhood.c	/^void Neighbor_free( Neighborhood **_neighbor )$/;"	f	signature:( Neighborhood **_neighbor )
Neighbor_free	./neighborhood.h	/^void Neighbor_free( Neighborhood **_neighbor );$/;"	p	signature:( Neighborhood **_neighbor )
Neighbor_getAssortment	./neighborhood.c	/^int *Neighbor_getAssortment(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_getAssortment	./neighborhood.h	/^int *Neighbor_getAssortment(Neighborhood *neighborhood);$/;"	p	signature:(Neighborhood *neighborhood)
Neighbor_getContLastJ	./neighborhood.c	/^int Neighbor_getContLastJ(Neighborhood *neigh)$/;"	f	signature:(Neighborhood *neigh)
Neighbor_getContLastJ	./neighborhood.h	/^int Neighbor_getContLastJ(Neighborhood *neigh);$/;"	p	signature:(Neighborhood *neigh)
Neighbor_getEQ	./neighborhood.c	/^long double Neighbor_getEQ(Neighborhood *neighbor, int i)$/;"	f	signature:(Neighborhood *neighbor, int i)
Neighbor_getEQ	./neighborhood.h	/^long double Neighbor_getEQ(Neighborhood *neighbor, int i);$/;"	p	signature:(Neighborhood *neighbor, int i)
Neighbor_getI	./neighborhood.c	/^long double Neighbor_getI(Neighborhood *neighbor, int i)$/;"	f	signature:(Neighborhood *neighbor, int i)
Neighbor_getI	./neighborhood.h	/^long double Neighbor_getI(Neighborhood *neighbor, int i);$/;"	p	signature:(Neighborhood *neighbor, int i)
Neighbor_getIdIntensity	./neighborhood.c	/^long double Neighbor_getIdIntensity(Neighborhood *neighborhood, int idxNeighbor)$/;"	f	signature:(Neighborhood *neighborhood, int idxNeighbor)
Neighbor_getIdIntensity	./neighborhood.h	/^long double Neighbor_getIdIntensity(Neighborhood *neighborhood, int idxNeighbor);$/;"	p	signature:(Neighborhood *neighborhood, int idxNeighbor)
Neighbor_getIdP	./neighborhood.c	/^double Neighbor_getIdP(Neighborhood *neighborhood, int idxNeighbor, int sw)$/;"	f	signature:(Neighborhood *neighborhood, int idxNeighbor, int sw)
Neighbor_getIdP	./neighborhood.h	/^double Neighbor_getIdP(Neighborhood *neighborhood, int idxNeighbor, int sw);$/;"	p	signature:(Neighborhood *neighborhood, int idxNeighbor, int sw)
Neighbor_getIdxAssortment	./neighborhood.c	/^int Neighbor_getIdxAssortment(Neighborhood *neighborhood, int idx)$/;"	f	signature:(Neighborhood *neighborhood, int idx)
Neighbor_getIdxAssortment	./neighborhood.h	/^int Neighbor_getIdxAssortment(Neighborhood *neighborhood, int idx);$/;"	p	signature:(Neighborhood *neighborhood, int idx)
Neighbor_getIntensity	./neighborhood.c	/^long double *Neighbor_getIntensity(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_getIntensity	./neighborhood.h	/^long double *Neighbor_getIntensity( Neighborhood *neighborhood );$/;"	p	signature:( Neighborhood *neighborhood )
Neighbor_getLastJob	./neighborhood.c	/^int Neighbor_getLastJob(Neighborhood *neigh, int idx)$/;"	f	signature:(Neighborhood *neigh, int idx)
Neighbor_getLastJob	./neighborhood.h	/^int Neighbor_getLastJob(Neighborhood *neigh, int idx);$/;"	p	signature:(Neighborhood *neigh, int idx)
Neighbor_getLastJobModify	./neighborhood.c	/^int Neighbor_getLastJobModify(Neighborhood *neigh, int idx)$/;"	f	signature:(Neighborhood *neigh, int idx)
Neighbor_getLastJobModify	./neighborhood.h	/^int Neighbor_getLastJobModify(Neighborhood *neigh, int idx);$/;"	p	signature:(Neighborhood *neigh, int idx)
Neighbor_getLastNeigh	./neighborhood.c	/^int Neighbor_getLastNeigh(Neighborhood *neigh)$/;"	f	signature:(Neighborhood *neigh)
Neighbor_getLastNeigh	./neighborhood.h	/^int Neighbor_getLastNeigh(Neighborhood *neigh);$/;"	p	signature:(Neighborhood *neigh)
Neighbor_getMaxK	./neighborhood.c	/^int Neighbor_getMaxK(Neighborhood *neighborhood, int idx)$/;"	f	signature:(Neighborhood *neighborhood, int idx)
Neighbor_getMaxK	./neighborhood.h	/^int Neighbor_getMaxK(Neighborhood *neighborhood, int idx);$/;"	p	signature:(Neighborhood *neighborhood, int idx)
Neighbor_getMinK	./neighborhood.c	/^int Neighbor_getMinK(Neighborhood *neighborhood, int idx)$/;"	f	signature:(Neighborhood *neighborhood, int idx)
Neighbor_getMinK	./neighborhood.h	/^int Neighbor_getMinK(Neighborhood *neighborhood, int idx);$/;"	p	signature:(Neighborhood *neighborhood, int idx)
Neighbor_getMoveSW	./neighborhood.c	/^int Neighbor_getMoveSW(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_getMoveSW	./neighborhood.h	/^int Neighbor_getMoveSW(Neighborhood *neighborhood);$/;"	p	signature:(Neighborhood *neighborhood)
Neighbor_getNewModes	./neighborhood.c	/^int Neighbor_getNewModes(Neighborhood *neigh, int idx)$/;"	f	signature:(Neighborhood *neigh, int idx)
Neighbor_getNewModes	./neighborhood.h	/^int Neighbor_getNewModes(Neighborhood *neigh, int idx);$/;"	p	signature:(Neighborhood *neigh, int idx)
Neighbor_getPenaltyChangeMode	./neighborhood.c	/^int Neighbor_getPenaltyChangeMode(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_getPosLastJobModify	./neighborhood.c	/^int Neighbor_getPosLastJobModify(Neighborhood *neigh, int idx)$/;"	f	signature:(Neighborhood *neigh, int idx)
Neighbor_getPosLastJobModify	./neighborhood.h	/^int Neighbor_getPosLastJobModify(Neighborhood *neigh, int idx);$/;"	p	signature:(Neighborhood *neigh, int idx)
Neighbor_getTE	./neighborhood.c	/^long double Neighbor_getTE(Neighborhood *neighbor, int i)$/;"	f	signature:(Neighborhood *neighbor, int i)
Neighbor_getTE	./neighborhood.h	/^long double Neighbor_getTE(Neighborhood *neighbor, int i);$/;"	p	signature:(Neighborhood *neighbor, int i)
Neighbor_getTI	./neighborhood.c	/^long double Neighbor_getTI(Neighborhood *neighbor, int i)$/;"	f	signature:(Neighborhood *neighbor, int i)
Neighbor_getTI	./neighborhood.h	/^long double Neighbor_getTI(Neighborhood *neighbor, int i);$/;"	p	signature:(Neighborhood *neighbor, int i)
Neighbor_getTIV	./neighborhood.c	/^long double Neighbor_getTIV(Neighborhood *neighbor, int i)$/;"	f	signature:(Neighborhood *neighbor, int i)
Neighbor_getTIV	./neighborhood.h	/^long double Neighbor_getTIV(Neighborhood *neighbor, int i);$/;"	p	signature:(Neighborhood *neighbor, int i)
Neighbor_getTimePrint	./neighborhood.c	/^int Neighbor_getTimePrint( Neighborhood *neighborhood)$/;"	f	signature:( Neighborhood *neighborhood)
Neighbor_getTimePrint	./neighborhood.h	/^int Neighbor_getTimePrint( Neighborhood *neighborhood);$/;"	p	signature:( Neighborhood *neighborhood)
Neighbor_getUpdatesIntensity	./neighborhood.c	/^void Neighbor_getUpdatesIntensity(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_getUpdatesIntensity	./neighborhood.h	/^void Neighbor_getUpdatesIntensity(Neighborhood *neighborhood);$/;"	p	signature:(Neighborhood *neighborhood)
Neighbor_incrementEQ	./neighborhood.c	/^void Neighbor_incrementEQ(Neighborhood *neighbor, int i)$/;"	f	signature:(Neighborhood *neighbor, int i)
Neighbor_incrementEQ	./neighborhood.h	/^void Neighbor_incrementEQ(Neighborhood *neighbor, int i);$/;"	p	signature:(Neighborhood *neighbor, int i)
Neighbor_incrementI	./neighborhood.c	/^void Neighbor_incrementI(Neighborhood *neighbor, int i)$/;"	f	signature:(Neighborhood *neighbor, int i)
Neighbor_incrementI	./neighborhood.h	/^void Neighbor_incrementI(Neighborhood *neighbor, int i);$/;"	p	signature:(Neighborhood *neighbor, int i)
Neighbor_insertJobFILS	./neighborhood.c	/^int Neighbor_insertJobFILS(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )$/;"	f	signature:(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )
Neighbor_insertJobFILS	./neighborhood.h	/^int Neighbor_insertJobFILS(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 );$/;"	p	signature:(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )
Neighbor_insertJobFILS_parallel	./neighborhood.c	/^int Neighbor_insertJobFILS_parallel(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )$/;"	f	signature:(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )
Neighbor_insertJobFILS_parallel	./neighborhood.h	/^int Neighbor_insertJobFILS_parallel(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 );$/;"	p	signature:(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )
Neighbor_inv	./neighborhood.c	/^int Neighbor_inv( Solution *sol, int i, int k)$/;"	f	signature:( Solution *sol, int i, int k)
Neighbor_inv	./neighborhood.h	/^int Neighbor_inv(Solution *sol, int i, int k);$/;"	p	signature:(Solution *sol, int i, int k)
Neighbor_moveProj	./neighborhood.c	/^int Neighbor_moveProj(Neighborhood *neighborhood, Solution *sol, int nP, int dir)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, int nP, int dir)
Neighbor_moveProj	./neighborhood.h	/^int Neighbor_moveProj(Neighborhood *neighborhood,Solution *sol, int nP, int dir);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, int nP, int dir)
Neighbor_nNeighborhood	./neighborhood.c	/^int Neighbor_nNeighborhood(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_nNeighborhood	./neighborhood.h	/^int Neighbor_nNeighborhood( Neighborhood *neighborhood );$/;"	p	signature:( Neighborhood *neighborhood )
Neighbor_normF	./neighborhood.c	/^void Neighbor_normF(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_normF	./neighborhood.h	/^void Neighbor_normF(Neighborhood *neighborhood);$/;"	p	signature:(Neighborhood *neighborhood)
Neighbor_printProbabilities	./neighborhood.c	/^void Neighbor_printProbabilities( Neighborhood *neighborhood, int sw, int it, float psw, char *argv)$/;"	f	signature:( Neighborhood *neighborhood, int sw, int it, float psw, char *argv)
Neighbor_printProbabilities	./neighborhood.h	/^void Neighbor_printProbabilities( Neighborhood *neighborhood, int sw, int it, float psw, char *argv);$/;"	p	signature:( Neighborhood *neighborhood, int sw, int it, float psw, char *argv)
Neighbor_printProbabilitiesTime	./neighborhood.c	/^void Neighbor_printProbabilitiesTime( Neighborhood *neighborhood, int sw, int it, float psw, char *argv, double timePrint)$/;"	f	signature:( Neighborhood *neighborhood, int sw, int it, float psw, char *argv, double timePrint)
Neighbor_printProbabilitiesTime	./neighborhood.h	/^void Neighbor_printProbabilitiesTime( Neighborhood *neighborhood, int sw, int it, float psw, char *argv, double timePrint);$/;"	p	signature:( Neighborhood *neighborhood, int sw, int it, float psw, char *argv, double timePrint)
Neighbor_random_changeFourMode	./neighborhood.c	/^int Neighbor_random_changeFourMode(Neighborhood *neighborhood, Solution *sol, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *current)
Neighbor_random_changeFourMode	./neighborhood.h	/^int Neighbor_random_changeFourMode(Neighborhood *neighborhood,Solution *sol,  Solution *current);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *current)
Neighbor_random_changeNModes	./neighborhood.c	/^int Neighbor_random_changeNModes(Neighborhood *neighborhood, Solution *sol,  Solution *current, int nModes, int **residency)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *current, int nModes, int **residency)
Neighbor_random_changeNModes	./neighborhood.h	/^int Neighbor_random_changeNModes(Neighborhood *neighborhood, Solution *sol,  Solution *current, int nModes, int **residency);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *current, int nModes, int **residency)
Neighbor_random_changeOneMode	./neighborhood.c	/^int Neighbor_random_changeOneMode(Neighborhood *neighborhood, Solution *sol, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *current)
Neighbor_random_changeOneMode	./neighborhood.h	/^int Neighbor_random_changeOneMode(Neighborhood *neighborhood,Solution *sol,  Solution *current);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *current)
Neighbor_random_changeThreeMode	./neighborhood.c	/^int Neighbor_random_changeThreeMode(Neighborhood *neighborhood, Solution *sol, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *current)
Neighbor_random_changeThreeMode	./neighborhood.h	/^int Neighbor_random_changeThreeMode(Neighborhood *neighborhood,Solution *sol, Solution *current);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *current)
Neighbor_random_changeTwoMode	./neighborhood.c	/^int Neighbor_random_changeTwoMode(Neighborhood *neighborhood, Solution *sol,  Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *current)
Neighbor_random_changeTwoMode	./neighborhood.h	/^int Neighbor_random_changeTwoMode(Neighborhood *neighborhood,Solution *sol, Solution *current);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *current)
Neighbor_random_compactOnExtreme	./neighborhood.c	/^int Neighbor_random_compactOnExtreme(Neighborhood *neighborhood, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_compactOnExtreme	./neighborhood.h	/^int Neighbor_random_compactOnExtreme(Neighborhood *neighborhood, Solution *current);$/;"	p	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_compactProj	./neighborhood.c	/^int Neighbor_random_compactProj(Neighborhood *neighborhood, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_compactProj	./neighborhood.h	/^int Neighbor_random_compactProj(Neighborhood *neighborhood, Solution *current);$/;"	p	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_insertJobFILS	./neighborhood.c	/^int Neighbor_random_insertJobFILS(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current  )$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current )
Neighbor_random_insertJobFILS	./neighborhood.h	/^int Neighbor_random_insertJobFILS(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current  );$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current )
Neighbor_random_inv	./neighborhood.c	/^int Neighbor_random_inv(Neighborhood *neighborhood,Solution *current)$/;"	f	signature:(Neighborhood *neighborhood,Solution *current)
Neighbor_random_inv	./neighborhood.h	/^int Neighbor_random_inv(Neighborhood *neighborhood,Solution *current);$/;"	p	signature:(Neighborhood *neighborhood,Solution *current)
Neighbor_random_moveProj	./neighborhood.c	/^int Neighbor_random_moveProj(Neighborhood *neighborhood, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_moveProj	./neighborhood.h	/^int Neighbor_random_moveProj(Neighborhood *neighborhood, Solution *current);$/;"	p	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_shiftJob	./neighborhood.c	/^int Neighbor_random_shiftJob(Neighborhood *neighborhood, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_shiftJob	./neighborhood.h	/^int Neighbor_random_shiftJob(Neighborhood *neighborhood, Solution *current);$/;"	p	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_shiftProj	./neighborhood.c	/^int Neighbor_random_shiftProj(Neighborhood *neighborhood, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_shiftProj	./neighborhood.h	/^int Neighbor_random_shiftProj(Neighborhood *neighborhood, Solution *current);$/;"	p	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_swapJob	./neighborhood.c	/^int Neighbor_random_swapJob(Neighborhood *neighborhood, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_swapJob	./neighborhood.h	/^int Neighbor_random_swapJob(Neighborhood *neighborhood, Solution *current);$/;"	p	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_swapJobFILS	./neighborhood.c	/^int Neighbor_random_swapJobFILS(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current  )$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current )
Neighbor_random_swapJobFILS	./neighborhood.h	/^int Neighbor_random_swapJobFILS(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current );$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current )
Neighbor_random_swapTwoProj	./neighborhood.c	/^int Neighbor_random_swapTwoProj(Neighborhood *neighborhood, Solution *current)$/;"	f	signature:(Neighborhood *neighborhood, Solution *current)
Neighbor_random_swapTwoProj	./neighborhood.h	/^int Neighbor_random_swapTwoProj(Neighborhood *neighborhood,Solution *current);$/;"	p	signature:(Neighborhood *neighborhood,Solution *current)
Neighbor_restartIntensity	./neighborhood.c	/^void Neighbor_restartIntensity(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_roulette	./neighborhood.c	/^int Neighbor_roulette(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_roulette	./neighborhood.h	/^int Neighbor_roulette( Neighborhood *neighborhood );$/;"	p	signature:( Neighborhood *neighborhood )
Neighbor_search_changeFourMode	./neighborhood.c	/^int Neighbor_search_changeFourMode(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_changeFourMode	./neighborhood.h	/^int Neighbor_search_changeFourMode(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_changeFourMode_parallel	./neighborhood.c	/^int Neighbor_search_changeFourMode_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_changeFourMode_parallel	./neighborhood.h	/^int Neighbor_search_changeFourMode_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_changeOneMode	./neighborhood.c	/^int Neighbor_search_changeOneMode(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_changeOneMode	./neighborhood.h	/^int Neighbor_search_changeOneMode(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN,  int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_changeOneMode_parallel	./neighborhood.c	/^int Neighbor_search_changeOneMode_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_changeOneMode_parallel	./neighborhood.h	/^int Neighbor_search_changeOneMode_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_changeThreeMode	./neighborhood.c	/^int Neighbor_search_changeThreeMode(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_changeThreeMode	./neighborhood.h	/^int Neighbor_search_changeThreeMode(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN,  int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_changeThreeMode_parallel	./neighborhood.c	/^int Neighbor_search_changeThreeMode_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[],int kN,  int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[],int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_changeThreeMode_parallel	./neighborhood.h	/^int Neighbor_search_changeThreeMode_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[],int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[],int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_changeTwoMode	./neighborhood.c	/^int Neighbor_search_changeTwoMode(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_changeTwoMode	./neighborhood.h	/^int Neighbor_search_changeTwoMode(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN,  int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_changeTwoMode_parallel	./neighborhood.c	/^int Neighbor_search_changeTwoMode_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN,  int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_changeTwoMode_parallel	./neighborhood.h	/^int Neighbor_search_changeTwoMode_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_compactOnExtreme	./neighborhood.c	/^int Neighbor_search_compactOnExtreme(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_compactOnExtreme_parallel	./neighborhood.c	/^int Neighbor_search_compactOnExtreme_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,Solution *currentT[],  int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_compactOnExtreme_parallel	./neighborhood.h	/^int Neighbor_search_compactOnExtreme_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,Solution *currentT[],  int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_compactOneExtreme	./neighborhood.h	/^int Neighbor_search_compactOneExtreme(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_compactProj	./neighborhood.c	/^int Neighbor_search_compactProj(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_compactProj	./neighborhood.h	/^int Neighbor_search_compactProj(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_compactProj_parallel	./neighborhood.c	/^int Neighbor_search_compactProj_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_compactProj_parallel	./neighborhood.h	/^int Neighbor_search_compactProj_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_insertJobFILS	./neighborhood.c	/^int Neighbor_search_insertJobFILS(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_insertJobFILS	./neighborhood.h	/^int Neighbor_search_insertJobFILS(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_insertJobFILS_parallel	./neighborhood.c	/^int Neighbor_search_insertJobFILS_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_insertJobFILS_parallel	./neighborhood.h	/^int Neighbor_search_insertJobFILS_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_inv	./neighborhood.c	/^int Neighbor_search_inv(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_inv	./neighborhood.h	/^int Neighbor_search_inv(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_inv_parallel	./neighborhood.c	/^int Neighbor_search_inv_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_inv_parallel	./neighborhood.h	/^int Neighbor_search_inv_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_moveProj	./neighborhood.c	/^int Neighbor_search_moveProj(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_moveProj	./neighborhood.h	/^int Neighbor_search_moveProj(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_moveProj_parallel	./neighborhood.c	/^int Neighbor_search_moveProj_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_moveProj_parallel	./neighborhood.h	/^int Neighbor_search_moveProj_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_shiftJob	./neighborhood.c	/^int Neighbor_search_shiftJob(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_shiftJob	./neighborhood.h	/^int Neighbor_search_shiftJob(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_shiftJob_parallel	./neighborhood.c	/^int Neighbor_search_shiftJob_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *currentT[],int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[],int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_shiftJob_parallel	./neighborhood.h	/^int Neighbor_search_shiftJob_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *currentT[],int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[],int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_shiftProj	./neighborhood.c	/^int Neighbor_search_shiftProj(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_shiftProj	./neighborhood.h	/^int Neighbor_search_shiftProj(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_shiftProj_parallel	./neighborhood.c	/^int Neighbor_search_shiftProj_parallel(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_shiftProj_parallel	./neighborhood.h	/^int Neighbor_search_shiftProj_parallel(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_swapJob	./neighborhood.c	/^int Neighbor_search_swapJob(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_swapJob	./neighborhood.h	/^int Neighbor_search_swapJob(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_swapJobFILS	./neighborhood.c	/^int Neighbor_search_swapJobFILS(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_swapJobFILS	./neighborhood.h	/^int Neighbor_search_swapJobFILS(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_swapJobFILS_parallel	./neighborhood.c	/^int Neighbor_search_swapJobFILS_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_swapJobFILS_parallel	./neighborhood.h	/^int Neighbor_search_swapJobFILS_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_swapJob_parallel	./neighborhood.c	/^int Neighbor_search_swapJob_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_swapJob_parallel	./neighborhood.h	/^int Neighbor_search_swapJob_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_swapProj	./neighborhood.c	/^int Neighbor_search_swapProj(Neighborhood *neighborhood, Solution *sol, Solution *bestSol,  Solution *current, int kN, int firstImp, double timeRem)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_swapProj	./neighborhood.h	/^int Neighbor_search_swapProj(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, Solution *bestSol, Solution *current, int kN, int firstImp, double timeRem)
Neighbor_search_swapProj_parallel	./neighborhood.c	/^int Neighbor_search_swapProj_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_search_swapProj_parallel	./neighborhood.h	/^int Neighbor_search_swapProj_parallel(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads);$/;"	p	signature:(Neighborhood *neighborhood, Solution *sol, Solution *bestSol, Solution *currentT[], int kN, int firstImp, double timeRem, int nTreads)
Neighbor_setF	./neighborhood.c	/^void Neighbor_setF(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_setF	./neighborhood.h	/^void Neighbor_setF(Neighborhood *neighborhood);$/;"	p	signature:(Neighborhood *neighborhood)
Neighbor_setFE	./neighborhood.c	/^void Neighbor_setFE(Neighborhood *neighbor, int i, long  double value)$/;"	f	signature:(Neighborhood *neighbor, int i, long double value)
Neighbor_setFI	./neighborhood.c	/^void Neighbor_setFI(Neighborhood *neighbor, int i, long double value)$/;"	f	signature:(Neighborhood *neighbor, int i, long double value)
Neighbor_setIt	./neighborhood.c	/^void Neighbor_setIt(Neighborhood *neighborhood)$/;"	f	signature:(Neighborhood *neighborhood)
Neighbor_setIt	./neighborhood.h	/^void Neighbor_setIt(Neighborhood *neig);$/;"	p	signature:(Neighborhood *neig)
Neighbor_setLastNeigh	./neighborhood.c	/^void Neighbor_setLastNeigh(Neighborhood *neigh, int value)$/;"	f	signature:(Neighborhood *neigh, int value)
Neighbor_setLastNeigh	./neighborhood.h	/^void Neighbor_setLastNeigh(Neighborhood *neigh, int value);$/;"	p	signature:(Neighborhood *neigh, int value)
Neighbor_setNullLastJobModify	./neighborhood.c	/^void Neighbor_setNullLastJobModify(Neighborhood *neigh)$/;"	f	signature:(Neighborhood *neigh)
Neighbor_setNullLastJobModify	./neighborhood.h	/^void Neighbor_setNullLastJobModify(Neighborhood *neigh);$/;"	p	signature:(Neighborhood *neigh)
Neighbor_setTE	./neighborhood.c	/^void Neighbor_setTE(Neighborhood *neighbor, int i, long double value)$/;"	f	signature:(Neighborhood *neighbor, int i, long double value)
Neighbor_setTE	./neighborhood.h	/^void Neighbor_setTE(Neighborhood *neighbor, int i, long double value);$/;"	p	signature:(Neighborhood *neighbor, int i, long double value)
Neighbor_setTI	./neighborhood.c	/^void Neighbor_setTI(Neighborhood *neighbor, int i, long double value)$/;"	f	signature:(Neighborhood *neighbor, int i, long double value)
Neighbor_setTI	./neighborhood.h	/^void Neighbor_setTI(Neighborhood *neighbor, int i, long double value);$/;"	p	signature:(Neighborhood *neighbor, int i, long double value)
Neighbor_setTIV	./neighborhood.c	/^void Neighbor_setTIV(Neighborhood *neighbor, int i, long double value)$/;"	f	signature:(Neighborhood *neighbor, int i, long double value)
Neighbor_setTIV	./neighborhood.h	/^void Neighbor_setTIV(Neighborhood *neighbor, int i, long double value);$/;"	p	signature:(Neighborhood *neighbor, int i, long double value)
Neighbor_setTime	./neighborhood.c	/^void Neighbor_setTime( Neighborhood *neighborhood)$/;"	f	signature:( Neighborhood *neighborhood)
Neighbor_setTime	./neighborhood.h	/^void Neighbor_setTime( Neighborhood *neighborhood);$/;"	p	signature:( Neighborhood *neighborhood)
Neighbor_shiftJob	./neighborhood.c	/^int Neighbor_shiftJob(Neighborhood *neighborhood, Solution *sol,  int i, int k, int dir)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, int i, int k, int dir)
Neighbor_shiftJob	./neighborhood.h	/^int Neighbor_shiftJob(Neighborhood *neighborhood,Solution *sol,  int i, int k, int dir);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, int i, int k, int dir)
Neighbor_shiftProj	./neighborhood.c	/^int Neighbor_shiftProj(Neighborhood *neighborhood, Solution *sol, int k, int p, int dir)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, int k, int p, int dir)
Neighbor_shiftProj	./neighborhood.h	/^int Neighbor_shiftProj(Neighborhood *neighborhood,Solution *sol, int k, int p, int dir);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, int k, int p, int dir)
Neighbor_swapJob	./neighborhood.c	/^int Neighbor_swapJob(Neighborhood *neighborhood, Solution *sol, int j1, int j2)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, int j1, int j2)
Neighbor_swapJob	./neighborhood.h	/^int Neighbor_swapJob(Neighborhood *neighborhood,Solution *sol, int j1, int j2);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, int j1, int j2)
Neighbor_swapJobFILS	./neighborhood.c	/^int Neighbor_swapJobFILS(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )$/;"	f	signature:(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )
Neighbor_swapJobFILS	./neighborhood.h	/^int Neighbor_swapJobFILS(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 );$/;"	p	signature:(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )
Neighbor_swapJobFILS_parallel	./neighborhood.c	/^int Neighbor_swapJobFILS_parallel(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )$/;"	f	signature:(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )
Neighbor_swapJobFILS_parallel	./neighborhood.h	/^int Neighbor_swapJobFILS_parallel(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 );$/;"	p	signature:(Neighborhood *neighborhood, Solution *current, Solution *sol, Solution *bestSol, int j1 )
Neighbor_swapTwoProj	./neighborhood.c	/^int Neighbor_swapTwoProj(Neighborhood *neighborhood, Solution *sol, double p1, int p2)$/;"	f	signature:(Neighborhood *neighborhood, Solution *sol, double p1, int p2)
Neighbor_swapTwoProj	./neighborhood.h	/^int Neighbor_swapTwoProj(Neighborhood *neighborhood,Solution *sol, double p1, int p2);$/;"	p	signature:(Neighborhood *neighborhood,Solution *sol, double p1, int p2)
Neighbor_updatesIntensities	./neighborhood.c	/^void Neighbor_updatesIntensities(Neighborhood *neighborhood, int sw)$/;"	f	signature:(Neighborhood *neighborhood, int sw)
Neighbor_updatesIntensities	./neighborhood.h	/^void Neighbor_updatesIntensities(Neighborhood *neighborhood, int sw);$/;"	p	signature:(Neighborhood *neighborhood, int sw)
Neighbor_verifyPredInsertJobFILS	./neighborhood.h	/^int Neighbor_verifyPredInsertJobFILS( Solution *sol, int p1, int p2 );$/;"	p	signature:( Solution *sol, int p1, int p2 )
Neighbor_verifyPredInv	./neighborhood.c	/^int Neighbor_verifyPredInv( Solution *sol, int p1, int p2 )$/;"	f	signature:( Solution *sol, int p1, int p2 )
Neighbor_verifyPredInv	./neighborhood.h	/^int Neighbor_verifyPredInv( Solution *sol, int p1, int p2 );$/;"	p	signature:( Solution *sol, int p1, int p2 )
Neighbor_verifyPredShiftJob	./neighborhood.h	/^int Neighbor_verifyPredShiftJob( Solution *sol, int p1, int p2 );$/;"	p	signature:( Solution *sol, int p1, int p2 )
Neighbor_verifyPredShiftJobAhead	./neighborhood.c	/^int Neighbor_verifyPredShiftJobAhead( Solution *sol, int p1, int p2 )$/;"	f	signature:( Solution *sol, int p1, int p2 )
Neighbor_verifyPredShiftJobBack	./neighborhood.c	/^int Neighbor_verifyPredShiftJobBack( Solution *sol, int p1, int p2 )$/;"	f	signature:( Solution *sol, int p1, int p2 )
Neighbor_verifyPredSwapJob	./neighborhood.c	/^int Neighbor_verifyPredSwapJob( Solution *sol, int p1, int p2 )$/;"	f	signature:( Solution *sol, int p1, int p2 )
Neighbor_verifyPredSwapJob	./neighborhood.h	/^int Neighbor_verifyPredSwapJob( Solution *sol, int p1, int p2 );$/;"	p	signature:( Solution *sol, int p1, int p2 )
Neighbor_verifyPredSwapJobFILS	./neighborhood.h	/^int Neighbor_verifyPredSwapJobFILS( Solution *sol, int p1, int p2 );$/;"	p	signature:( Solution *sol, int p1, int p2 )
Neighborhood	./neighborhood.h	/^typedef struct _Neighborhood Neighborhood;$/;"	t	typeref:struct:_Neighborhood
NeighborhoodType	./neighborhood.h	/^enum NeighborhoodType { seqInvert=1, seqShiftJob=2, seqSwapJob=3, seqShiftProj=4, seqSwapProj=5, seqCompactProj=6,$/;"	g
Node	./list_int.c	/^} Node;$/;"	t	typeref:struct:_Node	file:
NodeCost	./cgraph.c	/^} NodeCost;$/;"	t	typeref:struct:__anon2	file:
NodeCost	./node_heap.c	/^} NodeCost;$/;"	t	typeref:struct:__anon12	file:
NodeDegree	./cgraph.c	/^} NodeDegree;$/;"	t	typeref:struct:__anon1	file:
NodeHeap	./node_heap.h	/^typedef struct _NodeHeap NodeHeap;$/;"	t	typeref:struct:_NodeHeap
Node_create	./list_int.c	/^Node *Node_create( const int value )$/;"	f	signature:( const int value )
ODD_HOLE_SEP_H	./oddhs.h	2;"	d
OPEN_FILE	./macros.h	77;"	d
OddHoleSep	./oddhs.h	/^typedef struct _OddHoleSep OddHoleSep;$/;"	t	typeref:struct:_OddHoleSep
OddHoleSepPtr	./oddhs.h	/^typedef OddHoleSep * OddHoleSepPtr;$/;"	t
PE	./neighborhood.c	/^    long double *PE;$/;"	m	struct:_Neighborhood	file:	access:public
PFE	./test.c	/^    long double **PFE;$/;"	m	struct:_Test	file:	access:public
PFI	./test.c	/^    long double **PFI;$/;"	m	struct:_Test	file:	access:public
PI	./neighborhood.c	/^    long double *PI;$/;"	m	struct:_Neighborhood	file:	access:public
PIVOT_MEDIAN_MIN_SIZE	./vint_set.c	320;"	d	file:
PIVOT_MEDIAN_MIN_SIZE	./vint_set.c	388;"	d	file:
PROJ_DECOMP_H	./proj_decomp.h	9;"	d
ProjDecomp	./proj_decomp.h	/^typedef struct _ProjDecomp ProjDecomp;$/;"	t	typeref:struct:_ProjDecomp
Project	./instance.h	/^typedef struct _Project Project;$/;"	t	typeref:struct:_Project
Project_calc_criticalPath	./instance.c	/^int Project_calc_criticalPath(Instance *inst)$/;"	f	signature:(Instance *inst)
Project_calc_criticalPath	./instance.h	/^int Project_calc_criticalPath(Instance *inst);$/;"	p	signature:(Instance *inst)
Project_criticalPath	./instance.c	/^int Project_criticalPath( const Project *p )$/;"	f	signature:( const Project *p )
Project_criticalPath	./instance.h	/^int Project_criticalPath( const Project *p );$/;"	p	signature:( const Project *p )
Project_dueDate	./instance.c	/^int Project_dueDate( const Project *p )$/;"	f	signature:( const Project *p )
Project_dueDate	./instance.h	/^int Project_dueDate( const Project *p );$/;"	p	signature:( const Project *p )
Project_idxFirstJob	./instance.c	/^int Project_idxFirstJob( const Project *p )$/;"	f	signature:( const Project *p )
Project_idxFirstJob	./instance.h	/^int Project_idxFirstJob( const Project *p );$/;"	p	signature:( const Project *p )
Project_index	./instance.c	/^int Project_index( const Project *p )$/;"	f	signature:( const Project *p )
Project_index	./instance.h	/^int Project_index( const Project *p );$/;"	p	signature:( const Project *p )
Project_job	./instance.c	/^const Job *Project_job( const Project *p, int idxJob )$/;"	f	signature:( const Project *p, int idxJob )
Project_job	./instance.h	/^const Job *Project_job( const Project *p, int idxJob );$/;"	p	signature:( const Project *p, int idxJob )
Project_mpmTime	./instance.c	/^int Project_mpmTime( const Project *p )$/;"	f	signature:( const Project *p )
Project_mpmTime	./instance.h	/^int Project_mpmTime( const Project *p );$/;"	p	signature:( const Project *p )
Project_mrcpsp_print	./instance.c	/^void Project_mrcpsp_print(Instance *inst)$/;"	f	signature:(Instance *inst)
Project_nJobs	./instance.c	/^int Project_nJobs( const Project *p )$/;"	f	signature:( const Project *p )
Project_nJobs	./instance.h	/^int Project_nJobs( const Project *p );$/;"	p	signature:( const Project *p )
Project_print	./instance.c	/^void Project_print(  const Instance *inst, int p )$/;"	f	signature:( const Instance *inst, int p )
Project_print	./instance.h	/^void Project_print( const Instance *inst, int p );$/;"	p	signature:( const Instance *inst, int p )
Project_rcpsp_print	./instance.c	/^void Project_rcpsp_print(Instance *inst)$/;"	f	signature:(Instance *inst)
Project_releaseDate	./instance.c	/^int Project_releaseDate( const Project *p )$/;"	f	signature:( const Project *p )
Project_releaseDate	./instance.h	/^int Project_releaseDate( const Project *p );$/;"	p	signature:( const Project *p )
Project_tardCost	./instance.c	/^int Project_tardCost( const Project *p )$/;"	f	signature:( const Project *p )
Project_tardCost	./instance.h	/^int Project_tardCost( const Project *p );$/;"	p	signature:( const Project *p )
RA_ROULLETE_SIZE	./grasp.c	24;"	d	file:
REACTIVE_INTERVAL	./grasp.c	22;"	d	file:
REALLOCATE_VECTOR	./macros.h	68;"	d
REDUCED_COST_PERCENTAGE	./clique_extender.c	20;"	d	file:
RESIZE_INT_VECTOR	./vectormgm.h	37;"	d
RESULTS	./results.h	12;"	d
ROUND	./macros.h	18;"	d
ROUNDUP	./macros.h	19;"	d
RRUSAGE_H	./rrusage.h	12;"	d
RRU_allocate	./rrusage.c	/^void RRU_allocate( RRUsage *rru, const Mode *mode, int start )$/;"	f	signature:( RRUsage *rru, const Mode *mode, int start )
RRU_allocate	./rrusage.h	/^void RRU_allocate( RRUsage *rru, const Mode *mode, int start );$/;"	p	signature:( RRUsage *rru, const Mode *mode, int start )
RRU_clear	./rrusage.c	/^void RRU_clear( RRUsage *rru)$/;"	f	signature:( RRUsage *rru)
RRU_clear	./rrusage.h	/^void RRU_clear( RRUsage *rru);$/;"	p	signature:( RRUsage *rru)
RRU_clear_opt	./rrusage.c	/^void RRU_clear_opt( RRUsage *rru, int j, const int seq[], const int starts[], const int modes[], int nJobs)$/;"	f	signature:( RRUsage *rru, int j, const int seq[], const int starts[], const int modes[], int nJobs)
RRU_clear_opt	./rrusage.h	/^void RRU_clear_opt( RRUsage *rru, int j, const int seq[], const int starts[], const int modes[], int nJobs);$/;"	p	signature:( RRUsage *rru, int j, const int seq[], const int starts[], const int modes[], int nJobs)
RRU_copy_part	./rrusage.c	/^void RRU_copy_part( RRUsage *rru, int j, const int seq[], const int starts[], const int modes[])$/;"	f	signature:( RRUsage *rru, int j, const int seq[], const int starts[], const int modes[])
RRU_copy_part	./rrusage.h	/^void RRU_copy_part( RRUsage *rru, int j, const int seq[], const int starts[], const int modes[]);$/;"	p	signature:( RRUsage *rru, int j, const int seq[], const int starts[], const int modes[])
RRU_cpy	./rrusage.c	/^void RRU_cpy( RRUsage *target, const RRUsage *rru)$/;"	f	signature:( RRUsage *target, const RRUsage *rru)
RRU_cpy	./rrusage.h	/^void RRU_cpy( RRUsage *target, const RRUsage *rru);$/;"	p	signature:( RRUsage *target, const RRUsage *rru)
RRU_create	./rrusage.c	/^RRUsage *RRU_create( const Instance *inst )$/;"	f	signature:( const Instance *inst )
RRU_create	./rrusage.h	/^RRUsage *RRU_create( const Instance *inst );$/;"	p	signature:( const Instance *inst )
RRU_deallocate	./rrusage.c	/^void RRU_deallocate( RRUsage *rru, const Mode *mode, int start )$/;"	f	signature:( RRUsage *rru, const Mode *mode, int start )
RRU_deallocate	./rrusage.h	/^void  RRU_deallocate( RRUsage *rru, const Mode *mode, int start);$/;"	p	signature:( RRUsage *rru, const Mode *mode, int start)
RRU_find	./rrusage.h	/^int RRU_find( const RRUsage *rru, const Mode *mode, int startingTime );$/;"	p	signature:( const RRUsage *rru, const Mode *mode, int startingTime )
RRU_free	./rrusage.c	/^void RRU_free( RRUsage **_rru )$/;"	f	signature:( RRUsage **_rru )
RRU_free	./rrusage.h	/^void RRU_free( RRUsage **_rru );$/;"	p	signature:( RRUsage **_rru )
RRU_usage	./rrusage.c	/^int RRU_usage( const RRUsage *rru, int time, int idxRR)$/;"	f	signature:( const RRUsage *rru, int time, int idxRR)
RRU_usage	./rrusage.h	/^int RRU_usage( const RRUsage *rru, int time, int idxRR);$/;"	p	signature:( const RRUsage *rru, int time, int idxRR)
RRUsage	./rrusage.h	/^typedef struct _RRUsage RRUsage;$/;"	t	typeref:struct:_RRUsage
Res_create	./results.c	/^Results *Res_create( )$/;"	f
Res_create	./results.h	/^Results *Res_create();$/;"	p	signature:()
Res_free	./results.c	/^void Res_free( Results **_res )$/;"	f	signature:( Results **_res )
Res_free	./results.h	/^void Res_free( Results **res );$/;"	p	signature:( Results **res )
Res_getMaxViol	./results.c	/^double Res_getMaxViol(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getMaxViol	./results.h	/^double Res_getMaxViol(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getMaxViolCutA	./results.c	/^int Res_getMaxViolCutA(Results *res, int nround, int cut, int i)$/;"	f	signature:(Results *res, int nround, int cut, int i)
Res_getMaxViolCutA	./results.h	/^int Res_getMaxViolCutA(Results *res, int nround, int cut, int i);$/;"	p	signature:(Results *res, int nround, int cut, int i)
Res_getMaxViolCutB	./results.c	/^int Res_getMaxViolCutB(Results *res, int nround, int cut, int i)$/;"	f	signature:(Results *res, int nround, int cut, int i)
Res_getMaxViolCutB	./results.h	/^int Res_getMaxViolCutB(Results *res, int nround, int cut, int i);$/;"	p	signature:(Results *res, int nround, int cut, int i)
Res_getMinViol	./results.c	/^double Res_getMinViol(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getMinViol	./results.h	/^double Res_getMinViol(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getMinViolCutA	./results.c	/^int Res_getMinViolCutA(Results *res, int nround, int cut, int i)$/;"	f	signature:(Results *res, int nround, int cut, int i)
Res_getMinViolCutA	./results.h	/^int Res_getMinViolCutA(Results *res, int nround, int cut, int i);$/;"	p	signature:(Results *res, int nround, int cut, int i)
Res_getMinViolCutB	./results.c	/^int Res_getMinViolCutB(Results *res, int nround, int cut, int i)$/;"	f	signature:(Results *res, int nround, int cut, int i)
Res_getMinViolCutB	./results.h	/^int Res_getMinViolCutB(Results *res, int nround, int cut, int i);$/;"	p	signature:(Results *res, int nround, int cut, int i)
Res_getNCutsTotal	./results.c	/^int Res_getNCutsTotal(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getNCutsTotal	./results.h	/^int Res_getNCutsTotal(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getNElementsCuts	./results.c	/^int Res_getNElementsCuts(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getNElementsCuts	./results.h	/^int Res_getNElementsCuts(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getNElementsMaxViol	./results.c	/^int Res_getNElementsMaxViol(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getNElementsMaxViol	./results.h	/^int Res_getNElementsMaxViol(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getNElementsMinViol	./results.c	/^int Res_getNElementsMinViol(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getNElementsMinViol	./results.h	/^int Res_getNElementsMinViol(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getNMaxElementsConf	./results.c	/^int Res_getNMaxElementsConf(Results *res, int cut)$/;"	f	signature:(Results *res, int cut)
Res_getNMaxElementsConf	./results.h	/^int Res_getNMaxElementsConf(Results *res, int cut);$/;"	p	signature:(Results *res, int cut)
Res_getNMaxElementsCuts	./results.c	/^int Res_getNMaxElementsCuts(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getNMaxElementsCuts	./results.h	/^int Res_getNMaxElementsCuts(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getNMinElementsCuts	./results.c	/^int Res_getNMinElementsCuts(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getNMinElementsCuts	./results.h	/^int Res_getNMinElementsCuts(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getRound	./results.c	/^int Res_getRound(Results *res)$/;"	f	signature:(Results *res)
Res_getRound	./results.h	/^int Res_getRound(Results *res);$/;"	p	signature:(Results *res)
Res_getSumViol	./results.c	/^double Res_getSumViol(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getSumViol	./results.h	/^double Res_getSumViol(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_getTCutsTotal	./results.c	/^double Res_getTCutsTotal(Results *res, int nround, int cut)$/;"	f	signature:(Results *res, int nround, int cut)
Res_getTCutsTotal	./results.h	/^double Res_getTCutsTotal(Results *res, int nround, int cut);$/;"	p	signature:(Results *res, int nround, int cut)
Res_setMaxViol	./results.c	/^void Res_setMaxViol(Results *res, int nround, int cut, double value)$/;"	f	signature:(Results *res, int nround, int cut, double value)
Res_setMaxViol	./results.h	/^void Res_setMaxViol(Results *res, int nround, int cut, double value);$/;"	p	signature:(Results *res, int nround, int cut, double value)
Res_setMaxViolCut	./results.c	/^void Res_setMaxViolCut(Results *res, int nround, int cut, int i, int a, double b)$/;"	f	signature:(Results *res, int nround, int cut, int i, int a, double b)
Res_setMaxViolCut	./results.h	/^void Res_setMaxViolCut(Results *res, int nround, int cut, int i, int a, double b);$/;"	p	signature:(Results *res, int nround, int cut, int i, int a, double b)
Res_setMinViol	./results.c	/^void Res_setMinViol(Results *res, int nround, int cut, double value)$/;"	f	signature:(Results *res, int nround, int cut, double value)
Res_setMinViol	./results.h	/^void Res_setMinViol(Results *res, int nround, int cut, double value);$/;"	p	signature:(Results *res, int nround, int cut, double value)
Res_setMinViolCut	./results.c	/^void Res_setMinViolCut(Results *res, int nround, int cut, int i, int a, double b)$/;"	f	signature:(Results *res, int nround, int cut, int i, int a, double b)
Res_setMinViolCut	./results.h	/^void Res_setMinViolCut(Results *res, int nround, int cut, int i, int a, double b);$/;"	p	signature:(Results *res, int nround, int cut, int i, int a, double b)
Res_setNCutsTotal	./results.c	/^void Res_setNCutsTotal(Results *res, int nround, int cut, int value)$/;"	f	signature:(Results *res, int nround, int cut, int value)
Res_setNCutsTotal	./results.h	/^void Res_setNCutsTotal(Results *res, int nround, int cut, int value);$/;"	p	signature:(Results *res, int nround, int cut, int value)
Res_setNElementsCuts	./results.c	/^void Res_setNElementsCuts(Results *res, int nround, int cut, int value)$/;"	f	signature:(Results *res, int nround, int cut, int value)
Res_setNElementsCuts	./results.h	/^void Res_setNElementsCuts(Results *res, int nround, int cut, int value);$/;"	p	signature:(Results *res, int nround, int cut, int value)
Res_setNElementsMaxViol	./results.c	/^void Res_setNElementsMaxViol(Results *res, int nround, int cut, int value)$/;"	f	signature:(Results *res, int nround, int cut, int value)
Res_setNElementsMaxViol	./results.h	/^void Res_setNElementsMaxViol(Results *res, int nround, int cut, int value);$/;"	p	signature:(Results *res, int nround, int cut, int value)
Res_setNElementsMinViol	./results.c	/^void Res_setNElementsMinViol(Results *res, int nround, int cut, int value)$/;"	f	signature:(Results *res, int nround, int cut, int value)
Res_setNElementsMinViol	./results.h	/^void Res_setNElementsMinViol(Results *res, int nround, int cut, int value);$/;"	p	signature:(Results *res, int nround, int cut, int value)
Res_setNMaxElementsConf	./results.c	/^void Res_setNMaxElementsConf(Results *res, int cut, int value)$/;"	f	signature:(Results *res, int cut, int value)
Res_setNMaxElementsConf	./results.h	/^void Res_setNMaxElementsConf(Results *res, int cut, int value);$/;"	p	signature:(Results *res, int cut, int value)
Res_setNMaxElementsCuts	./results.c	/^void Res_setNMaxElementsCuts(Results *res, int nround, int cut, int value)$/;"	f	signature:(Results *res, int nround, int cut, int value)
Res_setNMaxElementsCuts	./results.h	/^void Res_setNMaxElementsCuts(Results *res, int nround, int cut, int value);$/;"	p	signature:(Results *res, int nround, int cut, int value)
Res_setNMinElementsCuts	./results.c	/^void Res_setNMinElementsCuts(Results *res, int nround, int cut, int value)$/;"	f	signature:(Results *res, int nround, int cut, int value)
Res_setNMinElementsCuts	./results.h	/^void Res_setNMinElementsCuts(Results *res, int nround, int cut, int value);$/;"	p	signature:(Results *res, int nround, int cut, int value)
Res_setNSumAllElementsConf	./results.c	/^void Res_setNSumAllElementsConf(Results *res, int cut, int value)$/;"	f	signature:(Results *res, int cut, int value)
Res_setNSumAllElementsConf	./results.h	/^void Res_setNSumAllElementsConf(Results *res, int cut, int value);$/;"	p	signature:(Results *res, int cut, int value)
Res_setNSumAllVarWithConf	./results.c	/^void Res_setNSumAllVarWithConf(Results *res, int cut, int value)$/;"	f	signature:(Results *res, int cut, int value)
Res_setNSumAllVarWithConf	./results.h	/^void Res_setNSumAllVarWithConf(Results *res, int cut, int value);$/;"	p	signature:(Results *res, int cut, int value)
Res_setRound	./results.c	/^void Res_setRound(Results *res, int value)$/;"	f	signature:(Results *res, int value)
Res_setRound	./results.h	/^void Res_setRound(Results *res, int value);$/;"	p	signature:(Results *res, int value)
Res_setSumViol	./results.c	/^void Res_setSumViol(Results *res, int nround, int cut, double value)$/;"	f	signature:(Results *res, int nround, int cut, double value)
Res_setSumViol	./results.h	/^void Res_setSumViol(Results *res, int nround, int cut, double value);$/;"	p	signature:(Results *res, int nround, int cut, double value)
Res_setTCutsTotal	./results.c	/^void Res_setTCutsTotal(Results *res, int nround,int cut, double value)$/;"	f	signature:(Results *res, int nround,int cut, double value)
Res_setTCutsTotal	./results.h	/^void Res_setTCutsTotal(Results *res, int nround,int cut, double value);$/;"	p	signature:(Results *res, int nround,int cut, double value)
Results	./results.h	/^typedef struct _Results Results;$/;"	t	typeref:struct:_Results
SA	./sa.h	/^typedef struct _SA SA;$/;"	t	typeref:struct:_SA
SA_H	./sa.h	9;"	d
SA_checkArgs	./sa.c	/^void SA_checkArgs(SA *sa, char **argv, int argc)$/;"	f	signature:(SA *sa, char **argv, int argc)
SA_checkArgs	./sa.h	/^void SA_checkArgs(SA *sa, char **argv, int argc);$/;"	p	signature:(SA *sa, char **argv, int argc)
SA_create	./sa.c	/^SA *SA_create( const Instance *inst, Neighborhood* neighborhood, Solution* sol, char **argv, int argc )$/;"	f	signature:( const Instance *inst, Neighborhood* neighborhood, Solution* sol, char **argv, int argc )
SA_create	./sa.h	/^SA *SA_create( const Instance *inst, Neighborhood* neighborhood,  Solution* sol, char **argv, int argc );$/;"	p	signature:( const Instance *inst, Neighborhood* neighborhood, Solution* sol, char **argv, int argc )
SA_free	./sa.c	/^void SA_free( SA **_sa )$/;"	f	signature:( SA **_sa )
SA_free	./sa.h	/^void SA_free( SA **_sa );$/;"	p	signature:( SA **_sa )
SA_getAlpha	./sa.c	/^double SA_getAlpha(SA *_sa)$/;"	f	signature:(SA *_sa)
SA_getAlpha	./sa.h	/^double SA_getAlpha(SA *_sa);$/;"	p	signature:(SA *_sa)
SA_getSAmax	./sa.c	/^int SA_getSAmax(SA *_sa)$/;"	f	signature:(SA *_sa)
SA_getSAmax	./sa.h	/^int SA_getSAmax(SA *_sa);$/;"	p	signature:(SA *_sa)
SA_getT	./sa.c	/^int SA_getT(SA *_sa)$/;"	f	signature:(SA *_sa)
SA_getT	./sa.h	/^int SA_getT(SA *_sa);$/;"	p	signature:(SA *_sa)
SA_increasingResidence	./sa.c	/^void SA_increasingResidence(SA* sa, Solution* current)$/;"	f	signature:(SA* sa, Solution* current)
SA_increasingResidence	./sa.h	/^void SA_increasingResidence(SA* sa, Solution* current);$/;"	p	signature:(SA* sa, Solution* current)
SA_increasingTransitivity	./sa.c	/^void SA_increasingTransitivity(SA* sa, Neighborhood* neighborhood)$/;"	f	signature:(SA* sa, Neighborhood* neighborhood)
SA_increasingTransitivity	./sa.h	/^void SA_increasingTransitivity(SA* sa, Neighborhood* neighborhood);$/;"	p	signature:(SA* sa, Neighborhood* neighborhood)
SA_run	./sa.c	/^void SA_run(SA *sa, Neighborhood* neighborhood, double timeRem, Test *test)$/;"	f	signature:(SA *sa, Neighborhood* neighborhood, double timeRem, Test *test)
SA_run	./sa.h	/^void SA_run(SA *sa, Neighborhood* neighborhood, double timeRem, Test *test);$/;"	p	signature:(SA *sa, Neighborhood* neighborhood, double timeRem, Test *test)
SAmax	./sa.c	/^    int SAmax;$/;"	m	struct:_SA	file:	access:public
SAmax	./test.c	/^    int SAmax;$/;"	m	struct:_Test	file:	access:public
SLACK_NEIGHS	./clique_enum.c	15;"	d	file:
SOLUTION_H	./solution.h	2;"	d
SPATHS_H	./spaths.h	10;"	d
SP_INFTY_DIST	./spaths.h	12;"	d
STACK_H	./stack.h	2;"	d
STR_SIZE	./cgraph.c	740;"	d	file:
STR_SIZE	./cgraph.c	935;"	d	file:
STR_SIZE	./clique_separation.c	453;"	d	file:
STR_SIZE	./clique_separation.c	501;"	d	file:
STR_SIZE	./macros.h	35;"	d
STR_SIZE	./ms_solver_mip.c	27;"	d	file:
STR_SIZE	./spaths.c	499;"	d	file:
STR_SIZE	./spaths.c	576;"	d	file:
SWAP	./vint_set.c	318;"	d	file:
SWAP	./vint_set.c	389;"	d	file:
ShortestPathsFinder	./spaths.h	/^typedef struct _ShortestPathsFinder ShortestPathsFinder;$/;"	t	typeref:struct:_ShortestPathsFinder
ShortestPathsFinderPtr	./spaths.h	/^typedef  ShortestPathsFinder * ShortestPathsFinderPtr;$/;"	t
Sol_calcCost	./solution.c	/^void Sol_calcCost( Solution *sol)$/;"	f	signature:( Solution *sol)
Sol_calcCost	./solution.h	/^void Sol_calcCost( Solution *sol);$/;"	p	signature:( Solution *sol)
Sol_clearBuildSequence	./solution.c	/^void Sol_clearBuildSequence(Solution *sol)$/;"	f	signature:(Solution *sol)
Sol_clearBuildSequence	./solution.h	/^void Sol_clearBuildSequence(Solution *sol);$/;"	p	signature:(Solution *sol)
Sol_cpy	./solution.c	/^void Sol_cpy( Solution *target, const Solution *sol )$/;"	f	signature:( Solution *target, const Solution *sol )
Sol_cpy	./solution.h	/^void Sol_cpy( Solution *target, const Solution *sol );$/;"	p	signature:( Solution *target, const Solution *sol )
Sol_create	./solution.c	/^Solution *Sol_create( const Instance *inst )$/;"	f	signature:( const Instance *inst )
Sol_create	./solution.h	/^Solution *Sol_create( const Instance *inst );$/;"	p	signature:( const Instance *inst )
Sol_fillSequence	./solution.c	/^void Sol_fillSequence( Solution *sol )$/;"	f	signature:( Solution *sol )
Sol_fillSequence	./solution.h	/^void Sol_fillSequence( Solution *sol );$/;"	p	signature:( Solution *sol )
Sol_free	./solution.c	/^void Sol_free( Solution **_solution )$/;"	f	signature:( Solution **_solution )
Sol_free	./solution.h	/^void Sol_free( Solution **_solution );$/;"	p	signature:( Solution **_solution )
Sol_getCost	./solution.c	/^Cost Sol_getCost( const Solution *sol )$/;"	f	signature:( const Solution *sol )
Sol_getCost	./solution.h	/^Cost Sol_getCost( const Solution *sol );$/;"	p	signature:( const Solution *sol )
Sol_getMinTime	./solution.c	/^int Sol_getMinTime(Solution *sol, const Job* job, const Mode* mode, int minTime)$/;"	f	signature:(Solution *sol, const Job* job, const Mode* mode, int minTime)
Sol_getMinTime	./solution.h	/^int Sol_getMinTime(Solution *sol, const Job* job, const Mode* mode, int minTime);$/;"	p	signature:(Solution *sol, const Job* job, const Mode* mode, int minTime)
Sol_getMinTime2	./solution.c	/^int Sol_getMinTime2(Solution *sol, int idxJob)$/;"	f	signature:(Solution *sol, int idxJob)
Sol_getMinTime2	./solution.h	/^int Sol_getMinTime2(Solution *sol, int idxJob);$/;"	p	signature:(Solution *sol, int idxJob)
Sol_getMode	./solution.c	/^int Sol_getMode( const Solution *sol, int job )$/;"	f	signature:( const Solution *sol, int job )
Sol_getMode	./solution.h	/^int Sol_getMode( const Solution *sol, int job );$/;"	p	signature:( const Solution *sol, int job )
Sol_getModeSet	./solution.c	/^ModeSet* Sol_getModeSet( const Solution *sol )$/;"	f	signature:( const Solution *sol )
Sol_getModeSet	./solution.h	/^ModeSet* Sol_getModeSet( const Solution *sol );$/;"	p	signature:( const Solution *sol )
Sol_getPosJob	./solution.c	/^int Sol_getPosJob(Solution *sol, int idxJob)$/;"	f	signature:(Solution *sol, int idxJob)
Sol_getPosJob	./solution.h	/^int Sol_getPosJob(Solution *sol, int idxJob);$/;"	p	signature:(Solution *sol, int idxJob)
Sol_getRRUsage	./solution.c	/^RRUsage* Sol_getRRUsage( Solution *sol)$/;"	f	signature:( Solution *sol)
Sol_getRRUsage	./solution.h	/^RRUsage* Sol_getRRUsage( Solution *sol);$/;"	p	signature:( Solution *sol)
Sol_getSequence	./solution.c	/^int Sol_getSequence( const Solution *sol, int idx)$/;"	f	signature:( const Solution *sol, int idx)
Sol_getSequence	./solution.h	/^int Sol_getSequence( const Solution *sol, int idx );$/;"	p	signature:( const Solution *sol, int idx )
Sol_getSolutionHash	./solution.c	/^unsigned int Sol_getSolutionHash( const Solution *sol)$/;"	f	signature:( const Solution *sol)
Sol_getSolutionHash	./solution.h	/^unsigned int Sol_getSolutionHash( const Solution *sol);$/;"	p	signature:( const Solution *sol)
Sol_getStartTime	./solution.c	/^int Sol_getStartTime( const Solution *sol, int idxJob)$/;"	f	signature:( const Solution *sol, int idxJob)
Sol_getStartTime	./solution.h	/^int Sol_getStartTime( const Solution *sol, int idxJob );$/;"	p	signature:( const Solution *sol, int idxJob )
Sol_getTMS	./solution.c	/^Cost Sol_getTMS( const Solution *sol )$/;"	f	signature:( const Solution *sol )
Sol_getTMS	./solution.h	/^Cost Sol_getTMS( const Solution *sol );$/;"	p	signature:( const Solution *sol )
Sol_getTPD	./solution.c	/^Cost Sol_getTPD( const Solution *sol )$/;"	f	signature:( const Solution *sol )
Sol_getTPD	./solution.h	/^Cost Sol_getTPD( const Solution *sol );$/;"	p	signature:( const Solution *sol )
Sol_inst	./solution.c	/^const Instance *Sol_inst( const Solution *sol )$/;"	f	signature:( const Solution *sol )
Sol_inst	./solution.h	/^const Instance *Sol_inst( const Solution *sol );$/;"	p	signature:( const Solution *sol )
Sol_print	./solution.c	/^void Sol_print( const Solution *sol )$/;"	f	signature:( const Solution *sol )
Sol_print	./solution.h	/^void Sol_print( const Solution *sol );$/;"	p	signature:( const Solution *sol )
Sol_read	./solution.c	/^void Sol_read( Solution *sol, char *file )$/;"	f	signature:( Solution *sol, char *file )
Sol_read	./solution.h	/^void Sol_read( Solution *sol, char *file );$/;"	p	signature:( Solution *sol, char *file )
Sol_rebuild	./solution.c	/^void Sol_rebuild( Solution *solution)$/;"	f	signature:( Solution *solution)
Sol_rebuild	./solution.h	/^void Sol_rebuild( Solution *solution);$/;"	p	signature:( Solution *solution)
Sol_rebuild_opt	./solution.c	/^void Sol_rebuild_opt( Solution *current, const Solution *solOLD)$/;"	f	signature:( Solution *current, const Solution *solOLD)
Sol_rebuild_opt	./solution.h	/^void Sol_rebuild_opt( Solution *current, const Solution *solOLD);$/;"	p	signature:( Solution *current, const Solution *solOLD)
Sol_sequence	./solution.c	/^int *Sol_sequence( const Solution *sol )$/;"	f	signature:( const Solution *sol )
Sol_sequence	./solution.h	/^int *Sol_sequence( const Solution *sol );$/;"	p	signature:( const Solution *sol )
Sol_setCost	./solution.c	/^void Sol_setCost( Solution *sol, Cost cost )$/;"	f	signature:( Solution *sol, Cost cost )
Sol_setCost	./solution.h	/^void Sol_setCost( Solution *sol, Cost cost );$/;"	p	signature:( Solution *sol, Cost cost )
Sol_setMinTimeSucc	./solution.c	/^void Sol_setMinTimeSucc(Solution *sol, const Job* job, int time)$/;"	f	signature:(Solution *sol, const Job* job, int time)
Sol_setMinTimeSucc	./solution.h	/^void Sol_setMinTimeSucc(Solution *sol, const Job* job, int time);$/;"	p	signature:(Solution *sol, const Job* job, int time)
Sol_setPosJob	./solution.c	/^void Sol_setPosJob(Solution *sol, int idxJob, int value)$/;"	f	signature:(Solution *sol, int idxJob, int value)
Sol_setPosJob	./solution.h	/^void Sol_setPosJob(Solution *sol, int idxJob, int value);$/;"	p	signature:(Solution *sol, int idxJob, int value)
Sol_setStartJob	./solution.c	/^void Sol_setStartJob(Solution *sol, int idxJob, int time)$/;"	f	signature:(Solution *sol, int idxJob, int time)
Sol_setStartJob	./solution.h	/^void Sol_setStartJob(Solution *sol, int idxJob, int time);$/;"	p	signature:(Solution *sol, int idxJob, int time)
Sol_startJobs	./solution.c	/^int* Sol_startJobs( const Solution *sol)$/;"	f	signature:( const Solution *sol)
Sol_startJobs	./solution.h	/^int *Sol_startJobs( const Solution *sol );$/;"	p	signature:( const Solution *sol )
Sol_topSort	./solution.c	/^void Sol_topSort( Solution *solution, int sequence[] )$/;"	f	signature:( Solution *solution, int sequence[] )
Sol_topSort	./solution.h	/^void Sol_topSort( Solution *solution, int sequence[] );$/;"	p	signature:( Solution *solution, int sequence[] )
Sol_write	./solution.c	/^void Sol_write( const Solution *sol, char *file )$/;"	f	signature:( const Solution *sol, char *file )
Sol_write	./solution.h	/^void Sol_write( const Solution *sol, char *file );$/;"	p	signature:( const Solution *sol, char *file )
Solution	./solution.h	/^typedef struct _Solution Solution;$/;"	t	typeref:struct:_Solution
Stack	./stack.h	/^typedef struct _Stack Stack;$/;"	t	typeref:struct:_Stack
Stk_create	./stack.c	/^Stack *Stk_create( int capacity )$/;"	f	signature:( int capacity )
Stk_create	./stack.h	/^Stack *Stk_create( int capacity );$/;"	p	signature:( int capacity )
Stk_free	./stack.c	/^void Stk_free( Stack **_p )$/;"	f	signature:( Stack **_p )
Stk_free	./stack.h	/^void Stk_free( Stack **_p );$/;"	p	signature:( Stack **_p )
Stk_isEmpty	./stack.c	/^int Stk_isEmpty(Stack *p)$/;"	f	signature:(Stack *p)
Stk_isEmpty	./stack.h	/^int Stk_isEmpty(Stack *p);$/;"	p	signature:(Stack *p)
Stk_isFull	./stack.c	/^int Stk_isFull(Stack *p)$/;"	f	signature:(Stack *p)
Stk_isFull	./stack.h	/^int Stk_isFull(Stack *p);$/;"	p	signature:(Stack *p)
Stk_pop	./stack.c	/^int Stk_pop (Stack *p)$/;"	f	signature:(Stack *p)
Stk_pop	./stack.h	/^int Stk_pop (Stack *p);$/;"	p	signature:(Stack *p)
Stk_print	./stack.c	/^int Stk_print(Stack *p)$/;"	f	signature:(Stack *p)
Stk_print	./stack.h	/^int Stk_print(Stack *p);$/;"	p	signature:(Stack *p)
Stk_push	./stack.c	/^int Stk_push(Stack *p, int value)$/;"	f	signature:(Stack *p, int value)
Stk_push	./stack.h	/^int Stk_push(Stack *p, int value);$/;"	p	signature:(Stack *p, int value)
Stk_restack	./stack.c	/^int Stk_restack(Stack *p, Stack *p_par, Stack *p_impar)$/;"	f	signature:(Stack *p, Stack *p_par, Stack *p_impar)
Stk_restack	./stack.h	/^int Stk_restack(Stack *p, Stack *p_par, Stack *p_impar);$/;"	p	signature:(Stack *p, Stack *p_par, Stack *p_impar)
Stk_top	./stack.c	/^int Stk_top(Stack *p )$/;"	f	signature:(Stack *p )
Stk_top	./stack.h	/^int Stk_top(Stack *p );$/;"	p	signature:(Stack *p )
T	./sa.c	/^    int T;$/;"	m	struct:_SA	file:	access:public
T	./test.c	/^    int T;$/;"	m	struct:_Test	file:	access:public
TE	./neighborhood.c	/^    long double *TE;$/;"	m	struct:_Neighborhood	file:	access:public
TE	./test.c	/^    long double **TE;$/;"	m	struct:_Test	file:	access:public
TEST_H_INCLUDED	./test.h	2;"	d
TI	./neighborhood.c	/^    long double *TI;$/;"	m	struct:_Neighborhood	file:	access:public
TI	./test.c	/^    long double **TI;$/;"	m	struct:_Test	file:	access:public
TIV	./neighborhood.c	/^    long double *TIV;$/;"	m	struct:_Neighborhood	file:	access:public
TIV	./test.c	/^    long double **TIV;$/;"	m	struct:_Test	file:	access:public
TMS	./solution.c	/^    Cost TMS;$/;"	m	struct:_Solution	file:	access:public
TOKENIZER_H_INCLUDED	./tokenizer.h	9;"	d
TOP_SORT_H_INCLUDED	./top_sort.h	9;"	d
TPD	./solution.c	/^    Cost TPD;$/;"	m	struct:_Solution	file:	access:public
Test	./test.h	/^typedef struct _Test Test;$/;"	t	typeref:struct:_Test
Test_calcIntensityNeigh	./test.c	/^void Test_calcIntensityNeigh(Test * test, Neighborhood *neigh, int s,  char ** argv)$/;"	f	signature:(Test * test, Neighborhood *neigh, int s, char ** argv)
Test_callTest	./test.c	/^void Test_callTest(Test *test, int idNeigh, double _timeNeigh, Cost bestFO)$/;"	f	signature:(Test *test, int idNeigh, double _timeNeigh, Cost bestFO)
Test_callTest	./test.h	/^void Test_callTest(Test *test, int idNeigh, double _timeNeigh, Cost bestFO);$/;"	p	signature:(Test *test, int idNeigh, double _timeNeigh, Cost bestFO)
Test_create	./test.c	/^Test *Test_create(int nNeigh, const Instance* inst)$/;"	f	signature:(int nNeigh, const Instance* inst)
Test_create	./test.h	/^Test *Test_create(int nNeigh, const Instance* inst);$/;"	p	signature:(int nNeigh, const Instance* inst)
Test_fileExists	./test.c	/^int Test_fileExists(char fileName[])$/;"	f	signature:(char fileName[])
Test_fileExists	./test.h	/^int Test_fileExists(char fileName[]);$/;"	p	signature:(char fileName[])
Test_free	./test.c	/^void Test_free( Test **_test )$/;"	f	signature:( Test **_test )
Test_free	./test.h	/^void Test_free( Test **_test );$/;"	p	signature:( Test **_test )
Test_getAlpha	./test.c	/^double Test_getAlpha(Test *test)$/;"	f	signature:(Test *test)
Test_getAlpha	./test.h	/^double Test_getAlpha(Test *test);$/;"	p	signature:(Test *test)
Test_getCurrentFO	./test.c	/^Cost Test_getCurrentFO(Test * test)$/;"	f	signature:(Test * test)
Test_getCurrentFO	./test.h	/^Cost Test_getCurrentFO(Test * test);$/;"	p	signature:(Test * test)
Test_getCurrentNeigh	./test.c	/^int Test_getCurrentNeigh(Test *test)$/;"	f	signature:(Test *test)
Test_getCurrentNeigh	./test.h	/^int Test_getCurrentNeigh(Test *test);$/;"	p	signature:(Test *test)
Test_getCurrentTime	./test.c	/^double Test_getCurrentTime(Test *test)$/;"	f	signature:(Test *test)
Test_getCurrentTime	./test.h	/^double Test_getCurrentTime(Test *test);$/;"	p	signature:(Test *test)
Test_getImproveFO	./test.c	/^Cost Test_getImproveFO(Test *test, int idxVet)$/;"	f	signature:(Test *test, int idxVet)
Test_getImproveFO	./test.h	/^Cost Test_getImproveFO(Test *test, int idxVet);$/;"	p	signature:(Test *test, int idxVet)
Test_getImproveNeigh	./test.c	/^int Test_getImproveNeigh(Test *test, int idxVet)$/;"	f	signature:(Test *test, int idxVet)
Test_getImproveNeigh	./test.h	/^int Test_getImproveNeigh(Test *test, int idxVet);$/;"	p	signature:(Test *test, int idxVet)
Test_getSAmax	./test.c	/^int Test_getSAmax(Test *test)$/;"	f	signature:(Test *test)
Test_getSAmax	./test.h	/^int Test_getSAmax(Test *test);$/;"	p	signature:(Test *test)
Test_getT	./test.c	/^int Test_getT(Test *test)$/;"	f	signature:(Test *test)
Test_getT	./test.h	/^int Test_getT(Test *test);$/;"	p	signature:(Test *test)
Test_getTimeNeigh	./test.c	/^double Test_getTimeNeigh(Test *test, int idxVet)$/;"	f	signature:(Test *test, int idxVet)
Test_getTimeNeigh	./test.h	/^double Test_getTimeNeigh(Test *test, int idxVet);$/;"	p	signature:(Test *test, int idxVet)
Test_getTotalTime	./test.c	/^double Test_getTotalTime(Test *test)$/;"	f	signature:(Test *test)
Test_getTotalTime	./test.h	/^double Test_getTotalTime(Test *test);$/;"	p	signature:(Test *test)
Test_getVisitNeigh	./test.c	/^int Test_getVisitNeigh(Test *test, int idxVet)$/;"	f	signature:(Test *test, int idxVet)
Test_getVisitNeigh	./test.h	/^int Test_getVisitNeigh(Test *test, int idxVet);$/;"	p	signature:(Test *test, int idxVet)
Test_incrementImproveFO	./test.c	/^void Test_incrementImproveFO(Test *test, int idxVet, Cost value)$/;"	f	signature:(Test *test, int idxVet, Cost value)
Test_incrementImproveFO	./test.h	/^void Test_incrementImproveFO(Test *test, int idxVet, Cost value);$/;"	p	signature:(Test *test, int idxVet, Cost value)
Test_incrementImproveNeigh	./test.c	/^void Test_incrementImproveNeigh(Test *test, int idxVet, int value)$/;"	f	signature:(Test *test, int idxVet, int value)
Test_incrementImproveNeigh	./test.h	/^void Test_incrementImproveNeigh(Test *test, int idxVet, int value);$/;"	p	signature:(Test *test, int idxVet, int value)
Test_incrementTimeNeigh	./test.c	/^void Test_incrementTimeNeigh(Test *test, int idxVet, double value)$/;"	f	signature:(Test *test, int idxVet, double value)
Test_incrementTimeNeigh	./test.h	/^void Test_incrementTimeNeigh(Test *test, int idxVet, double value);$/;"	p	signature:(Test *test, int idxVet, double value)
Test_incrementVisitNeigh	./test.c	/^void Test_incrementVisitNeigh(Test *test, int idxVet, int value)$/;"	f	signature:(Test *test, int idxVet, int value)
Test_incrementVisitNeigh	./test.h	/^void Test_incrementVisitNeigh(Test *test, int idxVet, int value);$/;"	p	signature:(Test *test, int idxVet, int value)
Test_neigh	./test.c	/^void Test_neigh(Instance *inst, Neighborhood *neigh, char ** argv, int argc, Test *test)$/;"	f	signature:(Instance *inst, Neighborhood *neigh, char ** argv, int argc, Test *test)
Test_readAnalisysNeigh	./test.c	/^void Test_readAnalisysNeigh(Test *test, int sw, int it, double psw, char *argv)$/;"	f	signature:(Test *test, int sw, int it, double psw, char *argv)
Test_readAnalisysNeighToInstance	./test.c	/^void Test_readAnalisysNeighToInstance(Test *test, int sw, int it, double psw, char *argv)$/;"	f	signature:(Test *test, int sw, int it, double psw, char *argv)
Test_readAnalisysNeigh_offline	./test.h	/^void Test_readAnalisysNeigh_offline(Test *test,  char **argv);$/;"	p	signature:(Test *test, char **argv)
Test_rebuild	./test.c	/^void Test_rebuild(Instance *inst, Neighborhood *neigh, Solution *sol1, Solution *sol2,  Solution *bestSol1,  Solution *bestSol2)$/;"	f	signature:(Instance *inst, Neighborhood *neigh, Solution *sol1, Solution *sol2, Solution *bestSol1, Solution *bestSol2)
Test_setAlpha	./test.c	/^void Test_setAlpha(Test *test, double alpha)$/;"	f	signature:(Test *test, double alpha)
Test_setAlpha	./test.h	/^void Test_setAlpha(Test *test, double alpha);$/;"	p	signature:(Test *test, double alpha)
Test_setCurrentFO	./test.c	/^void Test_setCurrentFO(Test *test, Cost value)$/;"	f	signature:(Test *test, Cost value)
Test_setCurrentFO	./test.h	/^void Test_setCurrentFO(Test *test, Cost value);$/;"	p	signature:(Test *test, Cost value)
Test_setCurrentNeigh	./test.c	/^void Test_setCurrentNeigh(Test *test, int nNeigh)$/;"	f	signature:(Test *test, int nNeigh)
Test_setCurrentNeigh	./test.h	/^void Test_setCurrentNeigh(Test *test, int nNeigh);$/;"	p	signature:(Test *test, int nNeigh)
Test_setCurrentTime	./test.c	/^void Test_setCurrentTime(Test *test, double _time)$/;"	f	signature:(Test *test, double _time)
Test_setCurrentTime	./test.h	/^void Test_setCurrentTime(Test *test, double _time);$/;"	p	signature:(Test *test, double _time)
Test_setImproveFO	./test.c	/^void Test_setImproveFO(Test *test, int idxVet, Cost value)$/;"	f	signature:(Test *test, int idxVet, Cost value)
Test_setImproveFO	./test.h	/^void Test_setImproveFO(Test *test, int idxVet, long int value);$/;"	p	signature:(Test *test, int idxVet, long int value)
Test_setImproveNeigh	./test.c	/^void Test_setImproveNeigh(Test *test, int idxVet, int value)$/;"	f	signature:(Test *test, int idxVet, int value)
Test_setImproveNeigh	./test.h	/^void Test_setImproveNeigh(Test *test, int idxVet, int value);$/;"	p	signature:(Test *test, int idxVet, int value)
Test_setSAmax	./test.c	/^void Test_setSAmax(Test *test, int samax)$/;"	f	signature:(Test *test, int samax)
Test_setSAmax	./test.h	/^void Test_setSAmax(Test *test, int samax);$/;"	p	signature:(Test *test, int samax)
Test_setT	./test.c	/^void Test_setT(Test *test, int t)$/;"	f	signature:(Test *test, int t)
Test_setT	./test.h	/^void Test_setT(Test *test, int t);$/;"	p	signature:(Test *test, int t)
Test_setTimeNeigh	./test.c	/^void Test_setTimeNeigh(Test *test, int idxVet, double value)$/;"	f	signature:(Test *test, int idxVet, double value)
Test_setTimeNeigh	./test.h	/^void Test_setTimeNeigh(Test *test, int idxVet, double value);$/;"	p	signature:(Test *test, int idxVet, double value)
Test_setTotalTime	./test.c	/^void Test_setTotalTime(Test *test, double value)$/;"	f	signature:(Test *test, double value)
Test_setTotalTime	./test.h	/^void Test_setTotalTime(Test *test, double value);$/;"	p	signature:(Test *test, double value)
Test_setVisitNeigh	./test.c	/^void Test_setVisitNeigh(Test *test, int idxVet, int value)$/;"	f	signature:(Test *test, int idxVet, int value)
Test_setVisitNeigh	./test.h	/^void Test_setVisitNeigh(Test *test, int idxVet, int value);$/;"	p	signature:(Test *test, int idxVet, int value)
Test_writeAnalisysNeigh	./test.c	/^void Test_writeAnalisysNeigh(Test *test,  char **argv)$/;"	f	signature:(Test *test, char **argv)
Test_writeAnalisysNeigh	./test.h	/^void Test_writeAnalisysNeigh(Test *test,  char **argv);$/;"	p	signature:(Test *test, char **argv)
Test_writeResultLAHC	./lahc.h	/^void Test_writeResultLAHC(Test *test, char **argv, Cost initFO, Neighborhood *neigh, Solution* sol, int nSol, int lfa, int seed, int nCostList , int nDiversification, int nStayDiversification, int nWOImprove, double perc, int sw, double lr, int it, float psw , int tm, int tj, int rm, int rj);$/;"	p	signature:(Test *test, char **argv, Cost initFO, Neighborhood *neigh, Solution* sol, int nSol, int lfa, int seed, int nCostList , int nDiversification, int nStayDiversification, int nWOImprove, double perc, int sw, double lr, int it, float psw , int tm, int tj, int rm, int rj)
Test_writeResultLAHC	./test.c	/^void Test_writeResultLAHC(Test *test, char **argv, Cost initFO, Neighborhood *neigh, Solution* sol, int nSol, int lfa, int seed, int nCostList , int nDiversification, int nStayDiversification, int nWOImprove, double perc, int sw, double lr, int it, float psw, int tm, int tj, int rm, int rj )$/;"	f	signature:(Test *test, char **argv, Cost initFO, Neighborhood *neigh, Solution* sol, int nSol, int lfa, int seed, int nCostList , int nDiversification, int nStayDiversification, int nWOImprove, double perc, int sw, double lr, int it, float psw, int tm, int tj, int rm, int rj )
Test_writeResultLAHC_thread	./test.c	/^void Test_writeResultLAHC_thread(Test *test, char **argv, Cost initFO, Neighborhood *neigh, Solution* sol, int lfa, int nSol, int seed, int thread)$/;"	f	signature:(Test *test, char **argv, Cost initFO, Neighborhood *neigh, Solution* sol, int lfa, int nSol, int seed, int thread)
Test_writeResultSA	./test.c	/^void Test_writeResultSA(Test *test, char **argv, Cost initFO, int *assortment, Solution* sol)$/;"	f	signature:(Test *test, char **argv, Cost initFO, int *assortment, Solution* sol)
Test_writeResultSA	./test.h	/^void Test_writeResultSA(Test *test, char **argv, Cost initFO, int *assortment, Solution* sol);$/;"	p	signature:(Test *test, char **argv, Cost initFO, int *assortment, Solution* sol)
Test_writeResultVND	./test.c	/^void Test_writeResultVND(Test *test, char **argv, Cost initFO, int *assortment, Solution* sol, int fi)$/;"	f	signature:(Test *test, char **argv, Cost initFO, int *assortment, Solution* sol, int fi)
Test_writeResultVND	./test.h	/^void Test_writeResultVND(Test *test, char **argv, Cost initFO, int *assortment, Solution* sol, int fi);$/;"	p	signature:(Test *test, char **argv, Cost initFO, int *assortment, Solution* sol, int fi)
Test_writeResultVNS	./test.c	/^void Test_writeResultVNS(Test *test, char **argv, Cost initFO, int *assortment, int first, int type, Solution* sol,  int lfa, int itRNA, int itLAHC, int nMoves, int nSizeSamplingShake, double perc, double percRS, int tm, int tj, int rm, int rj, int nSol)$/;"	f	signature:(Test *test, char **argv, Cost initFO, int *assortment, int first, int type, Solution* sol, int lfa, int itRNA, int itLAHC, int nMoves, int nSizeSamplingShake, double perc, double percRS, int tm, int tj, int rm, int rj, int nSol)
Test_writeResultVNS	./test.h	/^void Test_writeResultVNS(Test *test, char **argv, Cost initFO, int *assortment, int first, int type, Solution* sol,  int lfa, int itRNA, int itLAHC, int nMoves, int nSizeSamplingShake, double perc, double percRS, int tm, int tj, int rm, int rj, int nSol);$/;"	p	signature:(Test *test, char **argv, Cost initFO, int *assortment, int first, int type, Solution* sol, int lfa, int itRNA, int itLAHC, int nMoves, int nSizeSamplingShake, double perc, double percRS, int tm, int tj, int rm, int rj, int nSol)
Tok_create	./tokenizer.c	/^Tokenizer *Tok_create()$/;"	f
Tok_create	./tokenizer.h	/^Tokenizer *Tok_create();$/;"	p	signature:()
Tok_free	./tokenizer.c	/^void Tok_free(Tokenizer** tok)$/;"	f	signature:(Tokenizer** tok)
Tok_free	./tokenizer.h	/^void Tok_free( Tokenizer **tok );$/;"	p	signature:( Tokenizer **tok )
Tok_nTokens	./tokenizer.c	/^int Tok_nTokens(const Tokenizer* tok)$/;"	f	signature:(const Tokenizer* tok)
Tok_nTokens	./tokenizer.h	/^int Tok_nTokens( const Tokenizer *tok );$/;"	p	signature:( const Tokenizer *tok )
Tok_parse	./tokenizer.c	/^void Tok_parse( Tokenizer *tok, const char* line, const char delim )$/;"	f	signature:( Tokenizer *tok, const char* line, const char delim )
Tok_parse	./tokenizer.h	/^void Tok_parse( Tokenizer *tok, const char *line, const char delim );$/;"	p	signature:( Tokenizer *tok, const char *line, const char delim )
Tok_token	./tokenizer.c	/^const char *Tok_token(const Tokenizer* tok, int i)$/;"	f	signature:(const Tokenizer* tok, int i)
Tok_token	./tokenizer.h	/^const char *Tok_token( const Tokenizer *tok, int i );$/;"	p	signature:( const Tokenizer *tok, int i )
Tokenizer	./tokenizer.h	/^typedef struct _Tokenizer Tokenizer;$/;"	t	typeref:struct:_Tokenizer
TopSort	./top_sort.h	/^typedef struct _TopSort TopSort;$/;"	t	typeref:struct:_TopSort
TopSort_computeProjectTS	./top_sort.c	/^void TopSort_computeProjectTS( TopSort *ts, int idxProject )$/;"	f	signature:( TopSort *ts, int idxProject )
TopSort_computeProjectTS	./top_sort.h	/^void TopSort_computeProjectTS( TopSort *ts, int idxProject );$/;"	p	signature:( TopSort *ts, int idxProject )
TopSort_create	./top_sort.c	/^TopSort *TopSort_create( const Instance *inst )$/;"	f	signature:( const Instance *inst )
TopSort_create	./top_sort.h	/^TopSort *TopSort_create( const Instance *inst );$/;"	p	signature:( const Instance *inst )
TopSort_free	./top_sort.c	/^void TopSort_free( TopSort **_topSort )$/;"	f	signature:( TopSort **_topSort )
TopSort_free	./top_sort.h	/^void TopSort_free( TopSort **_topSort );$/;"	p	signature:( TopSort **_topSort )
TopSort_nTS	./top_sort.c	/^int TopSort_nTS( const TopSort *ts )$/;"	f	signature:( const TopSort *ts )
TopSort_nTS	./top_sort.h	/^int TopSort_nTS( const TopSort *ts );$/;"	p	signature:( const TopSort *ts )
TopSort_ts	./top_sort.c	/^int *TopSort_ts( const TopSort *ts )$/;"	f	signature:( const TopSort *ts )
TopSort_ts	./top_sort.h	/^int *TopSort_ts( const TopSort *ts );$/;"	p	signature:( const TopSort *ts )
True	./macros.h	84;"	d
VChar_capacity	./vec_char.c	/^int VChar_capacity( const VecChar *v )$/;"	f	signature:( const VecChar *v )
VChar_capacity	./vec_char.h	/^int VChar_capacity( const VecChar *v );$/;"	p	signature:( const VecChar *v )
VChar_clear	./vec_char.c	/^void VChar_clear( VecChar *v )$/;"	f	signature:( VecChar *v )
VChar_clear	./vec_char.h	/^void VChar_clear( VecChar *v );$/;"	p	signature:( VecChar *v )
VChar_create	./vec_char.c	/^VecChar *VChar_create()$/;"	f
VChar_create	./vec_char.h	/^VecChar *VChar_create();$/;"	p	signature:()
VChar_createFill	./vec_char.c	/^VecChar *VChar_createFill( const int size, const char value )$/;"	f	signature:( const int size, const char value )
VChar_createFill	./vec_char.h	/^VecChar *VChar_createFill( const int size, const char value );$/;"	p	signature:( const int size, const char value )
VChar_createIniCap	./vec_char.c	/^VecChar *VChar_createIniCap( const int iniCap )$/;"	f	signature:( const int iniCap )
VChar_createIniCap	./vec_char.h	/^VecChar *VChar_createIniCap( const int iniCap );$/;"	p	signature:( const int iniCap )
VChar_find	./vec_char.c	/^int VChar_find( const VecChar *v, const int value )$/;"	f	signature:( const VecChar *v, const int value )
VChar_find	./vec_char.h	/^int VChar_find( const VecChar *v, const int value );$/;"	p	signature:( const VecChar *v, const int value )
VChar_free	./vec_char.c	/^void VChar_free( VecChar **_v )$/;"	f	signature:( VecChar **_v )
VChar_free	./vec_char.h	/^void VChar_free( VecChar **v );$/;"	p	signature:( VecChar **v )
VChar_get	./vec_char.c	/^char VChar_get( const VecChar *vec, const int pos )$/;"	f	signature:( const VecChar *vec, const int pos )
VChar_get	./vec_char.h	/^char VChar_get( const VecChar *v, const int pos );$/;"	p	signature:( const VecChar *v, const int pos )
VChar_getPtr	./vec_char.c	/^char *VChar_getPtr( VecChar *v )$/;"	f	signature:( VecChar *v )
VChar_getPtr	./vec_char.h	/^char *VChar_getPtr( VecChar *v );$/;"	p	signature:( VecChar *v )
VChar_pushBack	./vec_char.c	/^void VChar_pushBack( VecChar *vec, const char value )$/;"	f	signature:( VecChar *vec, const char value )
VChar_pushBack	./vec_char.h	/^void VChar_pushBack( VecChar *vec, const char value );$/;"	p	signature:( VecChar *vec, const char value )
VChar_set	./vec_char.c	/^void VChar_set( VecChar *vec, const int pos, const char value )$/;"	f	signature:( VecChar *vec, const int pos, const char value )
VChar_set	./vec_char.h	/^void VChar_set( VecChar *v, const int pos, const char value );$/;"	p	signature:( VecChar *v, const int pos, const char value )
VChar_size	./vec_char.c	/^int VChar_size( const VecChar *v )$/;"	f	signature:( const VecChar *v )
VChar_size	./vec_char.h	/^int VChar_size( const VecChar *v );$/;"	p	signature:( const VecChar *v )
VDbl_capacity	./vec_double.c	/^int VDbl_capacity( const VecDbl *v )$/;"	f	signature:( const VecDbl *v )
VDbl_capacity	./vec_double.h	/^int VDbl_capacity( const VecDbl *v );$/;"	p	signature:( const VecDbl *v )
VDbl_clear	./vec_double.c	/^void VDbl_clear( VecDbl *v )$/;"	f	signature:( VecDbl *v )
VDbl_clear	./vec_double.h	/^void VDbl_clear( VecDbl *v );$/;"	p	signature:( VecDbl *v )
VDbl_create	./vec_double.c	/^VecDbl *VDbl_create()$/;"	f
VDbl_create	./vec_double.h	/^VecDbl *VDbl_create();$/;"	p	signature:()
VDbl_createFill	./vec_double.c	/^VecDbl *VDbl_createFill( const int size, const double value )$/;"	f	signature:( const int size, const double value )
VDbl_createFill	./vec_double.h	/^VecDbl *VDbl_createFill( const int size, const double value );$/;"	p	signature:( const int size, const double value )
VDbl_createIniCap	./vec_double.c	/^VecDbl *VDbl_createIniCap( const int iniCap )$/;"	f	signature:( const int iniCap )
VDbl_createIniCap	./vec_double.h	/^VecDbl *VDbl_createIniCap( const int iniCap );$/;"	p	signature:( const int iniCap )
VDbl_find	./vec_double.c	/^int VDbl_find( const VecDbl *v, const double value )$/;"	f	signature:( const VecDbl *v, const double value )
VDbl_find	./vec_double.h	/^int VDbl_find( const VecDbl *v, const double value );$/;"	p	signature:( const VecDbl *v, const double value )
VDbl_free	./vec_double.c	/^void VDbl_free( VecDbl **_v )$/;"	f	signature:( VecDbl **_v )
VDbl_free	./vec_double.h	/^void VDbl_free( VecDbl **_v );$/;"	p	signature:( VecDbl **_v )
VDbl_get	./vec_double.c	/^double VDbl_get( const VecDbl *vec, const int pos )$/;"	f	signature:( const VecDbl *vec, const int pos )
VDbl_get	./vec_double.h	/^double VDbl_get( const VecDbl *v, const int pos );$/;"	p	signature:( const VecDbl *v, const int pos )
VDbl_getPtr	./vec_double.c	/^double *VDbl_getPtr( VecDbl *v )$/;"	f	signature:( VecDbl *v )
VDbl_getPtr	./vec_double.h	/^double *VDbl_getPtr( VecDbl *v );$/;"	p	signature:( VecDbl *v )
VDbl_pushBack	./vec_double.c	/^void VDbl_pushBack( VecDbl *vec, double value )$/;"	f	signature:( VecDbl *vec, double value )
VDbl_pushBack	./vec_double.h	/^void VDbl_pushBack( VecDbl *v, double value );$/;"	p	signature:( VecDbl *v, double value )
VDbl_set	./vec_double.c	/^void VDbl_set( VecDbl *vec, const int pos, const double value )$/;"	f	signature:( VecDbl *vec, const int pos, const double value )
VDbl_set	./vec_double.h	/^void VDbl_set( VecDbl *v, const int pos, const double value );$/;"	p	signature:( VecDbl *v, const int pos, const double value )
VDbl_size	./vec_double.c	/^int VDbl_size( const VecDbl *v )$/;"	f	signature:( const VecDbl *v )
VDbl_size	./vec_double.h	/^int VDbl_size( const VecDbl *v );$/;"	p	signature:( const VecDbl *v )
VECTORMGM_C_INCLUDED	./vectormgm.c	2;"	d	file:
VECTORMGM_H_INCLUDED	./vectormgm.h	2;"	d
VECTOR_ADD	./vectormgm.h	86;"	d
VEC_CHAR_HEADER_DEFINED	./vec_char.h	9;"	d
VEC_DBL_HEADER	./vec_double.h	9;"	d
VEC_INT_HEADER	./vec_int.h	9;"	d
VEC_STR_H	./vec_str.h	9;"	d
VERBOSE	./mip_compact.c	42;"	d	file:
VINT_QUEUE_H_INCLUDED	./vint_queue.h	4;"	d
VINT_SET_H_INCLUDED	./vint_set.h	6;"	d
VInt_capacity	./vec_int.c	/^int VInt_capacity( const VecInt *v )$/;"	f	signature:( const VecInt *v )
VInt_capacity	./vec_int.h	/^int VInt_capacity( const VecInt *v );$/;"	p	signature:( const VecInt *v )
VInt_clear	./vec_int.c	/^void VInt_clear( VecInt *v )$/;"	f	signature:( VecInt *v )
VInt_clear	./vec_int.h	/^void VInt_clear( VecInt *v );$/;"	p	signature:( VecInt *v )
VInt_create	./vec_int.c	/^VecInt *VInt_create()$/;"	f
VInt_create	./vec_int.h	/^VecInt *VInt_create();$/;"	p	signature:()
VInt_createFill	./vec_int.c	/^VecInt *VInt_createFill( const int size, const int value )$/;"	f	signature:( const int size, const int value )
VInt_createFill	./vec_int.h	/^VecInt *VInt_createFill( const int size, const int value );$/;"	p	signature:( const int size, const int value )
VInt_createIniCap	./vec_int.c	/^VecInt *VInt_createIniCap( const int iniCap )$/;"	f	signature:( const int iniCap )
VInt_createIniCap	./vec_int.h	/^VecInt *VInt_createIniCap( const int iniCap );$/;"	p	signature:( const int iniCap )
VInt_find	./vec_int.c	/^int VInt_find( const VecInt *v, const int value )$/;"	f	signature:( const VecInt *v, const int value )
VInt_find	./vec_int.h	/^int VInt_find( const VecInt *v, const int value );$/;"	p	signature:( const VecInt *v, const int value )
VInt_free	./vec_int.c	/^void VInt_free( VecInt **_v )$/;"	f	signature:( VecInt **_v )
VInt_free	./vec_int.h	/^void VInt_free( VecInt **_v );$/;"	p	signature:( VecInt **_v )
VInt_get	./vec_int.c	/^int VInt_get( const VecInt *vec, const int pos )$/;"	f	signature:( const VecInt *vec, const int pos )
VInt_get	./vec_int.h	/^int VInt_get( const VecInt *v, const int pos );$/;"	p	signature:( const VecInt *v, const int pos )
VInt_getPtr	./vec_int.c	/^int *VInt_getPtr( VecInt *v )$/;"	f	signature:( VecInt *v )
VInt_getPtr	./vec_int.h	/^int *VInt_getPtr( VecInt *v );$/;"	p	signature:( VecInt *v )
VInt_pushBack	./vec_int.c	/^void VInt_pushBack( VecInt *vec, int value )$/;"	f	signature:( VecInt *vec, int value )
VInt_pushBack	./vec_int.h	/^void VInt_pushBack( VecInt *v, int value );$/;"	p	signature:( VecInt *v, int value )
VInt_set	./vec_int.c	/^void VInt_set( VecInt *vec, const int pos, const int value )$/;"	f	signature:( VecInt *vec, const int pos, const int value )
VInt_set	./vec_int.h	/^void VInt_set( VecInt *v, const int pos, const int value );$/;"	p	signature:( VecInt *v, const int pos, const int value )
VInt_size	./vec_int.c	/^int VInt_size( const VecInt *v )$/;"	f	signature:( const VecInt *v )
VInt_size	./vec_int.h	/^int VInt_size( const VecInt *v );$/;"	p	signature:( const VecInt *v )
VND	./vnd.h	/^typedef struct _VND VND;$/;"	t	typeref:struct:_VND
VND_H	./vnd.h	9;"	d
VND_checkArgs	./vnd.c	/^void VND_checkArgs(VND *vnd, char **argv, int argc)$/;"	f	signature:(VND *vnd, char **argv, int argc)
VND_checkArgs	./vnd.h	/^void VND_checkArgs(VND *vnd,  char **argv, int argc);$/;"	p	signature:(VND *vnd, char **argv, int argc)
VND_create	./vnd.c	/^VND *VND_create( const Instance *inst, Solution *sol, char **argv, int argc)$/;"	f	signature:( const Instance *inst, Solution *sol, char **argv, int argc)
VND_create	./vnd.h	/^VND *VND_create( const Instance *inst, Solution *sol, char **argv, int argc);$/;"	p	signature:( const Instance *inst, Solution *sol, char **argv, int argc)
VND_free	./vnd.c	/^void VND_free( VND **_vnd )$/;"	f	signature:( VND **_vnd )
VND_free	./vnd.h	/^void VND_free( VND **_vnd );$/;"	p	signature:( VND **_vnd )
VND_getBestSol	./vnd.c	/^Solution *VND_getBestSol(VND *vnd)$/;"	f	signature:(VND *vnd)
VND_getNChangesModes	./vnd.h	/^int *VND_getNChangesModes(VND *vnd);$/;"	p	signature:(VND *vnd)
VND_getNTimesJobOnModes	./vnd.h	/^int **VND_getNTimesJobOnModes(VND *vnd);$/;"	p	signature:(VND *vnd)
VND_getNeighborhood	./vnd.h	/^Neighborhood *VND_getNeighborhood(VND *vnd);$/;"	p	signature:(VND *vnd)
VND_getParallel	./vnd.c	/^int VND_getParallel(VND *vnd)$/;"	f	signature:(VND *vnd)
VND_getSolThread	./vnd.h	/^Solution *VND_getSolThread(VND *vnd, int idx);$/;"	p	signature:(VND *vnd, int idx)
VND_runDet	./vnd.c	/^void VND_runDet(VND *vnd, Neighborhood *neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test)$/;"	f	signature:(VND *vnd, Neighborhood *neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test)
VND_runDet	./vnd.h	/^void VND_runDet(VND *vnd, Neighborhood *neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test);$/;"	p	signature:(VND *vnd, Neighborhood *neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test)
VND_runStoc	./vnd.h	/^void VND_runStoc(VND *down, double timeRem, int firstImprovement);$/;"	p	signature:(VND *down, double timeRem, int firstImprovement)
VNS	./vns.h	/^typedef struct _VNS VNS;$/;"	t	typeref:struct:_VNS
VNS_H	./vns.h	9;"	d
VNS_checkArgs	./vns.c	/^void VNS_checkArgs(VNS *vns, char **argv, int argc)$/;"	f	signature:(VNS *vns, char **argv, int argc)
VNS_checkArgs	./vns.h	/^void VNS_checkArgs(VNS *vns, char **argv, int argc);$/;"	p	signature:(VNS *vns, char **argv, int argc)
VNS_create	./vns.c	/^VNS *VNS_create( const Instance *inst, Solution *sol, Neighborhood *neighborhood, char **argv, int argc )$/;"	f	signature:( const Instance *inst, Solution *sol, Neighborhood *neighborhood, char **argv, int argc )
VNS_create	./vns.h	/^VNS *VNS_create( const Instance *inst, Solution *sol,  Neighborhood *neighborhood,  char **argv, int argc );$/;"	p	signature:( const Instance *inst, Solution *sol, Neighborhood *neighborhood, char **argv, int argc )
VNS_free	./vns.c	/^void VNS_free( VNS **_vns )$/;"	f	signature:( VNS **_vns )
VNS_free	./vns.h	/^void VNS_free( VNS **_vns );$/;"	p	signature:( VNS **_vns )
VNS_getAllNeighbor	./vns.h	/^int VNS_getAllNeighbor(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getDivRJ	./vns.c	/^int VNS_getDivRJ(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getDivRJ	./vns.h	/^int VNS_getDivRJ(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getDivRM	./vns.c	/^int VNS_getDivRM(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getDivRM	./vns.h	/^int VNS_getDivRM(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getDivTJ	./vns.c	/^int VNS_getDivTJ(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getDivTJ	./vns.h	/^int VNS_getDivTJ(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getDivTM	./vns.c	/^int VNS_getDivTM(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getDivTM	./vns.h	/^int VNS_getDivTM(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getItLAHC	./vns.c	/^int VNS_getItLAHC(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getItLAHC	./vns.h	/^int VNS_getItLAHC(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getItRNA	./vns.c	/^int VNS_getItRNA(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getItRNA	./vns.h	/^int VNS_getItRNA(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getLfa	./vns.c	/^int VNS_getLfa(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getLfa	./vns.h	/^int VNS_getLfa(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getNChanges	./vns.h	/^int VNS_getNChanges(VNS *vns, int j);$/;"	p	signature:(VNS *vns, int j)
VNS_getNMoves	./vns.c	/^int VNS_getNMoves(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getNMoves	./vns.h	/^int VNS_getNMoves(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getNSizeSamplingShake	./vns.c	/^int VNS_getNSizeSamplingShake(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getNSizeSamplingShake	./vns.h	/^int VNS_getNSizeSamplingShake(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getPerc	./vns.c	/^double VNS_getPerc(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getPerc	./vns.h	/^double VNS_getPerc(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_getPercRS	./vns.c	/^double VNS_getPercRS(VNS *vns)$/;"	f	signature:(VNS *vns)
VNS_getPercRS	./vns.h	/^double VNS_getPercRS(VNS *vns);$/;"	p	signature:(VNS *vns)
VNS_increasingResidencyJobInMode	./vns.c	/^void VNS_increasingResidencyJobInMode(VNS* vns, Solution* current)$/;"	f	signature:(VNS* vns, Solution* current)
VNS_increasingResidencyJobInMode	./vns.h	/^void VNS_increasingResidencyJobInMode(VNS* vns, Solution* current);$/;"	p	signature:(VNS* vns, Solution* current)
VNS_increasingResidencyJobInSequence	./vns.c	/^void VNS_increasingResidencyJobInSequence(VNS* vns, Solution* current)$/;"	f	signature:(VNS* vns, Solution* current)
VNS_increasingResidencyJobInSequence	./vns.h	/^void VNS_increasingResidencyJobInSequence(VNS* vns, Solution* current);$/;"	p	signature:(VNS* vns, Solution* current)
VNS_increasingTransitivityOfModes	./vns.c	/^void VNS_increasingTransitivityOfModes(VNS* vns, Neighborhood* neighborhood)$/;"	f	signature:(VNS* vns, Neighborhood* neighborhood)
VNS_increasingTransitivityOfModes	./vns.h	/^void VNS_increasingTransitivityOfModes(VNS* vns, Neighborhood* neighborhood);$/;"	p	signature:(VNS* vns, Neighborhood* neighborhood)
VNS_increasingTransitivityOfSequence	./vns.c	/^void VNS_increasingTransitivityOfSequence(VNS* vns, Neighborhood* neighborhood)$/;"	f	signature:(VNS* vns, Neighborhood* neighborhood)
VNS_increasingTransitivityOfSequence	./vns.h	/^void VNS_increasingTransitivityOfSequence(VNS* vns, Neighborhood* neighborhood);$/;"	p	signature:(VNS* vns, Neighborhood* neighborhood)
VNS_penaltyJobs	./vns.c	/^Cost VNS_penaltyJobs(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)$/;"	f	signature:(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)
VNS_penaltyJobs	./vns.h	/^Cost VNS_penaltyJobs(VNS* vns, Neighborhood* neighborhood, Cost foCurrent);$/;"	p	signature:(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)
VNS_penaltyModes	./vns.c	/^Cost VNS_penaltyModes(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)$/;"	f	signature:(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)
VNS_penaltyModes	./vns.h	/^Cost VNS_penaltyModes(VNS* vns, Neighborhood* neighborhood, Cost foCurrent);$/;"	p	signature:(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)
VNS_penaltyTransJobs	./vns.c	/^Cost VNS_penaltyTransJobs(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)$/;"	f	signature:(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)
VNS_penaltyTransJobs	./vns.h	/^Cost VNS_penaltyTransJobs(VNS* vns, Neighborhood* neighborhood, Cost foCurrent);$/;"	p	signature:(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)
VNS_penaltyTransModes	./vns.c	/^Cost VNS_penaltyTransModes(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)$/;"	f	signature:(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)
VNS_penaltyTransModes	./vns.h	/^Cost VNS_penaltyTransModes(VNS* vns, Neighborhood* neighborhood, Cost foCurrent);$/;"	p	signature:(VNS* vns, Neighborhood* neighborhood, Cost foCurrent)
VNS_rna	./vns.c	/^void VNS_rna(VNS *vns,  Solution *current, Neighborhood* neighborhood, double timeRem, Test *test)$/;"	f	signature:(VNS *vns, Solution *current, Neighborhood* neighborhood, double timeRem, Test *test)
VNS_rna	./vns.h	/^void VNS_rna(VNS *vns,  Solution *current, Neighborhood* neighborhood, double timeRem, Test *test);$/;"	p	signature:(VNS *vns, Solution *current, Neighborhood* neighborhood, double timeRem, Test *test)
VNS_run_LAHC_shake2	./vns.c	/^void VNS_run_LAHC_shake2(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor,  Test *test, char **argv, int argc )$/;"	f	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc )
VNS_run_LAHC_shake2	./vns.h	/^void VNS_run_LAHC_shake2(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor,  Test *test, char **argv, int argc );$/;"	p	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc )
VNS_run_LAHC_smartshake	./vns.c	/^void VNS_run_LAHC_smartshake(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, char **argv, int argc )$/;"	f	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, char **argv, int argc )
VNS_run_LAHC_smartshake	./vns.h	/^void VNS_run_LAHC_smartshake(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor,  char **argv, int argc );$/;"	p	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, char **argv, int argc )
VNS_run_RNA	./vns.c	/^void VNS_run_RNA(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor,  Test *test, char **argv, int argc )$/;"	f	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc )
VNS_run_RNA	./vns.h	/^void VNS_run_RNA(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc );$/;"	p	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc )
VNS_run_RNA_shake	./vns.c	/^void VNS_run_RNA_shake(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor,  Test *test, char **argv, int argc )$/;"	f	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc )
VNS_run_RNA_shake	./vns.h	/^void VNS_run_RNA_shake(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor,  Test *test, char **argv, int argc );$/;"	p	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc )
VNS_run_RNA_shake2	./vns.c	/^void VNS_run_RNA_shake2(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor,  Test *test, char **argv, int argc )$/;"	f	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc )
VNS_run_RNA_shake2	./vns.h	/^void VNS_run_RNA_shake2(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor,  Test *test, char **argv, int argc );$/;"	p	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, Test *test, char **argv, int argc )
VNS_run_general_vnd	./vns.c	/^void VNS_run_general_vnd(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test, char **argv, int argc )$/;"	f	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test, char **argv, int argc )
VNS_run_general_vnd	./vns.h	/^void VNS_run_general_vnd(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test, char **argv, int argc );$/;"	p	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test, char **argv, int argc )
VNS_run_reduced	./vns.c	/^void VNS_run_reduced(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test, char **argv, int argc )$/;"	f	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test, char **argv, int argc )
VNS_run_reduced	./vns.h	/^void VNS_run_reduced(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test, char **argv, int argc );$/;"	p	signature:(VNS *vns, Neighborhood* neighborhood, double timeRem, int nNeighbor, int firstImprovement, Test *test, char **argv, int argc )
VNS_setNChanges	./vns.h	/^void VNS_setNChanges(VNS *vns, int j);$/;"	p	signature:(VNS *vns, int j)
VStr_check_valid_strv	./vec_str.c	/^void VStr_check_valid_strv( const VecStr *strv )$/;"	f	signature:( const VecStr *strv )
VStr_check_valid_strv	./vec_str.c	/^void VStr_check_valid_strv( const VecStr *strv );$/;"	p	file:	signature:( const VecStr *strv )
VStr_clear	./vec_str.c	/^void VStr_clear( VecStr *strv )$/;"	f	signature:( VecStr *strv )
VStr_clear	./vec_str.h	/^void VStr_clear( VecStr *strv );$/;"	p	signature:( VecStr *strv )
VStr_create	./vec_str.c	/^VecStr *VStr_create( int strSize )$/;"	f	signature:( int strSize )
VStr_create	./vec_str.h	/^VecStr *VStr_create( int strSize );$/;"	p	signature:( int strSize )
VStr_find	./vec_str.c	/^int VStr_find( const VecStr *strv, const char *str )$/;"	f	signature:( const VecStr *strv, const char *str )
VStr_find	./vec_str.h	/^int VStr_find( const VecStr *strv, const char *str );$/;"	p	signature:( const VecStr *strv, const char *str )
VStr_findSubStr	./vec_str.c	/^int VStr_findSubStr( const VecStr *strv, const char *str )$/;"	f	signature:( const VecStr *strv, const char *str )
VStr_findSubStr	./vec_str.h	/^int VStr_findSubStr( const VecStr *strv, const char *str );$/;"	p	signature:( const VecStr *strv, const char *str )
VStr_free	./vec_str.c	/^void VStr_free( VecStr **_strv )$/;"	f	signature:( VecStr **_strv )
VStr_free	./vec_str.h	/^void VStr_free( VecStr **_strv );$/;"	p	signature:( VecStr **_strv )
VStr_get	./vec_str.c	/^const char *VStr_get( const VecStr *strv, int pos )$/;"	f	signature:( const VecStr *strv, int pos )
VStr_get	./vec_str.h	/^const char *VStr_get( const VecStr *strv, int pos );$/;"	p	signature:( const VecStr *strv, int pos )
VStr_increase_capacity_to	./vec_str.c	/^void VStr_increase_capacity_to( VecStr *strv, int newCapacity )$/;"	f	signature:( VecStr *strv, int newCapacity )
VStr_increase_capacity_to	./vec_str.c	/^void VStr_increase_capacity_to( VecStr *strv, int newCapacity );$/;"	p	file:	signature:( VecStr *strv, int newCapacity )
VStr_ptr	./vec_str.c	/^char **VStr_ptr( VecStr *strv )$/;"	f	signature:( VecStr *strv )
VStr_ptr	./vec_str.h	/^char **VStr_ptr( VecStr *strv );$/;"	p	signature:( VecStr *strv )
VStr_pushBack	./vec_str.c	/^void VStr_pushBack( VecStr *strv, const char *str )$/;"	f	signature:( VecStr *strv, const char *str )
VStr_pushBack	./vec_str.h	/^void VStr_pushBack( VecStr *strv, const char *str );$/;"	p	signature:( VecStr *strv, const char *str )
VStr_readFrom	./vec_str.c	/^void VStr_readFrom( VecStr *strv, const char *fileName, const char ignoreEmptyLines )$/;"	f	signature:( VecStr *strv, const char *fileName, const char ignoreEmptyLines )
VStr_readFrom	./vec_str.h	/^void VStr_readFrom( VecStr *strv, const char *fileName, const char ignoreEmptyLines );$/;"	p	signature:( VecStr *strv, const char *fileName, const char ignoreEmptyLines )
VStr_resize	./vec_str.c	/^void VStr_resize( VecStr *strv, int newSize )$/;"	f	signature:( VecStr *strv, int newSize )
VStr_resize	./vec_str.h	/^void VStr_resize( VecStr *strv, int newSize );$/;"	p	signature:( VecStr *strv, int newSize )
VStr_set	./vec_str.c	/^void VStr_set( VecStr *strv, int pos, const char *str )$/;"	f	signature:( VecStr *strv, int pos, const char *str )
VStr_set	./vec_str.h	/^void VStr_set( VecStr *strv, int pos, const char *str );$/;"	p	signature:( VecStr *strv, int pos, const char *str )
VStr_size	./vec_str.c	/^int VStr_size( const VecStr *strv )$/;"	f	signature:( const VecStr *strv )
VStr_size	./vec_str.h	/^int VStr_size( const VecStr *strv );$/;"	p	signature:( const VecStr *strv )
VStr_writeTo	./vec_str.c	/^void VStr_writeTo( VecStr *strv, const char *fileName )$/;"	f	signature:( VecStr *strv, const char *fileName )
VStr_writeTo	./vec_str.h	/^void VStr_writeTo( VecStr *strv, const char *fileName );$/;"	p	signature:( VecStr *strv, const char *fileName )
VecChar	./vec_char.h	/^typedef struct _VecChar VecChar;$/;"	t	typeref:struct:_VecChar
VecDbl	./vec_double.h	/^typedef struct _VecDbl VecDbl;$/;"	t	typeref:struct:_VecDbl
VecInt	./vec_int.h	/^typedef struct _VecInt VecInt;$/;"	t	typeref:struct:_VecInt
VecStr	./vec_str.h	/^typedef struct _VecStr VecStr;$/;"	t	typeref:struct:_VecStr
W	./clique.c	/^    int *W;$/;"	m	struct:_CliqueSet	file:	access:public
W_DURATION	./ms_solver_mip.c	/^const double W_DURATION    =   1.0;$/;"	v
W_END_PROJECT	./ms_solver_mip.c	/^const double W_END_PROJECT = 500.0;$/;"	v
_CGraph	./cgraph.c	/^struct _CGraph {$/;"	s	file:
_CGraph::clqSet	./cgraph.c	/^    CliqueSet *clqSet;$/;"	m	struct:_CGraph	file:	access:public
_CGraph::degree	./cgraph.c	/^    unsigned long int *degree;$/;"	m	struct:_CGraph	file:	access:public
_CGraph::iv	./cgraph.c	/^    int *iv;  \/* incidence vector *\/$/;"	m	struct:_CGraph	file:	access:public
_CGraph::lowDegree	./cgraph.c	/^    unsigned long int lowDegree;$/;"	m	struct:_CGraph	file:	access:public
_CGraph::maxDegree	./cgraph.c	/^    unsigned long int maxDegree;$/;"	m	struct:_CGraph	file:	access:public
_CGraph::minDegree	./cgraph.c	/^    unsigned long int minDegree;$/;"	m	struct:_CGraph	file:	access:public
_CGraph::nd	./cgraph.c	/^    NodeDegree *nd;$/;"	m	struct:_CGraph	file:	access:public
_CGraph::nodeCliques	./cgraph.c	/^    IntSet *nodeCliques;  \/* all cliques in which a node appears *\/$/;"	m	struct:_CGraph	file:	access:public
_CGraph::nodeConflicts	./cgraph.c	/^    IntSet *nodeConflicts;$/;"	m	struct:_CGraph	file:	access:public
_CGraph::nodeNames	./cgraph.c	/^    char **nodeNames;$/;"	m	struct:_CGraph	file:	access:public
_CGraph::nodeSize	./cgraph.c	/^    int nodeSize;         \/* number of nodes considered *\/$/;"	m	struct:_CGraph	file:	access:public
_CGraph::origIdx	./cgraph.c	/^    int *origIdx; \/* if it is a preprocessed graph,$/;"	m	struct:_CGraph	file:	access:public
_CGraph::w	./cgraph.c	/^    int *w;$/;"	m	struct:_CGraph	file:	access:public
_CliqueEliteSet	./clique_elite_set.c	/^struct _CliqueEliteSet {$/;"	s	file:
_CliqueEliteSet::cs	./clique_elite_set.c	/^    const CliqueSet *cs;$/;"	m	struct:_CliqueEliteSet	file:	access:public
_CliqueEliteSet::nh	./clique_elite_set.c	/^    NodeHeap *nh;$/;"	m	struct:_CliqueEliteSet	file:	access:public
_CliqueEnumerator	./clique_enum.c	/^struct _CliqueEnumerator {$/;"	s	file:
_CliqueEnumerator::cgraph	./clique_enum.c	/^    const CGraph *cgraph;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueEnumerator::clique	./clique_enum.c	/^    int *clique;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueEnumerator::cliqueCap	./clique_enum.c	/^    int cliqueCap;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueEnumerator::clqSet	./clique_enum.c	/^    CliqueSet *clqSet;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueEnumerator::degreeCap	./clique_enum.c	/^    int degreeCap;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueEnumerator::depthCap	./clique_enum.c	/^    int depthCap;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueEnumerator::dfsNeighs	./clique_enum.c	/^    IntSet *dfsNeighs;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueEnumerator::dfsNodesLeft	./clique_enum.c	/^    IntSet *dfsNodesLeft;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueEnumerator::minW	./clique_enum.c	/^    int minW;$/;"	m	struct:_CliqueEnumerator	file:	access:public
_CliqueExtender	./clique_extender.c	/^struct _CliqueExtender {$/;"	s	file:
_CliqueExtender::candidates	./clique_extender.c	/^    int *candidates;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::candidatesCap	./clique_extender.c	/^    int candidatesCap;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::cgraph	./clique_extender.c	/^    const CGraph *cgraph;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::clqSet	./clique_extender.c	/^    CliqueSet *clqSet;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::costs	./clique_extender.c	/^    int *costs;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::costsCap	./clique_extender.c	/^    int costsCap;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::maxCandidates	./clique_extender.c	/^    int maxCandidates;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::maxClqGen	./clique_extender.c	/^    int maxClqGen;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::newClique	./clique_extender.c	/^    int *newClique;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::newCliqueSize	./clique_extender.c	/^    int newCliqueSize;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::nit	./clique_extender.c	/^    NeighIterator *nit;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueExtender::rcPercentage	./clique_extender.c	/^    double rcPercentage;$/;"	m	struct:_CliqueExtender	file:	access:public
_CliqueSeparation	./clique_separation.c	/^struct _CliqueSeparation {$/;"	s	file:
_CliqueSeparation::bk	./clique_separation.c	/^    void *bk;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::cgraph	./clique_separation.c	/^    const CGraph *cgraph;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::clqEnum	./clique_separation.c	/^    CliqueEnumerator *clqEnum;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::clqEnumNeighs	./clique_separation.c	/^    IntSet clqEnumNeighs;  \/* used in enumeration *\/$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::clqSet	./clique_separation.c	/^    CliqueSet *clqSet;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::clqSetOrig	./clique_separation.c	/^    CliqueSet *clqSetOrig;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::clqe	./clique_separation.c	/^    CliqueExtender *clqe;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::costs	./clique_separation.c	/^    int *costs;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::enumUsage	./clique_separation.c	/^    int enumUsage;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::extendCliques	./clique_separation.c	/^    int extendCliques;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::extended	./clique_separation.c	/^    char *extended;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::extendedCap	./clique_separation.c	/^    int extendedCap;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::hasCosts	./clique_separation.c	/^    char hasCosts;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::iv	./clique_separation.c	/^    int *iv;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::maxCliques	./clique_separation.c	/^    int maxCliques;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::maxPasses	./clique_separation.c	/^    int maxPasses;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::maxTimeBK	./clique_separation.c	/^    double maxTimeBK;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::minFrac	./clique_separation.c	/^    double minFrac;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::minViol	./clique_separation.c	/^    double minViol;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::nodeCap	./clique_separation.c	/^    int nodeCap;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSeparation::verbose	./clique_separation.c	/^    int verbose;$/;"	m	struct:_CliqueSeparation	file:	access:public
_CliqueSet	./clique.c	/^struct _CliqueSet {$/;"	s	file:
_CliqueSet::W	./clique.c	/^    int *W;$/;"	m	struct:_CliqueSet	file:	access:public
_CliqueSet::cliques	./clique.c	/^    IntSet *cliques;$/;"	m	struct:_CliqueSet	file:	access:public
_CliqueSet::cliquesCap	./clique.c	/^    int cliquesCap;$/;"	m	struct:_CliqueSet	file:	access:public
_CliqueSet::hash	./clique.c	/^    IntSet *hash;$/;"	m	struct:_CliqueSet	file:	access:public
_CliqueSet::numberOfCliques	./clique.c	/^    int numberOfCliques;$/;"	m	struct:_CliqueSet	file:	access:public
_CliqueSet::tmpClique	./clique.c	/^    IntSet tmpClique;$/;"	m	struct:_CliqueSet	file:	access:public
_CliqueSet::tmpCliqueOI	./clique.c	/^    IntSet tmpCliqueOI;$/;"	m	struct:_CliqueSet	file:	access:public
_CliqueSet::weightSum	./clique.c	/^    int weightSum;$/;"	m	struct:_CliqueSet	file:	access:public
_Constructive	./constructive.c	/^struct _Constructive {$/;"	s	file:
_Constructive::inst	./constructive.c	/^    const struct _Instance *inst;$/;"	m	struct:_Constructive	typeref:struct:_Constructive::_Instance	file:	access:public
_Constructive::it	./constructive.c	/^    int it;$/;"	m	struct:_Constructive	file:	access:public
_Constructive::lfa	./constructive.c	/^    int lfa; \/\/will be removed after find the best parameters.$/;"	m	struct:_Constructive	file:	access:public
_Constructive::solInitial	./constructive.c	/^    Solution *solInitial;$/;"	m	struct:_Constructive	file:	access:public
_CutPool	./cut_pool.c	/^struct _CutPool {$/;"	s	file:
_CutPool::hashCuts	./cut_pool.c	/^    VecInt **hashCuts;$/;"	m	struct:_CutPool	file:	access:public
_CutPool::inst	./cut_pool.c	/^    const Instance* inst;$/;"	m	struct:_CutPool	file:	access:public
_CutPool::nHash	./cut_pool.c	/^    int nHash;$/;"	m	struct:_CutPool	file:	access:public
_Dict_int	./dict_int.c	/^struct _Dict_int {$/;"	s	file:
_Dict_int::cont	./dict_int.c	/^    Dict_Bucket_int **cont;$/;"	m	struct:_Dict_int	file:	access:public
_Dict_int::defValue	./dict_int.c	/^    int defValue;$/;"	m	struct:_Dict_int	file:	access:public
_Dict_int::hashSize	./dict_int.c	/^    unsigned int hashSize;$/;"	m	struct:_Dict_int	file:	access:public
_Dict_int::keys	./dict_int.c	/^    VecStr *keys;$/;"	m	struct:_Dict_int	file:	access:public
_Dict_int::rowCap	./dict_int.c	/^    int *rowCap;$/;"	m	struct:_Dict_int	file:	access:public
_Dict_int::rowSize	./dict_int.c	/^    int *rowSize;$/;"	m	struct:_Dict_int	file:	access:public
_Grasp	./grasp.c	/^struct _Grasp {$/;"	s	file:
_Grasp::alpha	./grasp.c	/^    double alpha;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::alpha_choice	./grasp.c	/^    int alpha_choice;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::bestWeight	./grasp.c	/^    int bestWeight;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::candidates	./grasp.c	/^    int *candidates;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::cgraph	./grasp.c	/^    const CGraph *cgraph;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::clique	./grasp.c	/^    int *clique;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::cliqueSize	./grasp.c	/^    int cliqueSize;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::cliqueWeight	./grasp.c	/^    int cliqueWeight;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::clqSet	./grasp.c	/^    CliqueSet *clqSet;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::conflicts	./grasp.c	/^    int *conflicts;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::conflictsCap	./grasp.c	/^    int conflictsCap;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::difDegree	./grasp.c	/^    float difDegree;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::diffNodeW	./grasp.c	/^    float diffNodeW;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::evalNodesLeft	./grasp.c	/^    float *evalNodesLeft;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::iteration	./grasp.c	/^    int iteration;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::maxDegree	./grasp.c	/^    float maxDegree;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::maxNodeW	./grasp.c	/^    float maxNodeW;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::max_ni_it	./grasp.c	/^    int max_ni_it;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::max_seconds	./grasp.c	/^    int max_seconds;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::minDegree	./grasp.c	/^    float minDegree;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::minNodeW	./grasp.c	/^    float minNodeW;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::minW	./grasp.c	/^    int minW;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::nCandidates	./grasp.c	/^    int nCandidates;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::nNodesLeft	./grasp.c	/^    int nNodesLeft;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::nodesLeft	./grasp.c	/^    int *nodesLeft;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::ra_alphaIndex	./grasp.c	/^    int ra_alphaIndex;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::ra_count	./grasp.c	/^    int *ra_count;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::ra_p	./grasp.c	/^    double *ra_p;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::ra_q	./grasp.c	/^    double *ra_q;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::ra_roullete	./grasp.c	/^    int *ra_roullete;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::ra_roullete_size	./grasp.c	/^    int ra_roullete_size;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::ra_score	./grasp.c	/^    int *ra_score;    \/* score: sumation of weights in iterations where cliqueSet is updated$/;"	m	struct:_Grasp	file:	access:public
_Grasp::w	./grasp.c	/^    const int *w;$/;"	m	struct:_Grasp	file:	access:public
_Grasp::worstWeight	./grasp.c	/^    int worstWeight;$/;"	m	struct:_Grasp	file:	access:public
_ILS	./ils.c	/^struct _ILS {$/;"	s	file:
_ILS::inst	./ils.c	/^    const struct _Instance *inst;$/;"	m	struct:_ILS	typeref:struct:_ILS::_Instance	file:	access:public
_ILS::neighborhood	./ils.c	/^    Neighborhood *neighborhood;$/;"	m	struct:_ILS	file:	access:public
_ILS::solIni	./ils.c	/^    Solution *solIni;$/;"	m	struct:_ILS	file:	access:public
_Instance	./instance.c	/^struct _Instance {$/;"	s	file:
_Instance::capN	./instance.c	/^    int *capN;$/;"	m	struct:_Instance	file:	access:public
_Instance::capR	./instance.c	/^    int *capR;$/;"	m	struct:_Instance	file:	access:public
_Instance::idxIniResNProj	./instance.c	/^    int *idxIniResNProj;$/;"	m	struct:_Instance	file:	access:public
_Instance::jobs	./instance.c	/^    Job *jobs;$/;"	m	struct:_Instance	file:	access:public
_Instance::matMaxD	./instance.c	/^    int **matMaxD;$/;"	m	struct:_Instance	file:	access:public
_Instance::matMaxDJM	./instance.c	/^    int ***matMaxDJM;$/;"	m	struct:_Instance	file:	access:public
_Instance::maxDurationPath	./instance.c	/^    int **maxDurationPath;$/;"	m	struct:_Instance	file:	access:public
_Instance::maxDurationPathInterMode	./instance.c	/^    int ****maxDurationPathInterMode;$/;"	m	struct:_Instance	file:	access:public
_Instance::nJobs	./instance.c	/^    int nJobs;$/;"	m	struct:_Instance	file:	access:public
_Instance::nMaxModes	./instance.c	/^    int nMaxModes;$/;"	m	struct:_Instance	file:	access:public
_Instance::nProjects	./instance.c	/^    int nProjects;$/;"	m	struct:_Instance	file:	access:public
_Instance::nResN	./instance.c	/^    int nResN;$/;"	m	struct:_Instance	file:	access:public
_Instance::nResR	./instance.c	/^    int nResR;$/;"	m	struct:_Instance	file:	access:public
_Instance::nResRGlobal	./instance.c	/^    int nResRGlobal;$/;"	m	struct:_Instance	file:	access:public
_Instance::paths	./instance.c	/^    VecInt **paths;$/;"	m	struct:_Instance	file:	access:public
_Instance::projects	./instance.c	/^    Project *projects;$/;"	m	struct:_Instance	file:	access:public
_Instance::sumTPD	./instance.c	/^    int sumTPD;$/;"	m	struct:_Instance	file:	access:public
_Job	./instance.c	/^struct _Job {$/;"	s	file:
_Job::est	./instance.c	/^    int est;$/;"	m	struct:_Job	file:	access:public
_Job::hasIndPred	./instance.c	/^    int *hasIndPred;$/;"	m	struct:_Job	file:	access:public
_Job::hasIndSucc	./instance.c	/^    int *hasIndSucc;$/;"	m	struct:_Job	file:	access:public
_Job::hasPred	./instance.c	/^    int *hasPred;$/;"	m	struct:_Job	file:	access:public
_Job::hasSucc	./instance.c	/^    int *hasSucc;$/;"	m	struct:_Job	file:	access:public
_Job::idxModesSort	./instance.c	/^    IntPair *idxModesSort;$/;"	m	struct:_Job	file:	access:public
_Job::idxOnProject	./instance.c	/^    int idxOnProject;$/;"	m	struct:_Job	file:	access:public
_Job::idxProject	./instance.c	/^    int idxProject;$/;"	m	struct:_Job	file:	access:public
_Job::index	./instance.c	/^    int index;$/;"	m	struct:_Job	file:	access:public
_Job::maxDuration	./instance.c	/^    int maxDuration;$/;"	m	struct:_Job	file:	access:public
_Job::minDuration	./instance.c	/^    int minDuration;$/;"	m	struct:_Job	file:	access:public
_Job::modes	./instance.c	/^    Mode *modes;$/;"	m	struct:_Job	file:	access:public
_Job::nInfeasModes	./instance.c	/^    int nInfeasModes;$/;"	m	struct:_Job	file:	access:public
_Job::nModes	./instance.c	/^    int nModes;$/;"	m	struct:_Job	file:	access:public
_Job::nPred	./instance.c	/^    int nPred;$/;"	m	struct:_Job	file:	access:public
_Job::nSucc	./instance.c	/^    int nSucc;$/;"	m	struct:_Job	file:	access:public
_Job::origJob	./instance.c	/^    const struct _Job *origJob;$/;"	m	struct:_Job	typeref:struct:_Job::_Job	file:	access:public
_Job::pred	./instance.c	/^    int *pred;$/;"	m	struct:_Job	file:	access:public
_Job::succ	./instance.c	/^    int *succ;$/;"	m	struct:_Job	file:	access:public
_LAHC	./lahc.c	/^struct _LAHC {$/;"	s	file:
_LAHC::bestSol	./lahc.c	/^    Solution *bestSol;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::divResJob	./lahc.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::divResMode	./lahc.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::divTransJob	./lahc.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::divTransMode	./lahc.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::f	./lahc.c	/^    Cost *f;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::iniSol	./lahc.c	/^    Solution *iniSol;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::inst	./lahc.c	/^    const struct _Instance *inst;$/;"	m	struct:_LAHC	typeref:struct:_LAHC::_Instance	file:	access:public
_LAHC::itUpdate	./lahc.c	/^    int itUpdate;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::la	./lahc.c	/^    LearningAutomata *la;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::learning	./lahc.c	/^    int learning;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::lfa	./lahc.c	/^    int lfa;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nChangesModes	./lahc.c	/^    int *nChangesModes;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nChangesSequence	./lahc.c	/^    int *nChangesSequence;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nCostList	./lahc.c	/^    int nCostList;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nDiversification	./lahc.c	/^    int nDiversification;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nStayDiversification	./lahc.c	/^    int nStayDiversification;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nThread	./lahc.c	/^    int nThread;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nTimesJobOnModes	./lahc.c	/^    int **nTimesJobOnModes;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nTimesJobOnSequence	./lahc.c	/^    int **nTimesJobOnSequence;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::nWOImprove	./lahc.c	/^    int nWOImprove;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::online	./lahc.c	/^    int online;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::parallel	./lahc.c	/^    int parallel;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::penaltySW	./lahc.c	/^    float penaltySW;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::perc	./lahc.c	/^    double perc, percRS;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::percRS	./lahc.c	/^    double perc, percRS;$/;"	m	struct:_LAHC	file:	access:public
_LAHC::sideway	./lahc.c	/^    int sideway;$/;"	m	struct:_LAHC	file:	access:public
_LearningAutomata	./learning.c	/^struct _LearningAutomata {$/;"	s	file:
_LearningAutomata::initialProbabilities	./learning.c	/^    double *initialProbabilities, *probabilities;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::iters	./learning.c	/^    int iters;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::lastNSelections	./learning.c	/^    ListInt *lastNSelections;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::lastSelection	./learning.c	/^    int lastSelection;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::learningRate	./learning.c	/^    double learningRate, learningRate2;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::learningRate2	./learning.c	/^    double learningRate, learningRate2;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::nProbabilities	./learning.c	/^    int nProbabilities;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::probabilities	./learning.c	/^    double *initialProbabilities, *probabilities;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::resetInterval	./learning.c	/^    int  resetInterval;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::rewardedActions	./learning.c	/^    int rewardedActions;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::sideway	./learning.c	/^    int sideway;$/;"	m	struct:_LearningAutomata	file:	access:public
_LearningAutomata::timePrint	./learning.c	/^    int timePrint;$/;"	m	struct:_LearningAutomata	file:	access:public
_ListInt	./list_int.c	/^struct _ListInt {$/;"	s	file:
_ListInt::head	./list_int.c	/^    Node *head, *last;$/;"	m	struct:_ListInt	file:	access:public
_ListInt::last	./list_int.c	/^    Node *head, *last;$/;"	m	struct:_ListInt	file:	access:public
_ListInt::size	./list_int.c	/^    int size;$/;"	m	struct:_ListInt	file:	access:public
_LongestComplPath	./long_compl_path.c	/^struct _LongestComplPath {$/;"	s	file:
_LongestComplPath::inst	./long_compl_path.c	/^    const Instance *inst;$/;"	m	struct:_LongestComplPath	file:	access:public
_LongestComplPath::lp	./long_compl_path.c	/^    int *lp;$/;"	m	struct:_LongestComplPath	file:	access:public
_LongestComplPath::tlp	./long_compl_path.c	/^    int *tlp;$/;"	m	struct:_LongestComplPath	file:	access:public
_LongestComplPath::topSort	./long_compl_path.c	/^    TopSort *topSort;$/;"	m	struct:_LongestComplPath	file:	access:public
_MIPCompact	./mip_compact.c	/^struct _MIPCompact {$/;"	s	file:
_MIPCompact::bestSol	./mip_compact.c	/^    Solution *bestSol;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::coefResNR	./mip_compact.c	/^    VecDbl **coefResNR;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::coefResR	./mip_compact.c	/^    VecDbl ***coefResR;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::continuous	./mip_compact.c	/^    int continuous;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::cutCLIQUE	./mip_compact.c	/^    int cutCLIQUE;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::cutDefaultCBC	./mip_compact.c	/^    int cutDefaultCBC;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::cutP	./mip_compact.c	/^    CutPool *cutP;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::cutPrec	./mip_compact.c	/^    int cutPrec;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::cutRR	./mip_compact.c	/^    int cutRR;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::dIdx	./mip_compact.c	/^    int *dIdx;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::dJ	./mip_compact.c	/^    VecInt **dJ;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::dnames	./mip_compact.c	/^    DictInt *dnames;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::hasIniSol	./mip_compact.c	/^    char hasIniSol;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::hasSolution	./mip_compact.c	/^    char hasSolution;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::idxFirstJob	./mip_compact.c	/^    int idxFirstJob;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::idxProj	./mip_compact.c	/^    int idxProj;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::idxResNR	./mip_compact.c	/^    VecInt **idxResNR;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::idxResR	./mip_compact.c	/^    VecInt ***idxResR;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::inst	./mip_compact.c	/^    const Instance *inst;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::jIdx	./mip_compact.c	/^    VecInt **jIdx;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::jmIdx	./mip_compact.c	/^    VecInt ***jmIdx;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::jmtFixed	./mip_compact.c	/^    IntTriple *jmtFixed;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::jmtFractional	./mip_compact.c	/^    IntTriple *jmtFractional;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::jmtIntegral	./mip_compact.c	/^    IntTriple *jmtIntegral;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::jobFixed	./mip_compact.c	/^    int *jobFixed;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::jobIntegral	./mip_compact.c	/^    int *jobIntegral;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::jtIdx	./mip_compact.c	/^    VecInt ***jtIdx;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::lifting	./mip_compact.c	/^    int lifting;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::maxModes	./mip_compact.c	/^    int maxModes;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::maxNode	./mip_compact.c	/^    int maxNode;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::maxReducedCost	./mip_compact.c	/^    double maxReducedCost;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::maxT	./mip_compact.c	/^    int maxT;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::maxTJ	./mip_compact.c	/^    int *maxTJ;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::maxTJM	./mip_compact.c	/^    int **maxTJM;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::maxcuts	./mip_compact.c	/^    int maxcuts;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::minRoundUp	./mip_compact.c	/^    float minRoundUp;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::mip	./mip_compact.c	/^    LinearProgram *mip;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::msm	./mip_compact.c	/^    MSM_Solver *msm;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::nFixed	./mip_compact.c	/^    int nFixed;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::nFractional	./mip_compact.c	/^    int nFractional;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::nIntegral	./mip_compact.c	/^    int nIntegral;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::nJobs	./mip_compact.c	/^    int nJobs;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::project	./mip_compact.c	/^    const Project *project;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::res	./mip_compact.c	/^    Results *res;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::roundCuts	./mip_compact.c	/^    int *roundCuts;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::slack	./mip_compact.c	/^    double slack;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::sol	./mip_compact.c	/^    Solution *sol;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::tpd	./mip_compact.c	/^    double tpd;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::tpdSum	./mip_compact.c	/^    int tpdSum;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::uIdx	./mip_compact.c	/^    int **uIdx;$/;"	m	struct:_MIPCompact	file:	access:public
_MIPCompact::yIdx	./mip_compact.c	/^    int *yIdx;$/;"	m	struct:_MIPCompact	file:	access:public
_MSM_Solver	./ms_solver_mip.c	/^struct _MSM_Solver {$/;"	s	file:
_MSM_Solver::dIdx	./ms_solver_mip.c	/^    int *dIdx;$/;"	m	struct:_MSM_Solver	file:	access:public
_MSM_Solver::firstJob	./ms_solver_mip.c	/^    int firstJob;$/;"	m	struct:_MSM_Solver	file:	access:public
_MSM_Solver::inst	./ms_solver_mip.c	/^    const Instance *inst;$/;"	m	struct:_MSM_Solver	file:	access:public
_MSM_Solver::lastJob	./ms_solver_mip.c	/^    int lastJob;$/;"	m	struct:_MSM_Solver	file:	access:public
_MSM_Solver::mip	./ms_solver_mip.c	/^    LinearProgram *mip;$/;"	m	struct:_MSM_Solver	file:	access:public
_MSM_Solver::modeSet	./ms_solver_mip.c	/^    ModeSet *modeSet;$/;"	m	struct:_MSM_Solver	file:	access:public
_MSM_Solver::sIdx	./ms_solver_mip.c	/^    int **sIdx;$/;"	m	struct:_MSM_Solver	file:	access:public
_MSM_Solver::yIdx	./ms_solver_mip.c	/^    int *yIdx; \/* index of variable of job i *\/$/;"	m	struct:_MSM_Solver	file:	access:public
_MSSolverLAHC	./ms_solver_lahc.c	/^struct _MSSolverLAHC {$/;"	s	file:
_MSSolverLAHC::bestModes	./ms_solver_lahc.c	/^    ModeSet *bestModes;$/;"	m	struct:_MSSolverLAHC	file:	access:public
_MSSolverLAHC::currentModes	./ms_solver_lahc.c	/^    ModeSet *currentModes;$/;"	m	struct:_MSSolverLAHC	file:	access:public
_MSSolverLAHC::f	./ms_solver_lahc.c	/^    Cost *f;$/;"	m	struct:_MSSolverLAHC	file:	access:public
_MSSolverLAHC::inst	./ms_solver_lahc.c	/^    const struct _Instance *inst;$/;"	m	struct:_MSSolverLAHC	typeref:struct:_MSSolverLAHC::_Instance	file:	access:public
_MSSolverLAHC::lfa	./ms_solver_lahc.c	/^    int lfa;$/;"	m	struct:_MSSolverLAHC	file:	access:public
_MSSolverLAHC::neighborhood	./ms_solver_lahc.c	/^    Neighborhood *neighborhood;$/;"	m	struct:_MSSolverLAHC	file:	access:public
_Mode	./instance.c	/^struct _Mode {$/;"	s	file:
_Mode::duration	./instance.c	/^    int duration;$/;"	m	struct:_Mode	file:	access:public
_Mode::idxResN	./instance.c	/^    int *idxResN;$/;"	m	struct:_Mode	file:	access:public
_Mode::idxResR	./instance.c	/^    int *idxResR;$/;"	m	struct:_Mode	file:	access:public
_Mode::index	./instance.c	/^    int index;$/;"	m	struct:_Mode	file:	access:public
_Mode::nResN	./instance.c	/^    int nResN;$/;"	m	struct:_Mode	file:	access:public
_Mode::nResR	./instance.c	/^    int nResR;$/;"	m	struct:_Mode	file:	access:public
_Mode::useResN	./instance.c	/^    int *useResN;$/;"	m	struct:_Mode	file:	access:public
_Mode::useResR	./instance.c	/^    int *useResR;$/;"	m	struct:_Mode	file:	access:public
_ModeSet	./mode_set.c	/^struct _ModeSet {$/;"	s	file:
_ModeSet::cost	./mode_set.c	/^    Cost cost;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::firstJob	./mode_set.c	/^    int firstJob;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::infeasibility	./mode_set.c	/^    int infeasibility;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::inst	./mode_set.c	/^    const struct _Instance *inst;$/;"	m	struct:_ModeSet	typeref:struct:_ModeSet::_Instance	file:	access:public
_ModeSet::isEmpty	./mode_set.c	/^    int isEmpty;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::lastJob	./mode_set.c	/^    int lastJob;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::modes	./mode_set.c	/^    int *modes;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::nJobs	./mode_set.c	/^    int nJobs;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::nResN	./mode_set.c	/^    int nResN;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::startResN	./mode_set.c	/^    int startResN;$/;"	m	struct:_ModeSet	file:	access:public
_ModeSet::usageNonRenewable	./mode_set.c	/^    int *usageNonRenewable;$/;"	m	struct:_ModeSet	file:	access:public
_NeighIterator	./cgraph.c	/^struct _NeighIterator {$/;"	s	file:
_NeighIterator::bhv	./cgraph.c	/^    NodeCost *bhv;$/;"	m	struct:_NeighIterator	file:	access:public
_NeighIterator::bhvCap	./cgraph.c	/^    int bhvCap;$/;"	m	struct:_NeighIterator	file:	access:public
_NeighIterator::bhvSize	./cgraph.c	/^    int bhvSize;$/;"	m	struct:_NeighIterator	file:	access:public
_NeighIterator::node	./cgraph.c	/^    int node;$/;"	m	struct:_NeighIterator	file:	access:public
_NeighIterator::previousNode	./cgraph.c	/^    int previousNode;$/;"	m	struct:_NeighIterator	file:	access:public
_Neighborhood	./neighborhood.c	/^struct _Neighborhood {$/;"	s	file:
_Neighborhood::EQ	./neighborhood.c	/^    long double *EQ;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::FE	./neighborhood.c	/^    long double *FE;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::FI	./neighborhood.c	/^    long double *FI;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::I	./neighborhood.c	/^    long double *I;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::PE	./neighborhood.c	/^    long double *PE;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::PI	./neighborhood.c	/^    long double *PI;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::TE	./neighborhood.c	/^    long double *TE;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::TI	./neighborhood.c	/^    long double *TI;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::TIV	./neighborhood.c	/^    long double *TIV;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::assortment	./neighborhood.c	/^    int *assortment;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::contLastJ	./neighborhood.c	/^    int contLastJ;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::inst	./neighborhood.c	/^    const struct _Instance *inst;$/;"	m	struct:_Neighborhood	typeref:struct:_Neighborhood::_Instance	file:	access:public
_Neighborhood::intensity	./neighborhood.c	/^    long double *intensity;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::intensityAux	./neighborhood.c	/^    long double *intensityAux;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::intervalE	./neighborhood.c	/^    long double intervalE;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::intervalI	./neighborhood.c	/^    long double intervalI;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::it	./neighborhood.c	/^    int it;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::lastJ	./neighborhood.c	/^    int *lastJ;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::lastN	./neighborhood.c	/^    int lastN;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::learning	./neighborhood.c	/^    int learning;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::log	./neighborhood.c	/^    int log;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::maxFE	./neighborhood.c	/^    long double maxFE;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::maxFI	./neighborhood.c	/^    long double maxFI;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::minFE	./neighborhood.c	/^    long double minFE;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::minFI	./neighborhood.c	/^    long double minFI;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::moveSW	./neighborhood.c	/^    int moveSW;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::nLastJModify	./neighborhood.c	/^    int *nLastJModify;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::nNeighborhood	./neighborhood.c	/^    int nNeighborhood;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::nStages	./neighborhood.c	/^    int nStages;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::nThread	./neighborhood.c	/^    int nThread;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::neighborMaxK	./neighborhood.c	/^    int *neighborMaxK;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::neighborMinK	./neighborhood.c	/^    int *neighborMinK;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::newModes	./neighborhood.c	/^    int *newModes;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::normFE	./neighborhood.c	/^    long double *normFE;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::normFI	./neighborhood.c	/^    long double *normFI;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::online	./neighborhood.c	/^    int online;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::penaltyChangeMode	./neighborhood.c	/^    int penaltyChangeMode;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::posNLastJModify	./neighborhood.c	/^    int *posNLastJModify;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::sw	./neighborhood.c	/^    int sw;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::timePrint	./neighborhood.c	/^    int timePrint;$/;"	m	struct:_Neighborhood	file:	access:public
_Neighborhood::uniform	./neighborhood.c	/^    int uniform;$/;"	m	struct:_Neighborhood	file:	access:public
_Node	./list_int.c	/^typedef struct _Node {$/;"	s	file:
_Node::next	./list_int.c	/^    struct _Node *next;$/;"	m	struct:_Node	typeref:struct:_Node::_Node	file:	access:public
_Node::value	./list_int.c	/^    int value;$/;"	m	struct:_Node	file:	access:public
_NodeHeap	./node_heap.c	/^struct _NodeHeap {$/;"	s	file:
_NodeHeap::INFTY	./node_heap.c	/^    int INFTY;$/;"	m	struct:_NodeHeap	file:	access:public
_NodeHeap::nodes	./node_heap.c	/^    int nodes;$/;"	m	struct:_NodeHeap	file:	access:public
_NodeHeap::pos	./node_heap.c	/^    int *pos;$/;"	m	struct:_NodeHeap	file:	access:public
_NodeHeap::pq	./node_heap.c	/^    NodeCost *pq;$/;"	m	struct:_NodeHeap	file:	access:public
_OddHoleSep	./oddhs.c	/^struct _OddHoleSep {$/;"	s	file:
_OddHoleSep::cgraph	./oddhs.c	/^    const CGraph *cgraph;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::clqSet	./oddhs.c	/^    CliqueSet *clqSet;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohCapIdx	./oddhs.c	/^    int dohCapIdx;      \/\/ capacity for odd hole elements$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohCapOH	./oddhs.c	/^    int dohCapOH;       \/\/ capacity for odd holes$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohCapWCIdx	./oddhs.c	/^    int dohCapWCIdx;    \/\/ capacity for odd hole wheel centers$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohCount	./oddhs.c	/^    int dohCount;       \/\/ number of stored odd holes$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohIV	./oddhs.c	/^    char *dohIV;         \/\/ incidence vector for variables considered here$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohIVCap	./oddhs.c	/^    int dohIVCap;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohIdx	./oddhs.c	/^    int *dohIdx;        \/\/ indexes of all odd holes$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohStart	./oddhs.c	/^    int *dohStart;      \/\/ start indexes for the i-th odd hole$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohWCIdx	./oddhs.c	/^    int *dohWCIdx;      \/\/ indexes of all wheel centers$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::dohWCStart	./oddhs.c	/^    int *dohWCStart;    \/\/ wheel center starts$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::icaActivity	./oddhs.c	/^    int *icaActivity; \/\/ mapping of the fractional solution value to an$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::icaCapacity	./oddhs.c	/^    int icaCapacity;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::icaCount	./oddhs.c	/^    int icaCount;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::icaIdx	./oddhs.c	/^    int *icaIdx;      \/\/ original index$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::ivreCap	./oddhs.c	/^    int ivreCap;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::ivreIdx	./oddhs.c	/^    int *ivreIdx;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::nheap	./oddhs.c	/^    NodeHeap *nheap;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spArcDist	./oddhs.c	/^    int *spArcDist;  \/\/ distance for each arc$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spArcStart	./oddhs.c	/^    int *spArcStart; \/\/ start index for arcs of each node$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spArcTo	./oddhs.c	/^    int *spArcTo;    \/\/ destination of each arc$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spArcs	./oddhs.c	/^    int spArcs;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spArcsCap	./oddhs.c	/^    int spArcsCap;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spNodeCap	./oddhs.c	/^    int spNodeCap;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spNodes	./oddhs.c	/^    int spNodes;$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spOrigPathIdx	./oddhs.c	/^    int *spOrigPathIdx;      \/\/ to store discovered shortest path$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spPathIdx	./oddhs.c	/^    int *spPathIdx;      \/\/ to store discovered shortest path$/;"	m	struct:_OddHoleSep	file:	access:public
_OddHoleSep::spf	./oddhs.c	/^    ShortestPathsFinder *spf;$/;"	m	struct:_OddHoleSep	file:	access:public
_ProjDecomp	./proj_decomp.c	/^struct _ProjDecomp {$/;"	s	file:
_ProjDecomp::idxRowCap	./proj_decomp.c	/^    int **idxRowCap;$/;"	m	struct:_ProjDecomp	file:	access:public
_ProjDecomp::inst	./proj_decomp.c	/^    const Instance *inst;$/;"	m	struct:_ProjDecomp	file:	access:public
_ProjDecomp::master	./proj_decomp.c	/^    LinearProgram *master;$/;"	m	struct:_ProjDecomp	file:	access:public
_ProjDecomp::maxTime	./proj_decomp.c	/^    int maxTime;$/;"	m	struct:_ProjDecomp	file:	access:public
_ProjDecomp::mipP	./proj_decomp.c	/^    MIPProject **mipP;$/;"	m	struct:_ProjDecomp	file:	access:public
_ProjDecomp::tpdSum	./proj_decomp.c	/^    int tpdSum;$/;"	m	struct:_ProjDecomp	file:	access:public
_Project	./instance.c	/^struct _Project {$/;"	s	file:
_Project::criticalPath	./instance.c	/^    int criticalPath;$/;"	m	struct:_Project	file:	access:public
_Project::dueDate	./instance.c	/^    int dueDate;$/;"	m	struct:_Project	file:	access:public
_Project::idxFirstJob	./instance.c	/^    int idxFirstJob;$/;"	m	struct:_Project	file:	access:public
_Project::index	./instance.c	/^    int index;$/;"	m	struct:_Project	file:	access:public
_Project::jobs	./instance.c	/^    Job *jobs;$/;"	m	struct:_Project	file:	access:public
_Project::mpmTime	./instance.c	/^    int mpmTime;$/;"	m	struct:_Project	file:	access:public
_Project::nJobs	./instance.c	/^    int nJobs;$/;"	m	struct:_Project	file:	access:public
_Project::releaseDate	./instance.c	/^    int releaseDate;$/;"	m	struct:_Project	file:	access:public
_Project::tardCost	./instance.c	/^    int tardCost;$/;"	m	struct:_Project	file:	access:public
_RRUsage	./rrusage.c	/^struct _RRUsage {$/;"	s	file:
_RRUsage::inst	./rrusage.c	/^    const struct _Instance *inst;$/;"	m	struct:_RRUsage	typeref:struct:_RRUsage::_Instance	file:	access:public
_RRUsage::nResR	./rrusage.c	/^    int nResR;$/;"	m	struct:_RRUsage	file:	access:public
_RRUsage::tsCap	./rrusage.c	/^    int tsCap;$/;"	m	struct:_RRUsage	file:	access:public
_RRUsage::tsUsed	./rrusage.c	/^    int tsUsed;$/;"	m	struct:_RRUsage	file:	access:public
_RRUsage::useR	./rrusage.c	/^    int **useR;$/;"	m	struct:_RRUsage	file:	access:public
_Results	./results.c	/^struct _Results {$/;"	s	file:
_Results::maxViol	./results.c	/^    double **maxViol; \/\/para cada round e para cada tipo de corte a maior violação;$/;"	m	struct:_Results	file:	access:public
_Results::maxViolCut	./results.c	/^    IntDblPair ***maxViolCut; \/\/para cada round e para cada tipo o corte com maior violação (elementos)$/;"	m	struct:_Results	file:	access:public
_Results::minViol	./results.c	/^    double **minViol; \/\/para cada round e para cada tipo de corte a menor violação;$/;"	m	struct:_Results	file:	access:public
_Results::minViolCut	./results.c	/^    IntDblPair ***minViolCut; \/\/para cada round e para cada tipo o corte com maior violação (elementos)$/;"	m	struct:_Results	file:	access:public
_Results::nCutsTotal	./results.c	/^    int **nCutsTotal; \/\/para cada round e para cada tipo o numero total de cortes$/;"	m	struct:_Results	file:	access:public
_Results::nElementsCuts	./results.c	/^    int **nElementsCuts;     \/\/ para cada round para cada tipo o número total de elementos (soma dos elementos)$/;"	m	struct:_Results	file:	access:public
_Results::nElementsMaxViol	./results.c	/^    int **nElementsMaxViol; \/\/ para cada round e para cada tipo o número de elementos da maior violação.$/;"	m	struct:_Results	file:	access:public
_Results::nElementsMinViol	./results.c	/^    int **nElementsMinViol; \/\/ para cada round e para cada tipo o número de elementos da maior violação.$/;"	m	struct:_Results	file:	access:public
_Results::nMaxElementsConf	./results.c	/^    int *nMaxElementsConf; \/\/tamanho do maior conflito encontrado, ou seja, maior número de elementos.$/;"	m	struct:_Results	file:	access:public
_Results::nMaxElementsCuts	./results.c	/^    int **nMaxElementsCuts; \/\/para cada round e para cada tipo o maior corte (número de elementos)$/;"	m	struct:_Results	file:	access:public
_Results::nMinElementsCuts	./results.c	/^    int **nMinElementsCuts; \/\/para cada round e para cada tipo o menor corte (número de elementos)$/;"	m	struct:_Results	file:	access:public
_Results::nRounds	./results.c	/^    int nRounds; \/\/número de rounds para encontrar cortes$/;"	m	struct:_Results	file:	access:public
_Results::nSumAllElementsConf	./results.c	/^    int *nSumAllElementsConf; \/\/número total de elementos dos conflitos em todas as rodadas$/;"	m	struct:_Results	file:	access:public
_Results::nSumAllVarWithConf	./results.c	/^    int *nSumAllVarWithConf; \/\/ número total de variáveis com conflitos em todas as rodadas$/;"	m	struct:_Results	file:	access:public
_Results::sumViol	./results.c	/^    double **sumViol; \/\/para cada round e para cada tipo de corte a soma das violações;$/;"	m	struct:_Results	file:	access:public
_Results::tCutsTotal	./results.c	/^    double **tCutsTotal; \/\/total de tempo para gerar os cortes cortes em cada round para cada tipo de corte$/;"	m	struct:_Results	file:	access:public
_SA	./sa.c	/^struct _SA {$/;"	s	file:
_SA::SAmax	./sa.c	/^    int SAmax;$/;"	m	struct:_SA	file:	access:public
_SA::T	./sa.c	/^    int T;$/;"	m	struct:_SA	file:	access:public
_SA::alpha	./sa.c	/^    double alpha;$/;"	m	struct:_SA	file:	access:public
_SA::bestSol	./sa.c	/^    Solution *bestSol;$/;"	m	struct:_SA	file:	access:public
_SA::iniSol	./sa.c	/^    Solution *iniSol;$/;"	m	struct:_SA	file:	access:public
_SA::inst	./sa.c	/^    const struct _Instance *inst;$/;"	m	struct:_SA	typeref:struct:_SA::_Instance	file:	access:public
_SA::la	./sa.c	/^    LearningAutomata *la;$/;"	m	struct:_SA	file:	access:public
_SA::learning	./sa.c	/^    int learning;$/;"	m	struct:_SA	file:	access:public
_SA::nChangesModes	./sa.c	/^    int *nChangesModes;$/;"	m	struct:_SA	file:	access:public
_SA::nTimesJobOnModes	./sa.c	/^    int **nTimesJobOnModes;$/;"	m	struct:_SA	file:	access:public
_ShortestPathsFinder	./spaths.c	/^struct _ShortestPathsFinder {$/;"	s	file:
_ShortestPathsFinder::arcs	./spaths.c	/^    int arcs;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::caparcs	./spaths.c	/^    int caparcs;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::capnodes	./spaths.c	/^    int capnodes;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::dist	./spaths.c	/^    int *dist;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::fwCapArcs	./spaths.c	/^    int fwCapArcs;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::fwCapNodes	./spaths.c	/^    int fwCapNodes;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::fwDist	./spaths.c	/^    int **fwDist;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::fwPrev	./spaths.c	/^    int **fwPrev;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::neighs	./spaths.c	/^    Neighbor *neighs;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::nh	./spaths.c	/^    NodeHeap *nh;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::nodes	./spaths.c	/^    int nodes;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::path	./spaths.c	/^    int *path;     \/\/ temporary storage for path$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::previous	./spaths.c	/^    int *previous;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_ShortestPathsFinder::startn	./spaths.c	/^    Neighbor **startn;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
_Solution	./solution.c	/^struct _Solution {$/;"	s	file:
_Solution::TMS	./solution.c	/^    Cost TMS;$/;"	m	struct:_Solution	file:	access:public
_Solution::TPD	./solution.c	/^    Cost TPD;$/;"	m	struct:_Solution	file:	access:public
_Solution::cost	./solution.c	/^    Cost cost;$/;"	m	struct:_Solution	file:	access:public
_Solution::inst	./solution.c	/^    const struct _Instance *inst;$/;"	m	struct:_Solution	typeref:struct:_Solution::_Instance	file:	access:public
_Solution::minT	./solution.c	/^    int *minT;$/;"	m	struct:_Solution	file:	access:public
_Solution::modeSet	./solution.c	/^    struct _ModeSet *modeSet;$/;"	m	struct:_Solution	typeref:struct:_Solution::_ModeSet	file:	access:public
_Solution::origMinT	./solution.c	/^    int *origMinT;$/;"	m	struct:_Solution	file:	access:public
_Solution::posJobs	./solution.c	/^    int *posJobs;$/;"	m	struct:_Solution	file:	access:public
_Solution::priorities	./solution.c	/^    NodeHeap *priorities;$/;"	m	struct:_Solution	file:	access:public
_Solution::rru	./solution.c	/^    RRUsage *rru;$/;"	m	struct:_Solution	file:	access:public
_Solution::sequence	./solution.c	/^    int *sequence;$/;"	m	struct:_Solution	file:	access:public
_Solution::solutionHash	./solution.c	/^    unsigned int solutionHash;$/;"	m	struct:_Solution	file:	access:public
_Solution::startJobs	./solution.c	/^    int *startJobs;$/;"	m	struct:_Solution	file:	access:public
_Stack	./stack.c	/^struct _Stack {$/;"	s	file:
_Stack::capacity	./stack.c	/^    int capacity;$/;"	m	struct:_Stack	file:	access:public
_Stack::item	./stack.c	/^    int *item;$/;"	m	struct:_Stack	file:	access:public
_Stack::top	./stack.c	/^    int top;$/;"	m	struct:_Stack	file:	access:public
_Test	./test.c	/^struct _Test {$/;"	s	file:
_Test::EQ	./test.c	/^    long double **EQ;$/;"	m	struct:_Test	file:	access:public
_Test::FE	./test.c	/^    long double **FE;$/;"	m	struct:_Test	file:	access:public
_Test::FI	./test.c	/^    long double **FI;$/;"	m	struct:_Test	file:	access:public
_Test::I	./test.c	/^    long double **I;$/;"	m	struct:_Test	file:	access:public
_Test::PFE	./test.c	/^    long double **PFE;$/;"	m	struct:_Test	file:	access:public
_Test::PFI	./test.c	/^    long double **PFI;$/;"	m	struct:_Test	file:	access:public
_Test::SAmax	./test.c	/^    int SAmax;$/;"	m	struct:_Test	file:	access:public
_Test::T	./test.c	/^    int T;$/;"	m	struct:_Test	file:	access:public
_Test::TE	./test.c	/^    long double **TE;$/;"	m	struct:_Test	file:	access:public
_Test::TI	./test.c	/^    long double **TI;$/;"	m	struct:_Test	file:	access:public
_Test::TIV	./test.c	/^    long double **TIV;$/;"	m	struct:_Test	file:	access:public
_Test::alpha	./test.c	/^    double alpha;$/;"	m	struct:_Test	file:	access:public
_Test::currentFO	./test.c	/^    Cost currentFO;$/;"	m	struct:_Test	file:	access:public
_Test::currentNeigh	./test.c	/^    int currentNeigh;$/;"	m	struct:_Test	file:	access:public
_Test::currentTime	./test.c	/^    double currentTime;$/;"	m	struct:_Test	file:	access:public
_Test::improveFO	./test.c	/^    Cost *improveFO;$/;"	m	struct:_Test	file:	access:public
_Test::improveNeigh	./test.c	/^    int *improveNeigh;$/;"	m	struct:_Test	file:	access:public
_Test::inst	./test.c	/^    const struct _Instance *inst;$/;"	m	struct:_Test	typeref:struct:_Test::_Instance	file:	access:public
_Test::intervalE	./test.c	/^    long double *intervalE;$/;"	m	struct:_Test	file:	access:public
_Test::intervalI	./test.c	/^    long double *intervalI;$/;"	m	struct:_Test	file:	access:public
_Test::it	./test.c	/^    int it;$/;"	m	struct:_Test	file:	access:public
_Test::lastN	./test.c	/^    int lastN;$/;"	m	struct:_Test	file:	access:public
_Test::maxFE	./test.c	/^    long double *maxFE;$/;"	m	struct:_Test	file:	access:public
_Test::maxFI	./test.c	/^    long double *maxFI;$/;"	m	struct:_Test	file:	access:public
_Test::minFE	./test.c	/^    long double *minFE;$/;"	m	struct:_Test	file:	access:public
_Test::minFI	./test.c	/^    long double *minFI;$/;"	m	struct:_Test	file:	access:public
_Test::nNeigh	./test.c	/^    int nNeigh;$/;"	m	struct:_Test	file:	access:public
_Test::nStages	./test.c	/^    int nStages;$/;"	m	struct:_Test	file:	access:public
_Test::normFE	./test.c	/^    long double **normFE;$/;"	m	struct:_Test	file:	access:public
_Test::normFI	./test.c	/^    long double **normFI;$/;"	m	struct:_Test	file:	access:public
_Test::timeNeigh	./test.c	/^    double *timeNeigh;$/;"	m	struct:_Test	file:	access:public
_Test::totalTime	./test.c	/^    double totalTime;$/;"	m	struct:_Test	file:	access:public
_Test::visitNeigh	./test.c	/^    int *visitNeigh;$/;"	m	struct:_Test	file:	access:public
_Tokenizer	./tokenizer.c	/^struct _Tokenizer {$/;"	s	file:
_Tokenizer::pos	./tokenizer.c	/^    VecInt *pos;$/;"	m	struct:_Tokenizer	file:	access:public
_Tokenizer::str	./tokenizer.c	/^    VecChar *str;$/;"	m	struct:_Tokenizer	file:	access:public
_Tokenizer::tokens	./tokenizer.c	/^    VecStr *tokens;$/;"	m	struct:_Tokenizer	file:	access:public
_TopSort	./top_sort.c	/^struct _TopSort {$/;"	s	file:
_TopSort::degree	./top_sort.c	/^    int *degree;$/;"	m	struct:_TopSort	file:	access:public
_TopSort::inst	./top_sort.c	/^    const Instance *inst;$/;"	m	struct:_TopSort	file:	access:public
_TopSort::jobsTS	./top_sort.c	/^    int *jobsTS;$/;"	m	struct:_TopSort	file:	access:public
_TopSort::nJobsTS	./top_sort.c	/^    int nJobsTS;$/;"	m	struct:_TopSort	file:	access:public
_VND	./vnd.c	/^struct _VND {$/;"	s	file:
_VND::bestSol	./vnd.c	/^    Solution *bestSol;$/;"	m	struct:_VND	file:	access:public
_VND::iniSol	./vnd.c	/^    Solution *iniSol;$/;"	m	struct:_VND	file:	access:public
_VND::inst	./vnd.c	/^    const struct _Instance *inst;$/;"	m	struct:_VND	typeref:struct:_VND::_Instance	file:	access:public
_VND::nThread	./vnd.c	/^    int nThread;$/;"	m	struct:_VND	file:	access:public
_VND::parallel	./vnd.c	/^    int parallel;$/;"	m	struct:_VND	file:	access:public
_VNS	./vns.c	/^struct _VNS {$/;"	s	file:
_VNS::bestSol	./vns.c	/^    Solution *bestSol;$/;"	m	struct:_VNS	file:	access:public
_VNS::divResJob	./vns.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_VNS	file:	access:public
_VNS::divResMode	./vns.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_VNS	file:	access:public
_VNS::divTransJob	./vns.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_VNS	file:	access:public
_VNS::divTransMode	./vns.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_VNS	file:	access:public
_VNS::iniSol	./vns.c	/^    Solution *iniSol;$/;"	m	struct:_VNS	file:	access:public
_VNS::inst	./vns.c	/^    const struct _Instance *inst;$/;"	m	struct:_VNS	typeref:struct:_VNS::_Instance	file:	access:public
_VNS::itLAHC	./vns.c	/^    int itLAHC;$/;"	m	struct:_VNS	file:	access:public
_VNS::itRNA	./vns.c	/^    int itRNA;$/;"	m	struct:_VNS	file:	access:public
_VNS::la	./vns.c	/^    LearningAutomata * la;$/;"	m	struct:_VNS	file:	access:public
_VNS::lfa	./vns.c	/^    int lfa;$/;"	m	struct:_VNS	file:	access:public
_VNS::nChangesModes	./vns.c	/^    int *nChangesModes;$/;"	m	struct:_VNS	file:	access:public
_VNS::nChangesSequence	./vns.c	/^    int *nChangesSequence;$/;"	m	struct:_VNS	file:	access:public
_VNS::nMoves	./vns.c	/^    int nMoves;$/;"	m	struct:_VNS	file:	access:public
_VNS::nTimesJobOnModes	./vns.c	/^    int **nTimesJobOnModes;$/;"	m	struct:_VNS	file:	access:public
_VNS::nTimesJobOnSequence	./vns.c	/^    int **nTimesJobOnSequence;$/;"	m	struct:_VNS	file:	access:public
_VNS::perc	./vns.c	/^    double perc;$/;"	m	struct:_VNS	file:	access:public
_VNS::percRS	./vns.c	/^    double percRS;$/;"	m	struct:_VNS	file:	access:public
_VNS::sizeSamplingShake	./vns.c	/^    int sizeSamplingShake;$/;"	m	struct:_VNS	file:	access:public
_VecChar	./vec_char.c	/^struct _VecChar {$/;"	s	file:
_VecChar::capacity	./vec_char.c	/^    int capacity;$/;"	m	struct:_VecChar	file:	access:public
_VecChar::size	./vec_char.c	/^    int size;$/;"	m	struct:_VecChar	file:	access:public
_VecChar::vector	./vec_char.c	/^    char *vector;$/;"	m	struct:_VecChar	file:	access:public
_VecDbl	./vec_double.c	/^struct _VecDbl {$/;"	s	file:
_VecDbl::capacity	./vec_double.c	/^    int capacity;$/;"	m	struct:_VecDbl	file:	access:public
_VecDbl::size	./vec_double.c	/^    int size;$/;"	m	struct:_VecDbl	file:	access:public
_VecDbl::vector	./vec_double.c	/^    double *vector;$/;"	m	struct:_VecDbl	file:	access:public
_VecInt	./vec_int.c	/^struct _VecInt {$/;"	s	file:
_VecInt::capacity	./vec_int.c	/^    int capacity;$/;"	m	struct:_VecInt	file:	access:public
_VecInt::size	./vec_int.c	/^    int size;$/;"	m	struct:_VecInt	file:	access:public
_VecInt::vector	./vec_int.c	/^    int *vector;$/;"	m	struct:_VecInt	file:	access:public
_VecStr	./vec_str.c	/^struct _VecStr {$/;"	s	file:
_VecStr::capacity	./vec_str.c	/^    int capacity;$/;"	m	struct:_VecStr	file:	access:public
_VecStr::s	./vec_str.c	/^    char *s;$/;"	m	struct:_VecStr	file:	access:public
_VecStr::size	./vec_str.c	/^    int size;$/;"	m	struct:_VecStr	file:	access:public
_VecStr::strSize	./vec_str.c	/^    int strSize;$/;"	m	struct:_VecStr	file:	access:public
_VecStr::sv	./vec_str.c	/^    char **sv;$/;"	m	struct:_VecStr	file:	access:public
__anon10::idx	./mip_compact.c	/^    int idx;$/;"	m	struct:__anon10	file:	access:public
__anon10::j	./mip_compact.c	/^    int j;$/;"	m	struct:__anon10	file:	access:public
__anon10::m	./mip_compact.c	/^    int m;$/;"	m	struct:__anon10	file:	access:public
__anon10::t	./mip_compact.c	/^    int t;$/;"	m	struct:__anon10	file:	access:public
__anon10::value	./mip_compact.c	/^    float value;$/;"	m	struct:__anon10	file:	access:public
__anon11::a	./mip_compact.c	/^    int a;$/;"	m	struct:__anon11	file:	access:public
__anon11::b	./mip_compact.c	/^    int b;$/;"	m	struct:__anon11	file:	access:public
__anon12::cost	./node_heap.c	/^    int cost;$/;"	m	struct:__anon12	file:	access:public
__anon12::node	./node_heap.c	/^    int node;$/;"	m	struct:__anon12	file:	access:public
__anon13::back	./vint_queue.h	/^    int back;$/;"	m	struct:__anon13	access:public
__anon13::capacity	./vint_queue.h	/^    int capacity;$/;"	m	struct:__anon13	access:public
__anon13::elements	./vint_queue.h	/^    int *elements;$/;"	m	struct:__anon13	access:public
__anon13::front	./vint_queue.h	/^    int front;$/;"	m	struct:__anon13	access:public
__anon14::capacity	./vint_set.h	/^    int capacity;$/;"	m	struct:__anon14	access:public
__anon14::elements	./vint_set.h	/^    int *elements;$/;"	m	struct:__anon14	access:public
__anon14::size	./vint_set.h	/^    int size;$/;"	m	struct:__anon14	access:public
__anon1::degree	./cgraph.c	/^    unsigned long int degree;$/;"	m	struct:__anon1	file:	access:public
__anon1::node	./cgraph.c	/^    int node;$/;"	m	struct:__anon1	file:	access:public
__anon2::cost	./cgraph.c	/^    int cost;$/;"	m	struct:__anon2	file:	access:public
__anon2::node	./cgraph.c	/^    int node;$/;"	m	struct:__anon2	file:	access:public
__anon3::idx	./clique_extender.c	/^    int idx;$/;"	m	struct:__anon3	file:	access:public
__anon3::weight	./clique_extender.c	/^    int weight;$/;"	m	struct:__anon3	file:	access:public
__anon5::a	./cut_pool.h	/^    int a;$/;"	m	struct:__anon5	access:public
__anon5::b	./cut_pool.h	/^    double b;$/;"	m	struct:__anon5	access:public
__anon6::keyPos	./dict_int.c	/^    int keyPos;$/;"	m	struct:__anon6	file:	access:public
__anon6::str	./dict_int.c	/^    char str[256];$/;"	m	struct:__anon6	file:	access:public
__anon6::value	./dict_int.c	/^    int value;$/;"	m	struct:__anon6	file:	access:public
__anon7::distance	./digraph.h	/^    int distance;$/;"	m	struct:__anon7	access:public
__anon7::head	./digraph.h	/^    int head;$/;"	m	struct:__anon7	access:public
__anon7::tail	./digraph.h	/^    int tail;$/;"	m	struct:__anon7	access:public
__anon8::distance	./digraph.h	/^    int distance;$/;"	m	struct:__anon8	access:public
__anon8::node	./digraph.h	/^    int node;$/;"	m	struct:__anon8	access:public
__anon9::a	./instance.c	/^    int a;$/;"	m	struct:__anon9	file:	access:public
__anon9::b	./instance.c	/^    int b;$/;"	m	struct:__anon9	file:	access:public
a	./cut_pool.h	/^    int a;$/;"	m	struct:__anon5	access:public
a	./instance.c	/^    int a;$/;"	m	struct:__anon9	file:	access:public
a	./mip_compact.c	/^    int a;$/;"	m	struct:__anon11	file:	access:public
addFOConstants	./mip_compact.c	/^static void addFOConstants( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
addFOConstants	./mip_compact.c	/^void addFOConstants( MIPCompact *mipp , double timeLeft )$/;"	f	signature:( MIPCompact *mipp , double timeLeft )
allocateFWSpace	./spaths.c	/^void allocateFWSpace( ShortestPathsFinder* spf )$/;"	f	signature:( ShortestPathsFinder* spf )
allocateFWSpace	./spaths.c	/^void allocateFWSpace( ShortestPathsFinder* spf );$/;"	p	file:	signature:( ShortestPathsFinder* spf )
alpha	./grasp.c	/^    double alpha;$/;"	m	struct:_Grasp	file:	access:public
alpha	./sa.c	/^    double alpha;$/;"	m	struct:_SA	file:	access:public
alpha	./test.c	/^    double alpha;$/;"	m	struct:_Test	file:	access:public
alpha_choice	./grasp.c	/^    int alpha_choice;$/;"	m	struct:_Grasp	file:	access:public
alpha_choices	./grasp.c	/^const double alpha_choices[] =$/;"	v
applyInversion	./str_utils.c	/^char* applyInversion(char* str)$/;"	f	signature:(char* str)
arcs	./spaths.c	/^    int arcs;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
assortment	./neighborhood.c	/^    int *assortment;$/;"	m	struct:_Neighborhood	file:	access:public
b	./cut_pool.h	/^    double b;$/;"	m	struct:__anon5	access:public
b	./instance.c	/^    int b;$/;"	m	struct:__anon9	file:	access:public
b	./mip_compact.c	/^    int b;$/;"	m	struct:__anon11	file:	access:public
back	./vint_queue.h	/^    int back;$/;"	m	struct:__anon13	access:public
bestModes	./ms_solver_lahc.c	/^    ModeSet *bestModes;$/;"	m	struct:_MSSolverLAHC	file:	access:public
bestSol	./lahc.c	/^    Solution *bestSol;$/;"	m	struct:_LAHC	file:	access:public
bestSol	./mip_compact.c	/^    Solution *bestSol;$/;"	m	struct:_MIPCompact	file:	access:public
bestSol	./sa.c	/^    Solution *bestSol;$/;"	m	struct:_SA	file:	access:public
bestSol	./vnd.c	/^    Solution *bestSol;$/;"	m	struct:_VND	file:	access:public
bestSol	./vns.c	/^    Solution *bestSol;$/;"	m	struct:_VNS	file:	access:public
bestWeight	./grasp.c	/^    int bestWeight;$/;"	m	struct:_Grasp	file:	access:public
bhv	./cgraph.c	/^    NodeCost *bhv;$/;"	m	struct:_NeighIterator	file:	access:public
bhvCap	./cgraph.c	/^    int bhvCap;$/;"	m	struct:_NeighIterator	file:	access:public
bhvSize	./cgraph.c	/^    int bhvSize;$/;"	m	struct:_NeighIterator	file:	access:public
bhv_swap	./cgraph.c	1440;"	d	file:
bk	./clique_separation.c	/^    void *bk;$/;"	m	struct:_CliqueSeparation	file:	access:public
bk_create	./bron_kerbosch.h	/^BronKerbosch *bk_create(const CGraph *cgraph );$/;"	p	signature:(const CGraph *cgraph )
bk_create	./bron_kerbosch.h	/^BronKerbosch *bk_create(const CGraph *craph);$/;"	p	signature:(const CGraph *craph)
bk_free	./bron_kerbosch.h	/^void bk_free( BronKerbosch *bk );$/;"	p	signature:( BronKerbosch *bk )
bk_get_clq_set	./bron_kerbosch.h	/^const CliqueSet *bk_get_clq_set( BronKerbosch *bk );$/;"	p	signature:( BronKerbosch *bk )
bk_run	./bron_kerbosch.h	/^int bk_run(BronKerbosch *bk, const int minViol, const int timeLimit, const int maxCliques );$/;"	p	signature:(BronKerbosch *bk, const int minViol, const int timeLimit, const int maxCliques )
bsearch_int	./vint_set.c	/^inline int *bsearch_int( int v[], const size_t n, const int key )$/;"	f	signature:( int v[], const size_t n, const int key )
bsearch_int	./vint_set.h	/^int *bsearch_int( int v[], const size_t n, const int key );$/;"	p	signature:( int v[], const size_t n, const int key )
build_cgraph_conflicts	./build_cgraph.h	/^CGraph* build_cgraph_conflicts(int **conf, int *nconf, int nVertices);$/;"	p	signature:(int **conf, int *nconf, int nVertices)
build_cgraph_lp	./build_cgraph.h	/^CGraph* build_cgraph_lp(LinearProgram *lp);$/;"	p	signature:(LinearProgram *lp)
build_cgraph_osi	./build_cgraph.h	/^CGraph* build_cgraph_osi(const void *_solver);$/;"	p	signature:(const void *_solver)
build_cgraph_pairwise_osi	./build_cgraph.h	/^CGraph* build_cgraph_pairwise_osi(const void *_solver);$/;"	p	signature:(const void *_solver)
candidates	./clique_extender.c	/^    int *candidates;$/;"	m	struct:_CliqueExtender	file:	access:public
candidates	./grasp.c	/^    int *candidates;$/;"	m	struct:_Grasp	file:	access:public
candidatesCap	./clique_extender.c	/^    int candidatesCap;$/;"	m	struct:_CliqueExtender	file:	access:public
capN	./instance.c	/^    int *capN;$/;"	m	struct:_Instance	file:	access:public
capR	./instance.c	/^    int *capR;$/;"	m	struct:_Instance	file:	access:public
capacity	./stack.c	/^    int capacity;$/;"	m	struct:_Stack	file:	access:public
capacity	./vec_char.c	/^    int capacity;$/;"	m	struct:_VecChar	file:	access:public
capacity	./vec_double.c	/^    int capacity;$/;"	m	struct:_VecDbl	file:	access:public
capacity	./vec_int.c	/^    int capacity;$/;"	m	struct:_VecInt	file:	access:public
capacity	./vec_str.c	/^    int capacity;$/;"	m	struct:_VecStr	file:	access:public
capacity	./vint_queue.h	/^    int capacity;$/;"	m	struct:__anon13	access:public
capacity	./vint_set.h	/^    int capacity;$/;"	m	struct:__anon14	access:public
caparcs	./spaths.c	/^    int caparcs;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
capnodes	./spaths.c	/^    int capnodes;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
cgraph	./clique_enum.c	/^    const CGraph *cgraph;$/;"	m	struct:_CliqueEnumerator	file:	access:public
cgraph	./clique_extender.c	/^    const CGraph *cgraph;$/;"	m	struct:_CliqueExtender	file:	access:public
cgraph	./clique_separation.c	/^    const CGraph *cgraph;$/;"	m	struct:_CliqueSeparation	file:	access:public
cgraph	./grasp.c	/^    const CGraph *cgraph;$/;"	m	struct:_Grasp	file:	access:public
cgraph	./oddhs.c	/^    const CGraph *cgraph;$/;"	m	struct:_OddHoleSep	file:	access:public
cgraph_add_clique	./cgraph.c	/^void cgraph_add_clique( CGraph *cgraph, int clique[], const int size )$/;"	f	signature:( CGraph *cgraph, int clique[], const int size )
cgraph_add_clique	./cgraph.h	/^void cgraph_add_clique( CGraph *cgraph, int clique[], const int size );$/;"	p	signature:( CGraph *cgraph, int clique[], const int size )
cgraph_add_clique_as_normal_conflicts	./cgraph.c	/^void cgraph_add_clique_as_normal_conflicts( CGraph *cgraph, const int nEl, const int elClique[] )$/;"	f	signature:( CGraph *cgraph, const int nEl, const int elClique[] )
cgraph_add_clique_as_normal_conflicts	./cgraph.c	/^void cgraph_add_clique_as_normal_conflicts( CGraph *cgraph, const int nEl, const int elClique[] );$/;"	p	file:	signature:( CGraph *cgraph, const int nEl, const int elClique[] )
cgraph_add_node_conflicts	./cgraph.c	/^void cgraph_add_node_conflicts( CGraph *cgraph, const int node, const int conflicts[], const int size )$/;"	f	signature:( CGraph *cgraph, const int node, const int conflicts[], const int size )
cgraph_add_node_conflicts	./cgraph.h	/^void cgraph_add_node_conflicts( CGraph *cgraph, const int node, const int conflicts[], const int size );$/;"	p	signature:( CGraph *cgraph, const int node, const int conflicts[], const int size )
cgraph_add_node_conflicts_no_sim	./cgraph.c	/^void cgraph_add_node_conflicts_no_sim( CGraph *cgraph, const int node, const int conflicts[], const int size )$/;"	f	signature:( CGraph *cgraph, const int node, const int conflicts[], const int size )
cgraph_add_node_conflicts_no_sim	./cgraph.h	/^void cgraph_add_node_conflicts_no_sim( CGraph *cgraph, const int node, const int conflicts[], const int size );$/;"	p	signature:( CGraph *cgraph, const int node, const int conflicts[], const int size )
cgraph_add_vector_arcs	./cgraph.c	/^void cgraph_add_vector_arcs( CGraph *cgraph, const CGArc *arcs, const int nArcs, int neighs[] );$/;"	p	file:	signature:( CGraph *cgraph, const CGArc *arcs, const int nArcs, int neighs[] )
cgraph_add_vector_arcs	./cgraph.c	/^void cgraph_add_vector_arcs( CGraph *cgraph, const CGArc *arcs, const int nArcs,int neighs[] )$/;"	f	signature:( CGraph *cgraph, const CGArc *arcs, const int nArcs,int neighs[] )
cgraph_check_clique_size	./cgraph.c	/^void cgraph_check_clique_size( CGraph *cgraph, int requiredCliqueSize );$/;"	p	file:	signature:( CGraph *cgraph, int requiredCliqueSize )
cgraph_check_neighs	./cgraph.c	/^void cgraph_check_neighs( const CGraph *cgraph )$/;"	f	signature:( const CGraph *cgraph )
cgraph_check_neighs	./cgraph.h	/^void cgraph_check_neighs( const CGraph *cgraph );$/;"	p	signature:( const CGraph *cgraph )
cgraph_check_node_cliques	./cgraph.c	/^void cgraph_check_node_cliques( const CGraph *cgraph )$/;"	f	signature:( const CGraph *cgraph )
cgraph_check_node_cliques	./cgraph.h	/^void cgraph_check_node_cliques( const CGraph *cgraph );$/;"	p	signature:( const CGraph *cgraph )
cgraph_check_node_size	./cgraph.c	/^void cgraph_check_node_size( CGraph *cgraph, int requiredNodeSize )$/;"	f	signature:( CGraph *cgraph, int requiredNodeSize )
cgraph_check_node_size	./cgraph.c	/^void cgraph_check_node_size( CGraph *cgraph, int requiredNodeSize );$/;"	p	file:	signature:( CGraph *cgraph, int requiredNodeSize )
cgraph_check_preproc	./cgraph.c	/^void cgraph_check_preproc( const CGraph *ppgraph, const CGraph *cgraph )$/;"	f	signature:( const CGraph *ppgraph, const CGraph *cgraph )
cgraph_check_preproc	./cgraph.h	/^void cgraph_check_preproc( const CGraph *ppgraph, const CGraph *cgraph );$/;"	p	signature:( const CGraph *ppgraph, const CGraph *cgraph )
cgraph_cmp_int	./cgraph.c	/^int cgraph_cmp_int( const void *e1, const void *e2 )$/;"	f	signature:( const void *e1, const void *e2 )
cgraph_conflicting_nodes	./cgraph.c	/^int cgraph_conflicting_nodes( const CGraph *cgraph, const int i, const int j )$/;"	f	signature:( const CGraph *cgraph, const int i, const int j )
cgraph_conflicting_nodes	./cgraph.h	/^int cgraph_conflicting_nodes( const CGraph *cgraph, const int i, const int j );$/;"	p	signature:( const CGraph *cgraph, const int i, const int j )
cgraph_create	./cgraph.c	/^CGraph *cgraph_create( int initialColumns )$/;"	f	signature:( int initialColumns )
cgraph_create	./cgraph.h	/^CGraph *cgraph_create( int initialColumns );$/;"	p	signature:( int initialColumns )
cgraph_create_induced_subgraph	./cgraph.c	/^CGraph *cgraph_create_induced_subgraph( const CGraph *cgraph, const int nindexes[] )$/;"	f	signature:( const CGraph *cgraph, const int nindexes[] )
cgraph_create_induced_subgraph	./cgraph.h	/^CGraph *cgraph_create_induced_subgraph( const CGraph *cgraph, const int nindexes[] );$/;"	p	signature:( const CGraph *cgraph, const int nindexes[] )
cgraph_degree	./cgraph.c	/^int cgraph_degree( const CGraph *cgraph, const int node )$/;"	f	signature:( const CGraph *cgraph, const int node )
cgraph_degree	./cgraph.h	/^int cgraph_degree( const CGraph *cgraph, const int node );$/;"	p	signature:( const CGraph *cgraph, const int node )
cgraph_free	./cgraph.c	/^void cgraph_free( CGraph **cgraph )$/;"	f	signature:( CGraph **cgraph )
cgraph_free	./cgraph.h	/^void cgraph_free( CGraph **cgraph );$/;"	p	signature:( CGraph **cgraph )
cgraph_get_all_conflicting	./cgraph.c	/^int cgraph_get_all_conflicting( const CGraph *cgraph, int node, int neighs[], int maxSize )$/;"	f	signature:( const CGraph *cgraph, int node, int neighs[], int maxSize )
cgraph_get_all_conflicting	./cgraph.h	/^int cgraph_get_all_conflicting( const CGraph *cgraph, int node, int neighs[], int maxSize );$/;"	p	signature:( const CGraph *cgraph, int node, int neighs[], int maxSize )
cgraph_get_candidates_clique_insertion	./cgraph.c	/^int cgraph_get_candidates_clique_insertion( const CGraph *cgraph, const int n, const int clique[], int candidates[], const int capacityCandidates )$/;"	f	signature:( const CGraph *cgraph, const int n, const int clique[], int candidates[], const int capacityCandidates )
cgraph_get_candidates_clique_insertion	./cgraph.h	/^int cgraph_get_candidates_clique_insertion( const CGraph *cgraph, const int n, const int clique[], int candidates[], const int capacityCandidates );$/;"	p	signature:( const CGraph *cgraph, const int n, const int clique[], int candidates[], const int capacityCandidates )
cgraph_get_n_conflicting	./cgraph.c	/^int cgraph_get_n_conflicting( const CGraph *cgraph, int node, int neighs[], int n,$/;"	f	signature:( const CGraph *cgraph, int node, int neighs[], int n, int v[], const int vcap )
cgraph_get_n_conflicting	./cgraph.h	/^int cgraph_get_n_conflicting( const CGraph *cgraph, int node, int neighs[], int n,$/;"	p	signature:( const CGraph *cgraph, int node, int neighs[], int n, int v[], const int vcap )
cgraph_get_node_name	./cgraph.c	/^const char *cgraph_get_node_name( const CGraph *cgraph, int node )$/;"	f	signature:( const CGraph *cgraph, int node )
cgraph_get_node_name	./cgraph.h	/^const char *cgraph_get_node_name( const CGraph *cgraph, int node );$/;"	p	signature:( const CGraph *cgraph, int node )
cgraph_get_node_weight	./cgraph.c	/^int cgraph_get_node_weight( const CGraph *cgraph, int node )$/;"	f	signature:( const CGraph *cgraph, int node )
cgraph_get_node_weight	./cgraph.h	/^int cgraph_get_node_weight( const CGraph *cgraph, int node );$/;"	p	signature:( const CGraph *cgraph, int node )
cgraph_get_node_weights	./cgraph.c	/^const int *cgraph_get_node_weights( const CGraph *cgraph )$/;"	f	signature:( const CGraph *cgraph )
cgraph_get_node_weights	./cgraph.h	/^const int *cgraph_get_node_weights( const CGraph *cgraph );$/;"	p	signature:( const CGraph *cgraph )
cgraph_get_original_node_index	./cgraph.c	/^int cgraph_get_original_node_index( const CGraph *cgraph, const int node )$/;"	f	signature:( const CGraph *cgraph, const int node )
cgraph_get_original_node_index	./cgraph.h	/^int cgraph_get_original_node_index( const CGraph *cgraph, const int node );$/;"	p	signature:( const CGraph *cgraph, const int node )
cgraph_get_original_node_indexes	./cgraph.c	/^const int *cgraph_get_original_node_indexes( const CGraph *cgraph )$/;"	f	signature:( const CGraph *cgraph )
cgraph_get_original_node_indexes	./cgraph.h	/^const int *cgraph_get_original_node_indexes( const CGraph *cgraph );$/;"	p	signature:( const CGraph *cgraph )
cgraph_load	./cgraph.c	/^CGraph *cgraph_load( const char *fileName )$/;"	f	signature:( const char *fileName )
cgraph_load	./cgraph.h	/^CGraph *cgraph_load( const char *fileName );$/;"	p	signature:( const char *fileName )
cgraph_load_dimensions	./cgraph.c	/^void cgraph_load_dimensions( const char *fileName, int *nodes, int *edges )$/;"	f	signature:( const char *fileName, int *nodes, int *edges )
cgraph_load_dimensions	./cgraph.h	/^void cgraph_load_dimensions( const char *fileName, int *nodes, int *edges );$/;"	p	signature:( const char *fileName, int *nodes, int *edges )
cgraph_max_degree	./cgraph.c	/^int cgraph_max_degree( const CGraph *cgraph )$/;"	f	signature:( const CGraph *cgraph )
cgraph_max_degree	./cgraph.h	/^int cgraph_max_degree( const CGraph *cgraph );$/;"	p	signature:( const CGraph *cgraph )
cgraph_min_degree	./cgraph.c	/^int cgraph_min_degree( const CGraph *cgraph )$/;"	f	signature:( const CGraph *cgraph )
cgraph_min_degree	./cgraph.h	/^int cgraph_min_degree( const CGraph *cgraph );$/;"	p	signature:( const CGraph *cgraph )
cgraph_preprocess	./cgraph.c	/^CGraph *cgraph_preprocess( const CGraph *cgraph, int nindexes[] )$/;"	f	signature:( const CGraph *cgraph, int nindexes[] )
cgraph_preprocess	./cgraph.h	/^CGraph *cgraph_preprocess( const CGraph *cgraph, int nindexes[] );$/;"	p	signature:( const CGraph *cgraph, int nindexes[] )
cgraph_print	./cgraph.c	/^void cgraph_print( CGraph *cgraph, const int w[] )$/;"	f	signature:( CGraph *cgraph, const int w[] )
cgraph_print	./cgraph.h	/^void cgraph_print( CGraph *cgraph, const int w[] );$/;"	p	signature:( CGraph *cgraph, const int w[] )
cgraph_print_summary	./cgraph.c	/^void cgraph_print_summary( CGraph *cgraph, const char *name )$/;"	f	signature:( CGraph *cgraph, const char *name )
cgraph_print_summary	./cgraph.h	/^void cgraph_print_summary( CGraph *cgraph, const char *name );$/;"	p	signature:( CGraph *cgraph, const char *name )
cgraph_recompute_degree	./cgraph.c	/^void cgraph_recompute_degree( CGraph *cgraph )$/;"	f	signature:( CGraph *cgraph )
cgraph_recompute_degree	./cgraph.h	/^void cgraph_recompute_degree( CGraph *cgraph );$/;"	p	signature:( CGraph *cgraph )
cgraph_save	./cgraph.c	/^void cgraph_save( CGraph *cgraph, const char *fileName )$/;"	f	signature:( CGraph *cgraph, const char *fileName )
cgraph_save	./cgraph.h	/^void cgraph_save( CGraph *cgraph, const char *fileName );$/;"	p	signature:( CGraph *cgraph, const char *fileName )
cgraph_set_low_degree	./cgraph.c	/^void cgraph_set_low_degree( CGraph *cgraph, const int lowDegree )$/;"	f	signature:( CGraph *cgraph, const int lowDegree )
cgraph_set_low_degree	./cgraph.h	/^void cgraph_set_low_degree( CGraph *cgraph, const int lowDegree );$/;"	p	signature:( CGraph *cgraph, const int lowDegree )
cgraph_set_node_name	./cgraph.c	/^void cgraph_set_node_name( CGraph *cgraph, int node, const char *name )$/;"	f	signature:( CGraph *cgraph, int node, const char *name )
cgraph_set_node_name	./cgraph.h	/^void cgraph_set_node_name( CGraph *cgraph, int node, const char *name );$/;"	p	signature:( CGraph *cgraph, int node, const char *name )
cgraph_set_node_weight	./cgraph.c	/^void cgraph_set_node_weight( CGraph *cgraph, int node, int weight )$/;"	f	signature:( CGraph *cgraph, int node, int weight )
cgraph_set_node_weight	./cgraph.h	/^void cgraph_set_node_weight( CGraph *cgraph, int node, int weight );$/;"	p	signature:( CGraph *cgraph, int node, int weight )
cgraph_size	./cgraph.c	/^int cgraph_size( const CGraph *cgraph )$/;"	f	signature:( const CGraph *cgraph )
cgraph_size	./cgraph.h	/^int cgraph_size( const CGraph *cgraph );$/;"	p	signature:( const CGraph *cgraph )
cgraph_update_min_max_degree	./cgraph.c	/^void cgraph_update_min_max_degree( CGraph *cgraph )$/;"	f	signature:( CGraph *cgraph )
cgraph_update_min_max_degree	./cgraph.h	/^void cgraph_update_min_max_degree( CGraph *cgraph );$/;"	p	signature:( CGraph *cgraph )
cgraph_weight	./cgraph.c	/^int cgraph_weight( const double w )$/;"	f	signature:( const double w )
cgraph_weight	./cgraph.h	/^int cgraph_weight( const double w );$/;"	p	signature:( const double w )
changeFourMode	./neighborhood.h	/^                        changeOneMode=7, changeTwoMode=8, changeThreeMode=9, changeFourMode=10,$/;"	e	enum:NeighborhoodType
changeOneMode	./neighborhood.h	/^                        changeOneMode=7, changeTwoMode=8, changeThreeMode=9, changeFourMode=10,$/;"	e	enum:NeighborhoodType
changeThreeMode	./neighborhood.h	/^                        changeOneMode=7, changeTwoMode=8, changeThreeMode=9, changeFourMode=10,$/;"	e	enum:NeighborhoodType
changeTwoMode	./neighborhood.h	/^                        changeOneMode=7, changeTwoMode=8, changeThreeMode=9, changeFourMode=10,$/;"	e	enum:NeighborhoodType
charIsInvisible	./str_utils.c	/^char charIsInvisible( const char c )$/;"	f	signature:( const char c )
charIsInvisible	./str_utils.h	/^char charIsInvisible( const char c );$/;"	p	signature:( const char c )
childPos	./node_heap.c	25;"	d	file:
childPosBHV	./cgraph.c	1438;"	d	file:
clique	./clique_enum.c	/^    int *clique;$/;"	m	struct:_CliqueEnumerator	file:	access:public
clique	./grasp.c	/^    int *clique;$/;"	m	struct:_Grasp	file:	access:public
cliqueCap	./clique_enum.c	/^    int cliqueCap;$/;"	m	struct:_CliqueEnumerator	file:	access:public
cliqueSize	./grasp.c	/^    int cliqueSize;$/;"	m	struct:_Grasp	file:	access:public
cliqueWeight	./grasp.c	/^    int cliqueWeight;$/;"	m	struct:_Grasp	file:	access:public
cliques	./clique.c	/^    IntSet *cliques;$/;"	m	struct:_CliqueSet	file:	access:public
cliquesCap	./clique.c	/^    int cliquesCap;$/;"	m	struct:_CliqueSet	file:	access:public
clqES_create	./clique_elite_set.c	/^CliqueEliteSet *clqES_create( const CliqueSet *_cs, const double x[] )$/;"	f	signature:( const CliqueSet *_cs, const double x[] )
clqES_create	./clique_elite_set.h	/^CliqueEliteSet *clqES_create( const CliqueSet *_cs, const double x[] );$/;"	p	signature:( const CliqueSet *_cs, const double x[] )
clqES_free	./clique_elite_set.c	/^void clqES_free( CliqueEliteSet **_clqES )$/;"	f	signature:( CliqueEliteSet **_clqES )
clqES_free	./clique_elite_set.h	/^void clqES_free( CliqueEliteSet **_clqES );$/;"	p	signature:( CliqueEliteSet **_clqES )
clqES_pop	./clique_elite_set.c	/^const IntSet *clqES_pop( CliqueEliteSet *clqES )$/;"	f	signature:( CliqueEliteSet *clqES )
clqES_pop	./clique_elite_set.h	/^const IntSet *clqES_pop( CliqueEliteSet *clqES );$/;"	p	signature:( CliqueEliteSet *clqES )
clqEnum	./clique_separation.c	/^    CliqueEnumerator *clqEnum;$/;"	m	struct:_CliqueSeparation	file:	access:public
clqEnumNeighs	./clique_separation.c	/^    IntSet clqEnumNeighs;  \/* used in enumeration *\/$/;"	m	struct:_CliqueSeparation	file:	access:public
clqSet	./cgraph.c	/^    CliqueSet *clqSet;$/;"	m	struct:_CGraph	file:	access:public
clqSet	./clique_enum.c	/^    CliqueSet *clqSet;$/;"	m	struct:_CliqueEnumerator	file:	access:public
clqSet	./clique_extender.c	/^    CliqueSet *clqSet;$/;"	m	struct:_CliqueExtender	file:	access:public
clqSet	./clique_separation.c	/^    CliqueSet *clqSet;$/;"	m	struct:_CliqueSeparation	file:	access:public
clqSet	./grasp.c	/^    CliqueSet *clqSet;$/;"	m	struct:_Grasp	file:	access:public
clqSet	./oddhs.c	/^    CliqueSet *clqSet;$/;"	m	struct:_OddHoleSep	file:	access:public
clqSetOrig	./clique_separation.c	/^    CliqueSet *clqSetOrig;$/;"	m	struct:_CliqueSeparation	file:	access:public
clq_comp_int	./clique.c	/^int clq_comp_int( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
clq_conflicts_with_all	./clique.c	/^int clq_conflicts_with_all( const CGraph *cgraph, const int node, const int size, const int nodes[] )$/;"	f	signature:( const CGraph *cgraph, const int node, const int size, const int nodes[] )
clq_dominates	./clique.c	/^int clq_dominates( const IntSet *a, const IntSet *b )$/;"	f	signature:( const IntSet *a, const IntSet *b )
clq_dominates	./clique.h	/^int clq_dominates( const IntSet *a, const IntSet *b );$/;"	p	signature:( const IntSet *a, const IntSet *b )
clq_enum_check_space	./clique_enum.c	/^void clq_enum_check_space( CliqueEnumerator *clq_enum, const CGraph *cgraph, const IntSet *nodesLeft )$/;"	f	signature:( CliqueEnumerator *clq_enum, const CGraph *cgraph, const IntSet *nodesLeft )
clq_enum_create	./clique_enum.c	/^CliqueEnumerator *clq_enum_create( const int minWeight )$/;"	f	signature:( const int minWeight )
clq_enum_create	./clique_enum.h	/^CliqueEnumerator *clq_enum_create( const int minWeight );$/;"	p	signature:( const int minWeight )
clq_enum_enum	./clique_enum.c	/^void clq_enum_enum( CliqueEnumerator *clq_enum,$/;"	f	signature:( CliqueEnumerator *clq_enum, const int size, int clique[], const int weight, const IntSet *nodesLeft, const int depth )
clq_enum_free	./clique_enum.c	/^void clq_enum_free( CliqueEnumerator **clq_enum )$/;"	f	signature:( CliqueEnumerator **clq_enum )
clq_enum_free	./clique_enum.h	/^void clq_enum_free( CliqueEnumerator **clq_enum );$/;"	p	signature:( CliqueEnumerator **clq_enum )
clq_enum_get_cliques	./clique_enum.c	/^const CliqueSet *clq_enum_get_cliques( const CliqueEnumerator *clq_enum )$/;"	f	signature:( const CliqueEnumerator *clq_enum )
clq_enum_get_cliques	./clique_enum.h	/^const CliqueSet *clq_enum_get_cliques( const CliqueEnumerator *clq_enum );$/;"	p	signature:( const CliqueEnumerator *clq_enum )
clq_enum_run	./clique_enum.c	/^void clq_enum_run( CliqueEnumerator *clq_enum, const CGraph *cgraph,$/;"	f	signature:( CliqueEnumerator *clq_enum, const CGraph *cgraph, const int size, const int clique[], const int weight, const IntSet *nodesLeft )
clq_enum_run	./clique_enum.h	/^void clq_enum_run( CliqueEnumerator *clq_enum, const CGraph *cgraph,$/;"	p	signature:( CliqueEnumerator *clq_enum, const CGraph *cgraph, const int size, const int clique[], const int weight, const IntSet *nodesLeft )
clq_enum_set_min_weight	./clique_enum.c	/^void clq_enum_set_min_weight( CliqueEnumerator *clqEnum, const int minW )$/;"	f	signature:( CliqueEnumerator *clqEnum, const int minW )
clq_enum_set_min_weight	./clique_enum.h	/^void clq_enum_set_min_weight( CliqueEnumerator *clqEnum, const int minW );$/;"	p	signature:( CliqueEnumerator *clqEnum, const int minW )
clq_get_nz	./clique_elite_set.c	/^int clq_get_nz( const CliqueSet *_cs, int idx, const double x[] )$/;"	f	signature:( const CliqueSet *_cs, int idx, const double x[] )
clq_get_nz	./clique_elite_set.c	/^int clq_get_nz( const CliqueSet *_cs, int idx, const double x[] );$/;"	p	file:	signature:( const CliqueSet *_cs, int idx, const double x[] )
clq_sep_check_node_cap	./clique_separation.c	/^void clq_sep_check_node_cap( CliqueSeparation *clq_sep )$/;"	f	signature:( CliqueSeparation *clq_sep )
clq_sep_check_node_cap	./clique_separation.c	/^void clq_sep_check_node_cap( CliqueSeparation *clq_sep );$/;"	p	file:	signature:( CliqueSeparation *clq_sep )
clq_sep_create	./clique_separation.c	/^CliqueSeparation *clq_sep_create( const CGraph *origGraph )$/;"	f	signature:( const CGraph *origGraph )
clq_sep_create	./clique_separation.h	/^CliqueSeparation *clq_sep_create( const CGraph *origGraph );$/;"	p	signature:( const CGraph *origGraph )
clq_sep_enum_all_cliques_low_degree_nodes	./clique_separation.c	/^int clq_sep_enum_all_cliques_low_degree_nodes( CliqueSeparation *sep, int iv[], const CGraph *ppGraph )$/;"	f	signature:( CliqueSeparation *sep, int iv[], const CGraph *ppGraph )
clq_sep_enum_all_cliques_low_degree_nodes	./clique_separation.c	/^int clq_sep_enum_all_cliques_low_degree_nodes( CliqueSeparation *sep, int iv[], const CGraph *ppGraph );$/;"	p	file:	signature:( CliqueSeparation *sep, int iv[], const CGraph *ppGraph )
clq_sep_free	./clique_separation.c	/^void clq_sep_free( CliqueSeparation **clqSep )$/;"	f	signature:( CliqueSeparation **clqSep )
clq_sep_free	./clique_separation.h	/^void clq_sep_free( CliqueSeparation **clqSep );$/;"	p	signature:( CliqueSeparation **clqSep )
clq_sep_get_cliques	./clique_separation.c	/^const CliqueSet *clq_sep_get_cliques( CliqueSeparation *sep )$/;"	f	signature:( CliqueSeparation *sep )
clq_sep_get_cliques	./clique_separation.h	/^const CliqueSet *clq_sep_get_cliques( CliqueSeparation *sep );$/;"	p	signature:( CliqueSeparation *sep )
clq_sep_get_extend_method	./clique_separation.c	/^int clq_sep_get_extend_method( CliqueSeparation *sep )$/;"	f	signature:( CliqueSeparation *sep )
clq_sep_get_extend_method	./clique_separation.h	/^int clq_sep_get_extend_method( CliqueSeparation *sep );$/;"	p	signature:( CliqueSeparation *sep )
clq_sep_get_max_passes	./clique_separation.c	/^int clq_sep_get_max_passes( const CliqueSeparation *clqSep )$/;"	f	signature:( const CliqueSeparation *clqSep )
clq_sep_get_max_passes	./clique_separation.h	/^int clq_sep_get_max_passes( const CliqueSeparation *clqSep );$/;"	p	signature:( const CliqueSeparation *clqSep )
clq_sep_get_max_time_bk	./clique_separation.c	/^double clq_sep_get_max_time_bk( const CliqueSeparation *clqSep )$/;"	f	signature:( const CliqueSeparation *clqSep )
clq_sep_get_max_time_bk	./clique_separation.h	/^double clq_sep_get_max_time_bk( const CliqueSeparation *clqSep );$/;"	p	signature:( const CliqueSeparation *clqSep )
clq_sep_get_min_viol	./clique_separation.c	/^double clq_sep_get_min_viol( CliqueSeparation *sep )$/;"	f	signature:( CliqueSeparation *sep )
clq_sep_get_min_viol	./clique_separation.h	/^double clq_sep_get_min_viol( CliqueSeparation *sep );$/;"	p	signature:( CliqueSeparation *sep )
clq_sep_get_verbose	./clique_separation.c	/^int clq_sep_get_verbose( CliqueSeparation *sep )$/;"	f	signature:( CliqueSeparation *sep )
clq_sep_get_verbose	./clique_separation.h	/^int clq_sep_get_verbose( CliqueSeparation *sep );$/;"	p	signature:( CliqueSeparation *sep )
clq_sep_params_help_cmd_line	./clique_separation.c	/^void clq_sep_params_help_cmd_line()$/;"	f
clq_sep_params_help_cmd_line	./clique_separation.h	/^void clq_sep_params_help_cmd_line();$/;"	p	signature:()
clq_sep_params_print	./clique_separation.c	/^void clq_sep_params_print( const CliqueSeparation *clqsp )$/;"	f	signature:( const CliqueSeparation *clqsp )
clq_sep_params_print	./clique_separation.h	/^void clq_sep_params_print( const CliqueSeparation *clqsp );$/;"	p	signature:( const CliqueSeparation *clqsp )
clq_sep_separate	./clique_separation.c	/^void clq_sep_separate( CliqueSeparation *sep, const double x[] )$/;"	f	signature:( CliqueSeparation *sep, const double x[] )
clq_sep_separate	./clique_separation.h	/^void clq_sep_separate( CliqueSeparation *sep, const double x[] );$/;"	p	signature:( CliqueSeparation *sep, const double x[] )
clq_sep_set_extend_method	./clique_separation.c	/^void clq_sep_set_extend_method( CliqueSeparation *sep, const int extendC )$/;"	f	signature:( CliqueSeparation *sep, const int extendC )
clq_sep_set_extend_method	./clique_separation.h	/^void clq_sep_set_extend_method( CliqueSeparation *sep, const int extendC );$/;"	p	signature:( CliqueSeparation *sep, const int extendC )
clq_sep_set_max_time_bk	./clique_separation.c	/^void clq_sep_set_max_time_bk( CliqueSeparation *clqSep, const double maxTime )$/;"	f	signature:( CliqueSeparation *clqSep, const double maxTime )
clq_sep_set_max_time_bk	./clique_separation.h	/^void clq_sep_set_max_time_bk( CliqueSeparation *clqSep, const double maxTime );$/;"	p	signature:( CliqueSeparation *clqSep, const double maxTime )
clq_sep_set_maxcliques	./clique_separation.c	/^void clq_sep_set_maxcliques( CliqueSeparation *clqSep, int value )$/;"	f	signature:( CliqueSeparation *clqSep, int value )
clq_sep_set_maxcliques	./clique_separation.h	/^void clq_sep_set_maxcliques( CliqueSeparation *clqSep, int value );$/;"	p	signature:( CliqueSeparation *clqSep, int value )
clq_sep_set_min_viol	./clique_separation.c	/^void clq_sep_set_min_viol( CliqueSeparation *sep, const double viol )$/;"	f	signature:( CliqueSeparation *sep, const double viol )
clq_sep_set_min_viol	./clique_separation.h	/^void clq_sep_set_min_viol( CliqueSeparation *sep, const double viol );$/;"	p	signature:( CliqueSeparation *sep, const double viol )
clq_sep_set_params_parse_cmd_line	./clique_separation.c	/^void clq_sep_set_params_parse_cmd_line( CliqueSeparation *clqsp, const int argc, const char **argv )$/;"	f	signature:( CliqueSeparation *clqsp, const int argc, const char **argv )
clq_sep_set_params_parse_cmd_line	./clique_separation.h	/^void clq_sep_set_params_parse_cmd_line( CliqueSeparation *clqsp, const int argc, const char **argv );$/;"	p	signature:( CliqueSeparation *clqsp, const int argc, const char **argv )
clq_sep_set_rc	./clique_separation.c	/^void clq_sep_set_rc( CliqueSeparation *sep, const double rc[] )$/;"	f	signature:( CliqueSeparation *sep, const double rc[] )
clq_sep_set_rc	./clique_separation.h	/^void clq_sep_set_rc( CliqueSeparation *sep, const double rc[] );$/;"	p	signature:( CliqueSeparation *sep, const double rc[] )
clq_sep_set_verbose	./clique_separation.c	/^void clq_sep_set_verbose( CliqueSeparation *sep, const char verbose )$/;"	f	signature:( CliqueSeparation *sep, const char verbose )
clq_sep_set_verbose	./clique_separation.h	/^void clq_sep_set_verbose( CliqueSeparation *sep, const char verbose );$/;"	p	signature:( CliqueSeparation *sep, const char verbose )
clq_sep_update_ppgraph_weights	./clique_separation.c	/^void clq_sep_update_ppgraph_weights( CGraph *ppcg, const int cols, const double x[] )$/;"	f	signature:( CGraph *ppcg, const int cols, const double x[] )
clq_set_add	./clique.c	/^int clq_set_add( CliqueSet *clqSet, const int size, const int nodes[], const int w )$/;"	f	signature:( CliqueSet *clqSet, const int size, const int nodes[], const int w )
clq_set_add	./clique.h	/^int clq_set_add( CliqueSet *clqSet, const int size, const int nodes[], const int w );$/;"	p	signature:( CliqueSet *clqSet, const int size, const int nodes[], const int w )
clq_set_add_cliques	./clique.c	/^int clq_set_add_cliques( CliqueSet *clqs_target, const CliqueSet *clqs_source )$/;"	f	signature:( CliqueSet *clqs_target, const CliqueSet *clqs_source )
clq_set_add_cliques	./clique.h	/^int clq_set_add_cliques( CliqueSet *clqs_target, const CliqueSet *clqs_source );$/;"	p	signature:( CliqueSet *clqs_target, const CliqueSet *clqs_source )
clq_set_add_using_original_indexes	./clique.c	/^void clq_set_add_using_original_indexes( CliqueSet *target, const CliqueSet *source, const int orig[] )$/;"	f	signature:( CliqueSet *target, const CliqueSet *source, const int orig[] )
clq_set_add_using_original_indexes	./clique.h	/^void clq_set_add_using_original_indexes( CliqueSet *target, const CliqueSet *source, const int orig[] );$/;"	p	signature:( CliqueSet *target, const CliqueSet *source, const int orig[] )
clq_set_clear	./clique.c	/^void clq_set_clear( CliqueSet *clqSet )$/;"	f	signature:( CliqueSet *clqSet )
clq_set_clear	./clique.h	/^void clq_set_clear( CliqueSet *clqSet );$/;"	p	signature:( CliqueSet *clqSet )
clq_set_clique_already_inserted	./clique.c	/^int clq_set_clique_already_inserted ( const CliqueSet *clqSet, const int n, const int idx[]  )$/;"	f	signature:( const CliqueSet *clqSet, const int n, const int idx[] )
clq_set_clique_already_inserted	./clique.c	/^int clq_set_clique_already_inserted ( const CliqueSet *clqSet, const int n, const int idx[]  );$/;"	p	file:	signature:( const CliqueSet *clqSet, const int n, const int idx[] )
clq_set_clique_elements	./clique.c	/^const int *clq_set_clique_elements( const CliqueSet *clqSet, const int clique )$/;"	f	signature:( const CliqueSet *clqSet, const int clique )
clq_set_clique_elements	./clique.h	/^const int *clq_set_clique_elements( const CliqueSet *clqSet, const int clique );$/;"	p	signature:( const CliqueSet *clqSet, const int clique )
clq_set_clique_has_element	./clique.c	/^int clq_set_clique_has_element( const CliqueSet *clqSet, const int clique, const int element )$/;"	f	signature:( const CliqueSet *clqSet, const int clique, const int element )
clq_set_clique_has_element	./clique.h	/^int clq_set_clique_has_element( const CliqueSet *clqSet, const int clique, const int element );$/;"	p	signature:( const CliqueSet *clqSet, const int clique, const int element )
clq_set_clique_size	./clique.c	/^int clq_set_clique_size( const CliqueSet *clqSet, const int clique )$/;"	f	signature:( const CliqueSet *clqSet, const int clique )
clq_set_clique_size	./clique.h	/^int clq_set_clique_size( const CliqueSet *clqSet, const int clique );$/;"	p	signature:( const CliqueSet *clqSet, const int clique )
clq_set_cpy	./clique.c	/^void clq_set_cpy( CliqueSet *clqs_target, const CliqueSet *clqs_source )$/;"	f	signature:( CliqueSet *clqs_target, const CliqueSet *clqs_source )
clq_set_cpy	./clique.h	/^void clq_set_cpy( CliqueSet *clqs_target, const CliqueSet *clqs_source );$/;"	p	signature:( CliqueSet *clqs_target, const CliqueSet *clqs_source )
clq_set_create	./clique.c	/^CliqueSet *clq_set_create( )$/;"	f
clq_set_create	./clique.h	/^CliqueSet *clq_set_create( );$/;"	p	signature:( )
clq_set_enum_all_cliques_low_degree_nodes	./clique_separation.h	/^void clq_set_enum_all_cliques_low_degree_nodes( CliqueSeparation *sep, int iv[], const CGraph *origGraph, const CGraph *ppGraph );$/;"	p	signature:( CliqueSeparation *sep, int iv[], const CGraph *origGraph, const CGraph *ppGraph )
clq_set_free	./clique.c	/^void clq_set_free( CliqueSet **clqSet )$/;"	f	signature:( CliqueSet **clqSet )
clq_set_free	./clique.h	/^void clq_set_free( CliqueSet **clqSet );$/;"	p	signature:( CliqueSet **clqSet )
clq_set_get_clique	./clique.c	/^const IntSet *clq_set_get_clique( const CliqueSet *clqSet, const int idx )$/;"	f	signature:( const CliqueSet *clqSet, const int idx )
clq_set_get_clique	./clique.h	/^const IntSet *clq_set_get_clique( const CliqueSet *clqSet, const int idx );$/;"	p	signature:( const CliqueSet *clqSet, const int idx )
clq_set_load	./clique.c	/^CliqueSet *clq_set_load( const char *fileName )$/;"	f	signature:( const char *fileName )
clq_set_load	./clique.h	/^CliqueSet *clq_set_load( const char *fileName );$/;"	p	signature:( const char *fileName )
clq_set_number_of_cliques	./clique.c	/^int clq_set_number_of_cliques( const CliqueSet *clqSet )$/;"	f	signature:( const CliqueSet *clqSet )
clq_set_number_of_cliques	./clique.h	/^int clq_set_number_of_cliques( const CliqueSet *clqSet );$/;"	p	signature:( const CliqueSet *clqSet )
clq_set_print	./clique.c	/^void clq_set_print( const CliqueSet *clqSet )$/;"	f	signature:( const CliqueSet *clqSet )
clq_set_print	./clique.h	/^void clq_set_print( const CliqueSet *clqSet );$/;"	p	signature:( const CliqueSet *clqSet )
clq_set_save	./clique.c	/^void clq_set_save( const CGraph *cgraph, const CliqueSet *clqSet, const char *fileName )$/;"	f	signature:( const CGraph *cgraph, const CliqueSet *clqSet, const char *fileName )
clq_set_save	./clique.h	/^void clq_set_save( const CGraph *cgraph, const CliqueSet *clqSet, const char *fileName );$/;"	p	signature:( const CGraph *cgraph, const CliqueSet *clqSet, const char *fileName )
clq_set_weight	./clique.c	/^int clq_set_weight( const CliqueSet *clqSet, const int clique )$/;"	f	signature:( const CliqueSet *clqSet, const int clique )
clq_set_weight	./clique.h	/^int clq_set_weight( const CliqueSet *clqSet, const int clique );$/;"	p	signature:( const CliqueSet *clqSet, const int clique )
clq_set_weight_sum	./clique.c	/^int clq_set_weight_sum( CliqueSet *clqSet )$/;"	f	signature:( CliqueSet *clqSet )
clq_set_weight_sum	./clique.h	/^int clq_set_weight_sum( CliqueSet *clqSet );$/;"	p	signature:( CliqueSet *clqSet )
clq_turn_into_maximal	./clique.h	/^int clq_turn_into_maximal( const CGraph *cgraph, int clique[], int *size );$/;"	p	signature:( const CGraph *cgraph, int clique[], int *size )
clq_validate	./clique.c	/^int clq_validate( const CGraph *cgraph, const int size, const int nodes[], int *n1, int *n2 )$/;"	f	signature:( const CGraph *cgraph, const int size, const int nodes[], int *n1, int *n2 )
clq_validate	./clique.h	/^int clq_validate( const CGraph *cgraph, const int size, const int nodes[],$/;"	p	signature:( const CGraph *cgraph, const int size, const int nodes[], int *n1, int *n2 )
clqe	./clique_separation.c	/^    CliqueExtender *clqe;$/;"	m	struct:_CliqueSeparation	file:	access:public
clqe_check_nodes_cap	./clique_extender.c	/^void clqe_check_nodes_cap( CliqueExtender *clqe )$/;"	f	signature:( CliqueExtender *clqe )
clqe_create	./clique_extender.c	/^CliqueExtender *clqe_create()$/;"	f
clqe_create	./clique_extender.h	/^CliqueExtender *clqe_create();$/;"	p	signature:()
clqe_extend	./clique_extender.c	/^int clqe_extend( CliqueExtender *clqe, const CGraph *cgraph, const IntSet *clique,$/;"	f	signature:( CliqueExtender *clqe, const CGraph *cgraph, const IntSet *clique, const int weight, const CliqueExtendingMethod clqem )
clqe_extend	./clique_extender.h	/^int clqe_extend( CliqueExtender *clqe, const CGraph *cgraph, const IntSet *clique,$/;"	p	signature:( CliqueExtender *clqe, const CGraph *cgraph, const IntSet *clique, const int weight, const CliqueExtendingMethod clqem )
clqe_free	./clique_extender.c	/^void clqe_free( CliqueExtender  **clqe )$/;"	f	signature:( CliqueExtender **clqe )
clqe_free	./clique_extender.h	/^void clqe_free( CliqueExtender **clqe );$/;"	p	signature:( CliqueExtender **clqe )
clqe_get_best_candidates_clique_insertion	./clique_extender.c	/^int clqe_get_best_candidates_clique_insertion( CliqueExtender *clqe, const IntSet *clique,$/;"	f	signature:( CliqueExtender *clqe, const IntSet *clique, const CliqueExtendingMethod clqem )
clqe_get_cliques	./clique_extender.c	/^const CliqueSet *clqe_get_cliques( CliqueExtender *clqe )$/;"	f	signature:( CliqueExtender *clqe )
clqe_get_cliques	./clique_extender.h	/^const CliqueSet *clqe_get_cliques( CliqueExtender *clqe );$/;"	p	signature:( CliqueExtender *clqe )
clqe_get_costs	./clique_extender.c	/^const int *clqe_get_costs( CliqueExtender *clqe )$/;"	f	signature:( CliqueExtender *clqe )
clqe_get_costs	./clique_extender.h	/^const int *clqe_get_costs( CliqueExtender *clqe );$/;"	p	signature:( CliqueExtender *clqe )
clqe_get_max_candidates	./clique_extender.c	/^int clqe_get_max_candidates( CliqueExtender *clqe )$/;"	f	signature:( CliqueExtender *clqe )
clqe_get_max_candidates	./clique_extender.h	/^int clqe_get_max_candidates( CliqueExtender *clqe );$/;"	p	signature:( CliqueExtender *clqe )
clqe_get_max_clq_gen	./clique_extender.c	/^int clqe_get_max_clq_gen( CliqueExtender *clqe )$/;"	f	signature:( CliqueExtender *clqe )
clqe_get_max_clq_gen	./clique_extender.h	/^int clqe_get_max_clq_gen( CliqueExtender *clqe );$/;"	p	signature:( CliqueExtender *clqe )
clqe_set_clear	./clique_extender.c	/^void clqe_set_clear( CliqueExtender *clqe )$/;"	f	signature:( CliqueExtender *clqe )
clqe_set_clear	./clique_extender.h	/^void clqe_set_clear( CliqueExtender *clqe );$/;"	p	signature:( CliqueExtender *clqe )
clqe_set_costs	./clique_extender.c	/^void clqe_set_costs( CliqueExtender *clqe, const int costs[], const int n )$/;"	f	signature:( CliqueExtender *clqe, const int costs[], const int n )
clqe_set_costs	./clique_extender.h	/^void clqe_set_costs( CliqueExtender *clqe, const int costs[], const int n );$/;"	p	signature:( CliqueExtender *clqe, const int costs[], const int n )
clqe_set_max_candidates	./clique_extender.c	/^void clqe_set_max_candidates( CliqueExtender *clqe, const int max_size )$/;"	f	signature:( CliqueExtender *clqe, const int max_size )
clqe_set_max_candidates	./clique_extender.h	/^void clqe_set_max_candidates( CliqueExtender *clqe, const int max_size );$/;"	p	signature:( CliqueExtender *clqe, const int max_size )
clqe_set_max_clq_gen	./clique_extender.c	/^void clqe_set_max_clq_gen( CliqueExtender *clqe, const int maxClqGen )$/;"	f	signature:( CliqueExtender *clqe, const int maxClqGen )
clqe_set_max_clq_gen	./clique_extender.h	/^void clqe_set_max_clq_gen( CliqueExtender *clqe, const int maxClqGen );$/;"	p	signature:( CliqueExtender *clqe, const int maxClqGen )
cmp_by_node_degree	./cgraph.c	/^int cmp_by_node_degree( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
cmp_by_node_degree	./cgraph.c	/^int cmp_by_node_degree( const void *v1, const void *v2 );$/;"	p	file:	signature:( const void *v1, const void *v2 )
cmp_clq_weight	./clique_extender.c	/^int cmp_clq_weight( const void *e1, const void *e2 )$/;"	f	signature:( const void *e1, const void *e2 )
cmp_int_dbl_pair_a	./mip_compact.c	/^int cmp_int_dbl_pair_a( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
cmp_int_dbl_pair_a	./mip_compact.c	/^int cmp_int_dbl_pair_a( const void *v1, const void *v2 );$/;"	p	file:	signature:( const void *v1, const void *v2 )
cmp_int_dbl_pair_b	./mip_compact.c	/^int cmp_int_dbl_pair_b( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
cmp_int_dbl_pair_b	./mip_compact.c	/^int cmp_int_dbl_pair_b( const void *v1, const void *v2 );$/;"	p	file:	signature:( const void *v1, const void *v2 )
cmp_int_pair_b	./instance.c	/^int cmp_int_pair_b( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
cmp_int_pair_b	./instance.h	/^int cmp_int_pair_b( const void *v1, const void *v2 );$/;"	p	signature:( const void *v1, const void *v2 )
cmp_int_triple_j	./mip_compact.c	/^int cmp_int_triple_j( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
cmp_int_triple_j	./mip_compact.c	/^int cmp_int_triple_j( const void *v1, const void *v2 );$/;"	p	file:	signature:( const void *v1, const void *v2 )
cmp_int_triple_t	./mip_compact.c	/^int cmp_int_triple_t( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
cmp_int_triple_t	./mip_compact.c	/^int cmp_int_triple_t( const void *v1, const void *v2);$/;"	p	file:	signature:( const void *v1, const void *v2)
cmp_int_triple_time	./mip_compact.c	/^int cmp_int_triple_time( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
cmp_int_triple_time	./mip_compact.c	/^int cmp_int_triple_time( const void *v1, const void *v2 );$/;"	p	file:	signature:( const void *v1, const void *v2 )
cmp_int_triple_value	./mip_compact.c	/^int cmp_int_triple_value( const void *v1, const void *v2 )$/;"	f	signature:( const void *v1, const void *v2 )
cmp_int_triple_value	./mip_compact.c	/^int cmp_int_triple_value( const void *v1, const void *v2);$/;"	p	file:	signature:( const void *v1, const void *v2)
cmp_string	./dict_int.c	/^int cmp_string( const void *p1, const void *p2 );$/;"	p	file:	signature:( const void *p1, const void *p2 )
coefResNR	./mip_compact.c	/^    VecDbl **coefResNR;$/;"	m	struct:_MIPCompact	file:	access:public
coefResR	./mip_compact.c	/^    VecDbl ***coefResR;$/;"	m	struct:_MIPCompact	file:	access:public
compArc	./cgraph.c	/^int compArc( const void *p1, const void *p2 )$/;"	f	signature:( const void *p1, const void *p2 )
compArcsLX	./spaths.c	/^int compArcsLX( void *a1, void *a2 )$/;"	f	signature:( void *a1, void *a2 )
compNeighs	./spaths.c	/^int compNeighs( const void *n1, const void *n2 )$/;"	f	signature:( const void *n1, const void *n2 )
computeSumPred	./mip_compact.c	/^static double computeSumPred( const Instance *inst,  int *nz, const double coef,  int j, int ***TJ, int **nCont, int start, int end, int t, int s, const double ***x, const int ***xIdx, IntDblPair *cutIdxCo, int lifting )$/;"	f	file:	signature:( const Instance *inst, int *nz, const double coef, int j, int ***TJ, int **nCont, int start, int end, int t, int s, const double ***x, const int ***xIdx, IntDblPair *cutIdxCo, int lifting )
computeSumPred	./mip_compact.c	/^static double computeSumPred( const Instance *inst,  int *nz, const double coef,  int j, int ***TJ, int **nCont, int start, int end, int t, int s, const double ***x, const int ***xIdx, IntDblPair *cutIdxCo, int lifting );$/;"	p	file:	signature:( const Instance *inst, int *nz, const double coef, int j, int ***TJ, int **nCont, int start, int end, int t, int s, const double ***x, const int ***xIdx, IntDblPair *cutIdxCo, int lifting )
computeSumSucc	./mip_compact.c	/^static double computeSumSucc( const Instance *inst,  int *nz, const double coef, int j, int ***TJ, int **nCont, int start, int end, int t, int s, const double ***x, const int ***xIdx, IntDblPair *cutIdxCo );$/;"	p	file:	signature:( const Instance *inst, int *nz, const double coef, int j, int ***TJ, int **nCont, int start, int end, int t, int s, const double ***x, const int ***xIdx, IntDblPair *cutIdxCo )
computeSumSucc	./mip_compact.c	/^static double computeSumSucc( const Instance *inst, int *nz, const double coef,  int j, int ***TJ, int **nCont, int start, int end, int t, int s, const double ***x, const int ***xIdx, IntDblPair *cutIdxCo )$/;"	f	file:	signature:( const Instance *inst, int *nz, const double coef, int j, int ***TJ, int **nCont, int start, int end, int t, int s, const double ***x, const int ***xIdx, IntDblPair *cutIdxCo )
computeSumXAllModes	./mip_compact.h	/^double computeSumXAllModes( const Instance *inst, int j, int ***TJ, int **nCont, int start, int end, const double ***x );$/;"	p	signature:( const Instance *inst, int j, int ***TJ, int **nCont, int start, int end, const double ***x )
computeSumXAllModesSecondPart	./mip_compact.h	/^double computeSumXAllModesSecondPart( const Instance *inst,  int j, int ij, int t, int ***TJ, int **nCont, int start, const double ***x );$/;"	p	signature:( const Instance *inst, int j, int ij, int t, int ***TJ, int **nCont, int start, const double ***x )
conflicts	./grasp.c	/^    int *conflicts;$/;"	m	struct:_Grasp	file:	access:public
conflictsCap	./grasp.c	/^    int conflictsCap;$/;"	m	struct:_Grasp	file:	access:public
cont	./dict_int.c	/^    Dict_Bucket_int **cont;$/;"	m	struct:_Dict_int	file:	access:public
contLastJ	./neighborhood.c	/^    int contLastJ;$/;"	m	struct:_Neighborhood	file:	access:public
continuous	./mip_compact.c	/^    int continuous;$/;"	m	struct:_MIPCompact	file:	access:public
cost	./cgraph.c	/^    int cost;$/;"	m	struct:__anon2	file:	access:public
cost	./mode_set.c	/^    Cost cost;$/;"	m	struct:_ModeSet	file:	access:public
cost	./node_heap.c	/^    int cost;$/;"	m	struct:__anon12	file:	access:public
cost	./solution.c	/^    Cost cost;$/;"	m	struct:_Solution	file:	access:public
costs	./clique_extender.c	/^    int *costs;$/;"	m	struct:_CliqueExtender	file:	access:public
costs	./clique_separation.c	/^    int *costs;$/;"	m	struct:_CliqueSeparation	file:	access:public
costsCap	./clique_extender.c	/^    int costsCap;$/;"	m	struct:_CliqueExtender	file:	access:public
countChar	./str_utils.c	/^int countChar( const char *str, const char c )$/;"	f	signature:( const char *str, const char c )
countChar	./str_utils.h	/^int countChar( const char *str, const char c );$/;"	p	signature:( const char *str, const char c )
createConsLinkXD	./mip_compact.c	/^static void createConsLinkXD( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createConsLinkXD	./mip_compact.c	/^void createConsLinkXD( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createConsLinkXY	./mip_compact.c	/^static void createConsLinkXY( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createConsLinkXY	./mip_compact.c	/^void createConsLinkXY( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createConsLnkXU	./mip_compact.c	/^static void createConsLnkXU( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createConsLnkXU	./mip_compact.c	/^void createConsLnkXU( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createConsSelU	./mip_compact.c	/^static void createConsSelU( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createConsSelU	./mip_compact.c	/^void createConsSelU( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createD	./mip_compact.c	/^static void createD( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createD	./mip_compact.c	/^void createD( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createModeSelCons	./mip_compact.c	/^static void createModeSelCons( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createModeSelCons	./mip_compact.c	/^void createModeSelCons( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createPrecCons0	./mip_compact.c	/^static void createPrecCons0( MIPCompact *mipp,double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp,double timeLeft )
createPrecCons0	./mip_compact.c	/^void createPrecCons0( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createPrecCons1	./mip_compact.c	/^static void createPrecCons1( MIPCompact *mipp,double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp,double timeLeft )
createPrecCons1	./mip_compact.c	/^void createPrecCons1( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createPrecCons2	./mip_compact.c	/^static void createPrecCons2( MIPCompact *mipp, double timeLeft )$/;"	f	file:	signature:( MIPCompact *mipp, double timeLeft )
createPrecCons2	./mip_compact.c	/^static void createPrecCons2( MIPCompact *mipp,double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp,double timeLeft )
createResConsNR	./mip_compact.c	/^static void createResConsNR( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createResConsNR	./mip_compact.c	/^void createResConsNR( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createResConsR	./mip_compact.c	/^static void createResConsR( MIPCompact *mipp , double timeLeft);$/;"	p	file:	signature:( MIPCompact *mipp , double timeLeft)
createResConsR	./mip_compact.c	/^void createResConsR( MIPCompact *mipp, double timeLeft)$/;"	f	signature:( MIPCompact *mipp, double timeLeft)
createU	./mip_compact.c	/^static void createU( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createU	./mip_compact.c	/^void createU( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
createX	./mip_compact.c	/^static void createX( MIPCompact *mipp , double timeLeft);$/;"	p	file:	signature:( MIPCompact *mipp , double timeLeft)
createX	./mip_compact.c	/^void createX( MIPCompact *mipp , double timeLeft)$/;"	f	signature:( MIPCompact *mipp , double timeLeft)
createY	./mip_compact.c	/^static void createY( MIPCompact *mipp, double timeLeft );$/;"	p	file:	signature:( MIPCompact *mipp, double timeLeft )
createY	./mip_compact.c	/^void createY( MIPCompact *mipp, double timeLeft )$/;"	f	signature:( MIPCompact *mipp, double timeLeft )
create_pricing_problems	./proj_decomp.c	/^static void create_pricing_problems( ProjDecomp *prjdc );$/;"	p	file:	signature:( ProjDecomp *prjdc )
create_pricing_problems	./proj_decomp.c	/^void create_pricing_problems( ProjDecomp *prjdc )$/;"	f	signature:( ProjDecomp *prjdc )
criticalPath	./instance.c	/^    int criticalPath;$/;"	m	struct:_Project	file:	access:public
cs	./clique_elite_set.c	/^    const CliqueSet *cs;$/;"	m	struct:_CliqueEliteSet	file:	access:public
currentFO	./test.c	/^    Cost currentFO;$/;"	m	struct:_Test	file:	access:public
currentModes	./ms_solver_lahc.c	/^    ModeSet *currentModes;$/;"	m	struct:_MSSolverLAHC	file:	access:public
currentNeigh	./test.c	/^    int currentNeigh;$/;"	m	struct:_Test	file:	access:public
currentTime	./test.c	/^    double currentTime;$/;"	m	struct:_Test	file:	access:public
cutCLIQUE	./mip_compact.c	/^    int cutCLIQUE;$/;"	m	struct:_MIPCompact	file:	access:public
cutDefaultCBC	./mip_compact.c	/^    int cutDefaultCBC;$/;"	m	struct:_MIPCompact	file:	access:public
cutP	./mip_compact.c	/^    CutPool *cutP;$/;"	m	struct:_MIPCompact	file:	access:public
cutP_findElement	./cut_pool.c	/^int cutP_findElement( CutPool *cutP, int key, int c, const int *idx, const double *coe, int lp_cols, int type, int onoff)$/;"	f	signature:( CutPool *cutP, int key, int c, const int *idx, const double *coe, int lp_cols, int type, int onoff)
cutP_findElement	./cut_pool.h	/^int cutP_findElement( CutPool *cutP, int key, int c, const int *idx, const double *coe, int lp_cols, int type, int onoff);$/;"	p	signature:( CutPool *cutP, int key, int c, const int *idx, const double *coe, int lp_cols, int type, int onoff)
cutPrec	./mip_compact.c	/^    int cutPrec;$/;"	m	struct:_MIPCompact	file:	access:public
cutRR	./mip_compact.c	/^    int cutRR;$/;"	m	struct:_MIPCompact	file:	access:public
dIdx	./mip_compact.c	/^    int *dIdx;$/;"	m	struct:_MIPCompact	file:	access:public
dIdx	./ms_solver_mip.c	/^    int *dIdx;$/;"	m	struct:_MSM_Solver	file:	access:public
dJ	./mip_compact.c	/^    VecInt **dJ;$/;"	m	struct:_MIPCompact	file:	access:public
defValue	./dict_int.c	/^    int defValue;$/;"	m	struct:_Dict_int	file:	access:public
degree	./cgraph.c	/^    unsigned long int *degree;$/;"	m	struct:_CGraph	file:	access:public
degree	./cgraph.c	/^    unsigned long int degree;$/;"	m	struct:__anon1	file:	access:public
degree	./top_sort.c	/^    int *degree;$/;"	m	struct:_TopSort	file:	access:public
degreeCap	./clique_enum.c	/^    int degreeCap;$/;"	m	struct:_CliqueEnumerator	file:	access:public
depthCap	./clique_enum.c	/^    int depthCap;$/;"	m	struct:_CliqueEnumerator	file:	access:public
dfsNeighs	./clique_enum.c	/^    IntSet *dfsNeighs;$/;"	m	struct:_CliqueEnumerator	file:	access:public
dfsNodesLeft	./clique_enum.c	/^    IntSet *dfsNodesLeft;$/;"	m	struct:_CliqueEnumerator	file:	access:public
difDegree	./grasp.c	/^    float difDegree;$/;"	m	struct:_Grasp	file:	access:public
diffNodeW	./grasp.c	/^    float diffNodeW;$/;"	m	struct:_Grasp	file:	access:public
digitsInLine	./str_utils.c	/^int digitsInLine( const char *str, int str_s )$/;"	f	signature:( const char *str, int str_s )
digitsInLine	./str_utils.h	/^int digitsInLine( const char *str, int str_s );$/;"	p	signature:( const char *str, int str_s )
dist	./spaths.c	/^    int *dist;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
distance	./digraph.h	/^    int distance;$/;"	m	struct:__anon7	access:public
distance	./digraph.h	/^    int distance;$/;"	m	struct:__anon8	access:public
divResJob	./lahc.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_LAHC	file:	access:public
divResJob	./vns.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_VNS	file:	access:public
divResMode	./lahc.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_LAHC	file:	access:public
divResMode	./vns.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_VNS	file:	access:public
divTransJob	./lahc.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_LAHC	file:	access:public
divTransJob	./vns.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_VNS	file:	access:public
divTransMode	./lahc.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_LAHC	file:	access:public
divTransMode	./vns.c	/^    int divResMode, divResJob, divTransMode, divTransJob;$/;"	m	struct:_VNS	file:	access:public
dnames	./mip_compact.c	/^    DictInt *dnames;$/;"	m	struct:_MIPCompact	file:	access:public
dohCapIdx	./oddhs.c	/^    int dohCapIdx;      \/\/ capacity for odd hole elements$/;"	m	struct:_OddHoleSep	file:	access:public
dohCapOH	./oddhs.c	/^    int dohCapOH;       \/\/ capacity for odd holes$/;"	m	struct:_OddHoleSep	file:	access:public
dohCapWCIdx	./oddhs.c	/^    int dohCapWCIdx;    \/\/ capacity for odd hole wheel centers$/;"	m	struct:_OddHoleSep	file:	access:public
dohCount	./oddhs.c	/^    int dohCount;       \/\/ number of stored odd holes$/;"	m	struct:_OddHoleSep	file:	access:public
dohIV	./oddhs.c	/^    char *dohIV;         \/\/ incidence vector for variables considered here$/;"	m	struct:_OddHoleSep	file:	access:public
dohIVCap	./oddhs.c	/^    int dohIVCap;$/;"	m	struct:_OddHoleSep	file:	access:public
dohIdx	./oddhs.c	/^    int *dohIdx;        \/\/ indexes of all odd holes$/;"	m	struct:_OddHoleSep	file:	access:public
dohStart	./oddhs.c	/^    int *dohStart;      \/\/ start indexes for the i-th odd hole$/;"	m	struct:_OddHoleSep	file:	access:public
dohWCIdx	./oddhs.c	/^    int *dohWCIdx;      \/\/ indexes of all wheel centers$/;"	m	struct:_OddHoleSep	file:	access:public
dohWCStart	./oddhs.c	/^    int *dohWCStart;    \/\/ wheel center starts$/;"	m	struct:_OddHoleSep	file:	access:public
dueDate	./instance.c	/^    int dueDate;$/;"	m	struct:_Project	file:	access:public
duration	./instance.c	/^    int duration;$/;"	m	struct:_Mode	file:	access:public
elements	./vint_queue.h	/^    int *elements;$/;"	m	struct:__anon13	access:public
elements	./vint_set.h	/^    int *elements;$/;"	m	struct:__anon14	access:public
enumUsage	./clique_separation.c	/^    int enumUsage;$/;"	m	struct:_CliqueSeparation	file:	access:public
est	./instance.c	/^    int est;$/;"	m	struct:_Job	file:	access:public
evalNodesLeft	./grasp.c	/^    float *evalNodesLeft;$/;"	m	struct:_Grasp	file:	access:public
exact_clique_extension	./clique_extender.c	/^int exact_clique_extension( CliqueExtender *clqe, const IntSet *clique, const int weight )$/;"	f	signature:( CliqueExtender *clqe, const IntSet *clique, const int weight )
extendCliques	./clique_separation.c	/^    int extendCliques;$/;"	m	struct:_CliqueSeparation	file:	access:public
extended	./clique_separation.c	/^    char *extended;$/;"	m	struct:_CliqueSeparation	file:	access:public
extendedCap	./clique_separation.c	/^    int extendedCap;$/;"	m	struct:_CliqueSeparation	file:	access:public
f	./lahc.c	/^    Cost *f;$/;"	m	struct:_LAHC	file:	access:public
f	./ms_solver_lahc.c	/^    Cost *f;$/;"	m	struct:_MSSolverLAHC	file:	access:public
findJobOnPath	./instance.c	/^int findJobOnPath(const Instance *inst, int s, int nSuccs, VecInt **paths, int j)$/;"	f	signature:(const Instance *inst, int s, int nSuccs, VecInt **paths, int j)
firstJob	./mode_set.c	/^    int firstJob;$/;"	m	struct:_ModeSet	file:	access:public
firstJob	./ms_solver_mip.c	/^    int firstJob;$/;"	m	struct:_MSM_Solver	file:	access:public
firstOccurrence	./str_utils.c	/^int firstOccurrence( const char *str, const char c )$/;"	f	signature:( const char *str, const char c )
firstOccurrence	./str_utils.h	/^int firstOccurrence( const char *str, const char c );$/;"	p	signature:( const char *str, const char c )
floydWarshallMax	./instance.c	/^void floydWarshallMax(const Instance *inst, int **D, int nJobs)$/;"	f	signature:(const Instance *inst, int **D, int nJobs)
floydWarshallMax	./instance.h	/^void floydWarshallMax(const Instance *inst, int **D, int nJobs);$/;"	p	signature:(const Instance *inst, int **D, int nJobs)
fracPart	./clique_separation.c	/^double fracPart( const double x )$/;"	f	signature:( const double x )
fracPart	./clique_separation.c	/^double fracPart( const double x );$/;"	p	file:	signature:( const double x )
frac_part_weight	./grasp.c	/^int frac_part_weight( int w )$/;"	f	signature:( int w )
freeFWSpace	./spaths.c	/^void freeFWSpace( ShortestPathsFinder* spf )$/;"	f	signature:( ShortestPathsFinder* spf )
freeFWSpace	./spaths.c	/^void freeFWSpace( ShortestPathsFinder* spf );$/;"	p	file:	signature:( ShortestPathsFinder* spf )
front	./vint_queue.h	/^    int front;$/;"	m	struct:__anon13	access:public
fwCapArcs	./spaths.c	/^    int fwCapArcs;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
fwCapNodes	./spaths.c	/^    int fwCapNodes;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
fwDist	./spaths.c	/^    int **fwDist;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
fwPrev	./spaths.c	/^    int **fwPrev;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
getFileName	./str_utils.c	/^char *getFileName(char *destiny, const char *fileWithPath)$/;"	f	signature:(char *destiny, const char *fileWithPath)
getFileName	./str_utils.h	/^char *getFileName(char *destiny, const char *fileWithPath);$/;"	p	signature:(char *destiny, const char *fileWithPath)
getParamName	./str_utils.c	/^char* getParamName(char* target, const char* str)$/;"	f	signature:(char* target, const char* str)
getParamName	./str_utils.h	/^char* getParamName(char* target, const char* str);$/;"	p	signature:(char* target, const char* str)
getParamValue	./str_utils.c	/^char* getParamValue(char* target, const char* str)$/;"	f	signature:(char* target, const char* str)
getParamValue	./str_utils.h	/^char* getParamValue(char* target, const char* str);$/;"	p	signature:(char* target, const char* str)
getXIdx	./mip_compact.c	/^int getXIdx( const MIPCompact *mipp, int j, int m, int t )$/;"	f	signature:( const MIPCompact *mipp, int j, int m, int t )
getXIdx	./mip_compact.c	/^static int getXIdx( const MIPCompact *mipp, int j, int m, int t );$/;"	p	file:	signature:( const MIPCompact *mipp, int j, int m, int t )
grasp_build_candidate_list	./grasp.c	/^void grasp_build_candidate_list( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_build_candidate_list	./grasp.h	/^void grasp_build_candidate_list( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_create	./grasp.c	/^Grasp *grasp_create( const CGraph *_cgraph, const int _minW )$/;"	f	signature:( const CGraph *_cgraph, const int _minW )
grasp_create	./grasp.h	/^Grasp *grasp_create( const CGraph *_cgraph, const int _minW );$/;"	p	signature:( const CGraph *_cgraph, const int _minW )
grasp_fill_initial_probabilities	./grasp.c	/^void grasp_fill_initial_probabilities( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_fill_initial_probabilities	./grasp.h	/^void grasp_fill_initial_probabilities( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_fill_nodes_left	./grasp.c	/^void grasp_fill_nodes_left( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_fill_nodes_left	./grasp.h	/^void grasp_fill_nodes_left( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_free	./grasp.c	/^void grasp_free( Grasp **grasp )$/;"	f	signature:( Grasp **grasp )
grasp_free	./grasp.h	/^void grasp_free( Grasp **grasp );$/;"	p	signature:( Grasp **grasp )
grasp_get_best_weight	./grasp.c	/^int grasp_get_best_weight( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_get_best_weight	./grasp.h	/^int grasp_get_best_weight( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_get_worst_weight	./grasp.c	/^int grasp_get_worst_weight( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_get_worst_weight	./grasp.h	/^int grasp_get_worst_weight( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_ini_reactive_info	./grasp.c	/^void grasp_ini_reactive_info( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_ini_reactive_info	./grasp.h	/^void grasp_ini_reactive_info( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_iteration	./grasp.c	/^void grasp_iteration( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_iteration	./grasp.h	/^void grasp_iteration( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_prepare_roullete	./grasp.c	/^void grasp_prepare_roullete( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_prepare_roullete	./grasp.h	/^void grasp_prepare_roullete( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_recompute_reactive_probabilities	./grasp.c	/^void grasp_recompute_reactive_probabilities( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_recompute_reactive_probabilities	./grasp.h	/^void grasp_recompute_reactive_probabilities( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_run	./grasp.c	/^void grasp_run( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_run	./grasp.h	/^void grasp_run( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_select_alpha	./grasp.c	/^void grasp_select_alpha( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_select_alpha	./grasp.h	/^void grasp_select_alpha( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_select_from_candidate_list	./grasp.c	/^int grasp_select_from_candidate_list( const Grasp *grasp )$/;"	f	signature:( const Grasp *grasp )
grasp_select_from_candidate_list	./grasp.h	/^int grasp_select_from_candidate_list( const Grasp *grasp );$/;"	p	signature:( const Grasp *grasp )
grasp_set_alpha	./grasp.c	/^void grasp_set_alpha( Grasp *grasp, const double _alpha )$/;"	f	signature:( Grasp *grasp, const double _alpha )
grasp_set_alpha	./grasp.h	/^void grasp_set_alpha( Grasp *grasp, const double _alpha );$/;"	p	signature:( Grasp *grasp, const double _alpha )
grasp_set_alpha_choice	./grasp.c	/^void grasp_set_alpha_choice( Grasp *grasp, const int choice )$/;"	f	signature:( Grasp *grasp, const int choice )
grasp_set_alpha_choice	./grasp.h	/^void grasp_set_alpha_choice( Grasp *grasp, const int choice );$/;"	p	signature:( Grasp *grasp, const int choice )
grasp_set_max_no_improvement	./grasp.c	/^void grasp_set_max_no_improvement( Grasp *grasp, const int _max_ni_it )$/;"	f	signature:( Grasp *grasp, const int _max_ni_it )
grasp_set_max_no_improvement	./grasp.h	/^void grasp_set_max_no_improvement( Grasp *grasp, const int _max_ni_it );$/;"	p	signature:( Grasp *grasp, const int _max_ni_it )
grasp_solution_set	./grasp.c	/^CliqueSet *grasp_solution_set( Grasp *grasp )$/;"	f	signature:( Grasp *grasp )
grasp_solution_set	./grasp.h	/^CliqueSet *grasp_solution_set( Grasp *grasp );$/;"	p	signature:( Grasp *grasp )
grasp_update_nodes_left	./grasp.c	/^void grasp_update_nodes_left( Grasp *grasp, const int n, const int neighbors[], const int nodeToEnter )$/;"	f	signature:( Grasp *grasp, const int n, const int neighbors[], const int nodeToEnter )
grasp_update_nodes_left	./grasp.h	/^void grasp_update_nodes_left( Grasp *grasp, const int n, const int neighbors[], const int nodeToEnter );$/;"	p	signature:( Grasp *grasp, const int n, const int neighbors[], const int nodeToEnter )
hasCosts	./clique_separation.c	/^    char hasCosts;$/;"	m	struct:_CliqueSeparation	file:	access:public
hasIndPred	./instance.c	/^    int *hasIndPred;$/;"	m	struct:_Job	file:	access:public
hasIndSucc	./instance.c	/^    int *hasIndSucc;$/;"	m	struct:_Job	file:	access:public
hasIniSol	./mip_compact.c	/^    char hasIniSol;$/;"	m	struct:_MIPCompact	file:	access:public
hasPred	./instance.c	/^    int *hasPred;$/;"	m	struct:_Job	file:	access:public
hasSolution	./mip_compact.c	/^    char hasSolution;$/;"	m	struct:_MIPCompact	file:	access:public
hasSucc	./instance.c	/^    int *hasSucc;$/;"	m	struct:_Job	file:	access:public
hash	./clique.c	/^    IntSet *hash;$/;"	m	struct:_CliqueSet	file:	access:public
hashCuts	./cut_pool.c	/^    VecInt **hashCuts;$/;"	m	struct:_CutPool	file:	access:public
hashSize	./dict_int.c	/^    unsigned int hashSize;$/;"	m	struct:_Dict_int	file:	access:public
hash_code_vint	./cut_pool.c	/^int hash_code_vint( int n, const int *v, int hashSize )$/;"	f	signature:( int n, const int *v, int hashSize )
hash_code_vint	./cut_pool.h	/^int hash_code_vint( int n, const int *v, int hashSize );$/;"	p	signature:( int n, const int *v, int hashSize )
hash_numbers	./clique.c	/^static const size_t hash_numbers[] = { 37, 31, 29, 17, 13, 11, 7, 1 };$/;"	v	file:
hashval	./cut_pool.c	/^static const unsigned int hashval[] = { 11, 269, 3, 7, 31, 37, 131, 13, 17, 647, 653, 89, 97, 101, 39, 149, 151, 157, 821, 257, 263, 389, 397, 457, 461, 463, 331, 337, 347, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 9, 53, 59  };$/;"	v	file:
hashval	./dict_int.c	/^static const unsigned int hashval[] = { 11, 269, 3, 7, 31, 37, 131, 13, 17, 647, 653, 89, 97, 101, 39, 149, 151, 157, 821, 257, 263, 389, 397, \\$/;"	v	file:
head	./cgraph.c	/^    int head;$/;"	m	struct:CGArc	file:	access:public
head	./digraph.h	/^    int head;$/;"	m	struct:__anon7	access:public
head	./list_int.c	/^    Node *head, *last;$/;"	m	struct:_ListInt	file:	access:public
icaActivity	./oddhs.c	/^    int *icaActivity; \/\/ mapping of the fractional solution value to an$/;"	m	struct:_OddHoleSep	file:	access:public
icaCapacity	./oddhs.c	/^    int icaCapacity;$/;"	m	struct:_OddHoleSep	file:	access:public
icaCount	./oddhs.c	/^    int icaCount;$/;"	m	struct:_OddHoleSep	file:	access:public
icaIdx	./oddhs.c	/^    int *icaIdx;      \/\/ original index$/;"	m	struct:_OddHoleSep	file:	access:public
idx	./clique_extender.c	/^    int idx;$/;"	m	struct:__anon3	file:	access:public
idx	./mip_compact.c	/^    int idx;$/;"	m	struct:__anon10	file:	access:public
idxFirstJob	./instance.c	/^    int idxFirstJob;$/;"	m	struct:_Project	file:	access:public
idxFirstJob	./mip_compact.c	/^    int idxFirstJob;$/;"	m	struct:_MIPCompact	file:	access:public
idxIniResNProj	./instance.c	/^    int *idxIniResNProj;$/;"	m	struct:_Instance	file:	access:public
idxModesSort	./instance.c	/^    IntPair *idxModesSort;$/;"	m	struct:_Job	file:	access:public
idxOnProject	./instance.c	/^    int idxOnProject;$/;"	m	struct:_Job	file:	access:public
idxProj	./mip_compact.c	/^    int idxProj;$/;"	m	struct:_MIPCompact	file:	access:public
idxProject	./instance.c	/^    int idxProject;$/;"	m	struct:_Job	file:	access:public
idxResN	./instance.c	/^    int *idxResN;$/;"	m	struct:_Mode	file:	access:public
idxResNR	./mip_compact.c	/^    VecInt **idxResNR;$/;"	m	struct:_MIPCompact	file:	access:public
idxResR	./instance.c	/^    int *idxResR;$/;"	m	struct:_Mode	file:	access:public
idxResR	./mip_compact.c	/^    VecInt ***idxResR;$/;"	m	struct:_MIPCompact	file:	access:public
idxRowCap	./proj_decomp.c	/^    int **idxRowCap;$/;"	m	struct:_ProjDecomp	file:	access:public
improveFO	./test.c	/^    Cost *improveFO;$/;"	m	struct:_Test	file:	access:public
improveNeigh	./test.c	/^    int *improveNeigh;$/;"	m	struct:_Test	file:	access:public
index	./instance.c	/^    int index;$/;"	m	struct:_Job	file:	access:public
index	./instance.c	/^    int index;$/;"	m	struct:_Mode	file:	access:public
index	./instance.c	/^    int index;$/;"	m	struct:_Project	file:	access:public
infeasibility	./mode_set.c	/^    int infeasibility;$/;"	m	struct:_ModeSet	file:	access:public
iniSol	./lahc.c	/^    Solution *iniSol;$/;"	m	struct:_LAHC	file:	access:public
iniSol	./sa.c	/^    Solution *iniSol;$/;"	m	struct:_SA	file:	access:public
iniSol	./vnd.c	/^    Solution *iniSol;$/;"	m	struct:_VND	file:	access:public
iniSol	./vns.c	/^    Solution *iniSol;$/;"	m	struct:_VNS	file:	access:public
initialProbabilities	./learning.c	/^    double *initialProbabilities, *probabilities;$/;"	m	struct:_LearningAutomata	file:	access:public
inst	./constructive.c	/^    const struct _Instance *inst;$/;"	m	struct:_Constructive	typeref:struct:_Constructive::_Instance	file:	access:public
inst	./cut_pool.c	/^    const Instance* inst;$/;"	m	struct:_CutPool	file:	access:public
inst	./ils.c	/^    const struct _Instance *inst;$/;"	m	struct:_ILS	typeref:struct:_ILS::_Instance	file:	access:public
inst	./lahc.c	/^    const struct _Instance *inst;$/;"	m	struct:_LAHC	typeref:struct:_LAHC::_Instance	file:	access:public
inst	./long_compl_path.c	/^    const Instance *inst;$/;"	m	struct:_LongestComplPath	file:	access:public
inst	./mip_compact.c	/^    const Instance *inst;$/;"	m	struct:_MIPCompact	file:	access:public
inst	./mode_set.c	/^    const struct _Instance *inst;$/;"	m	struct:_ModeSet	typeref:struct:_ModeSet::_Instance	file:	access:public
inst	./ms_solver_lahc.c	/^    const struct _Instance *inst;$/;"	m	struct:_MSSolverLAHC	typeref:struct:_MSSolverLAHC::_Instance	file:	access:public
inst	./ms_solver_mip.c	/^    const Instance *inst;$/;"	m	struct:_MSM_Solver	file:	access:public
inst	./neighborhood.c	/^    const struct _Instance *inst;$/;"	m	struct:_Neighborhood	typeref:struct:_Neighborhood::_Instance	file:	access:public
inst	./proj_decomp.c	/^    const Instance *inst;$/;"	m	struct:_ProjDecomp	file:	access:public
inst	./rrusage.c	/^    const struct _Instance *inst;$/;"	m	struct:_RRUsage	typeref:struct:_RRUsage::_Instance	file:	access:public
inst	./sa.c	/^    const struct _Instance *inst;$/;"	m	struct:_SA	typeref:struct:_SA::_Instance	file:	access:public
inst	./solution.c	/^    const struct _Instance *inst;$/;"	m	struct:_Solution	typeref:struct:_Solution::_Instance	file:	access:public
inst	./test.c	/^    const struct _Instance *inst;$/;"	m	struct:_Test	typeref:struct:_Test::_Instance	file:	access:public
inst	./top_sort.c	/^    const Instance *inst;$/;"	m	struct:_TopSort	file:	access:public
inst	./vnd.c	/^    const struct _Instance *inst;$/;"	m	struct:_VND	typeref:struct:_VND::_Instance	file:	access:public
inst	./vns.c	/^    const struct _Instance *inst;$/;"	m	struct:_VNS	typeref:struct:_VNS::_Instance	file:	access:public
int_vector_equals	./clique.c	/^int int_vector_equals( const int n1, const int idx1[], const int n2, const int idx2[] )$/;"	f	signature:( const int n1, const int idx1[], const int n2, const int idx2[] )
int_vector_equals	./clique.c	/^int int_vector_equals( const int n1, const int idx1[], const int n2, const int idx2[] );$/;"	p	file:	signature:( const int n1, const int idx1[], const int n2, const int idx2[] )
int_vector_hash_code	./clique.c	/^size_t int_vector_hash_code( const int n, const int idx[] )$/;"	f	signature:( const int n, const int idx[] )
int_vector_hash_code	./clique.c	/^size_t int_vector_hash_code( const int n, const int idx[] );$/;"	p	file:	signature:( const int n, const int idx[] )
intensity	./neighborhood.c	/^    long double *intensity;$/;"	m	struct:_Neighborhood	file:	access:public
intensityAux	./neighborhood.c	/^    long double *intensityAux;$/;"	m	struct:_Neighborhood	file:	access:public
intervalE	./neighborhood.c	/^    long double intervalE;$/;"	m	struct:_Neighborhood	file:	access:public
intervalE	./test.c	/^    long double *intervalE;$/;"	m	struct:_Test	file:	access:public
intervalI	./neighborhood.c	/^    long double intervalI;$/;"	m	struct:_Neighborhood	file:	access:public
intervalI	./test.c	/^    long double *intervalI;$/;"	m	struct:_Test	file:	access:public
isEmpty	./mode_set.c	/^    int isEmpty;$/;"	m	struct:_ModeSet	file:	access:public
it	./constructive.c	/^    int it;$/;"	m	struct:_Constructive	file:	access:public
it	./neighborhood.c	/^    int it;$/;"	m	struct:_Neighborhood	file:	access:public
it	./test.c	/^    int it;$/;"	m	struct:_Test	file:	access:public
itLAHC	./vns.c	/^    int itLAHC;$/;"	m	struct:_VNS	file:	access:public
itRNA	./vns.c	/^    int itRNA;$/;"	m	struct:_VNS	file:	access:public
itUpdate	./lahc.c	/^    int itUpdate;$/;"	m	struct:_LAHC	file:	access:public
item	./stack.c	/^    int *item;$/;"	m	struct:_Stack	file:	access:public
iteration	./grasp.c	/^    int iteration;$/;"	m	struct:_Grasp	file:	access:public
iters	./learning.c	/^    int iters;$/;"	m	struct:_LearningAutomata	file:	access:public
iv	./cgraph.c	/^    int *iv;  \/* incidence vector *\/$/;"	m	struct:_CGraph	file:	access:public
iv	./clique_separation.c	/^    int *iv;$/;"	m	struct:_CliqueSeparation	file:	access:public
ivreCap	./oddhs.c	/^    int ivreCap;$/;"	m	struct:_OddHoleSep	file:	access:public
ivreIdx	./oddhs.c	/^    int *ivreIdx;$/;"	m	struct:_OddHoleSep	file:	access:public
j	./mip_compact.c	/^    int j;$/;"	m	struct:__anon10	file:	access:public
jIdx	./mip_compact.c	/^    VecInt **jIdx;$/;"	m	struct:_MIPCompact	file:	access:public
jmIdx	./mip_compact.c	/^    VecInt ***jmIdx;$/;"	m	struct:_MIPCompact	file:	access:public
jmtFixed	./mip_compact.c	/^    IntTriple *jmtFixed;$/;"	m	struct:_MIPCompact	file:	access:public
jmtFractional	./mip_compact.c	/^    IntTriple *jmtFractional;$/;"	m	struct:_MIPCompact	file:	access:public
jmtIntegral	./mip_compact.c	/^    IntTriple *jmtIntegral;$/;"	m	struct:_MIPCompact	file:	access:public
jobFixed	./mip_compact.c	/^    int *jobFixed;$/;"	m	struct:_MIPCompact	file:	access:public
jobIntegral	./mip_compact.c	/^    int *jobIntegral;$/;"	m	struct:_MIPCompact	file:	access:public
jobs	./instance.c	/^    Job *jobs;$/;"	m	struct:_Instance	file:	access:public
jobs	./instance.c	/^    Job *jobs;$/;"	m	struct:_Project	file:	access:public
jobsTS	./top_sort.c	/^    int *jobsTS;$/;"	m	struct:_TopSort	file:	access:public
jtIdx	./mip_compact.c	/^    VecInt ***jtIdx;$/;"	m	struct:_MIPCompact	file:	access:public
keyPos	./dict_int.c	/^    int keyPos;$/;"	m	struct:__anon6	file:	access:public
keys	./dict_int.c	/^    VecStr *keys;$/;"	m	struct:_Dict_int	file:	access:public
la	./lahc.c	/^    LearningAutomata *la;$/;"	m	struct:_LAHC	file:	access:public
la	./sa.c	/^    LearningAutomata *la;$/;"	m	struct:_SA	file:	access:public
la	./vns.c	/^    LearningAutomata * la;$/;"	m	struct:_VNS	file:	access:public
last	./list_int.c	/^    Node *head, *last;$/;"	m	struct:_ListInt	file:	access:public
lastJ	./neighborhood.c	/^    int *lastJ;$/;"	m	struct:_Neighborhood	file:	access:public
lastJob	./mode_set.c	/^    int lastJob;$/;"	m	struct:_ModeSet	file:	access:public
lastJob	./ms_solver_mip.c	/^    int lastJob;$/;"	m	struct:_MSM_Solver	file:	access:public
lastN	./neighborhood.c	/^    int lastN;$/;"	m	struct:_Neighborhood	file:	access:public
lastN	./test.c	/^    int lastN;$/;"	m	struct:_Test	file:	access:public
lastNSelections	./learning.c	/^    ListInt *lastNSelections;$/;"	m	struct:_LearningAutomata	file:	access:public
lastOccurrence	./str_utils.c	/^int lastOccurrence( const char *str, const char c )$/;"	f	signature:( const char *str, const char c )
lastOccurrence	./str_utils.h	/^int lastOccurrence( const char *str, const char c );$/;"	p	signature:( const char *str, const char c )
lastSelection	./learning.c	/^    int lastSelection;$/;"	m	struct:_LearningAutomata	file:	access:public
learning	./lahc.c	/^    int learning;$/;"	m	struct:_LAHC	file:	access:public
learning	./neighborhood.c	/^    int learning;$/;"	m	struct:_Neighborhood	file:	access:public
learning	./sa.c	/^    int learning;$/;"	m	struct:_SA	file:	access:public
learningRate	./learning.c	/^    double learningRate, learningRate2;$/;"	m	struct:_LearningAutomata	file:	access:public
learningRate2	./learning.c	/^    double learningRate, learningRate2;$/;"	m	struct:_LearningAutomata	file:	access:public
lenAlphaNumChars	./spaths.c	/^int lenAlphaNumChars( char *str )$/;"	f	signature:( char *str )
lfa	./constructive.c	/^    int lfa; \/\/will be removed after find the best parameters.$/;"	m	struct:_Constructive	file:	access:public
lfa	./lahc.c	/^    int lfa;$/;"	m	struct:_LAHC	file:	access:public
lfa	./ms_solver_lahc.c	/^    int lfa;$/;"	m	struct:_MSSolverLAHC	file:	access:public
lfa	./vns.c	/^    int lfa;$/;"	m	struct:_VNS	file:	access:public
lifting	./mip_compact.c	/^    int lifting;$/;"	m	struct:_MIPCompact	file:	access:public
log	./neighborhood.c	/^    int log;$/;"	m	struct:_Neighborhood	file:	access:public
lowDegree	./cgraph.c	/^    unsigned long int lowDegree;$/;"	m	struct:_CGraph	file:	access:public
lp	./long_compl_path.c	/^    int *lp;$/;"	m	struct:_LongestComplPath	file:	access:public
lp_add_bin_cols	./lp.h	/^void lp_add_bin_cols( LinearProgram *lp, const int count, double *obj, char **name );$/;"	p	signature:( LinearProgram *lp, const int count, double *obj, char **name )
lp_add_col	./lp.h	/^void lp_add_col( LinearProgram *lp, double obj, double lb, double ub, char integer, char *name, int nz, int *rowIdx, double *rowCoef );$/;"	p	signature:( LinearProgram *lp, double obj, double lb, double ub, char integer, char *name, int nz, int *rowIdx, double *rowCoef )
lp_add_cols	./lp.h	/^void lp_add_cols( LinearProgram *lp, const int count, double *obj, double *lb, double *ub, char *integer, char **name );$/;"	p	signature:( LinearProgram *lp, const int count, double *obj, double *lb, double *ub, char *integer, char **name )
lp_add_cols_same_bound	./lp.h	/^void lp_add_cols_same_bound( LinearProgram *lp, const int count, double *obj, double lb, double ub, char *integer, char **name );$/;"	p	signature:( LinearProgram *lp, const int count, double *obj, double lb, double ub, char *integer, char **name )
lp_add_cut	./lp.h	/^void lp_add_cut( LinearProgram *lp, int nz, int *cutIdx, double *cutCoef, const char *name, char sense, double rhs );$/;"	p	signature:( LinearProgram *lp, int nz, int *cutIdx, double *cutCoef, const char *name, char sense, double rhs )
lp_add_cuts_conflicts_CLIQUE	./mip_compact.c	/^int lp_add_cuts_conflicts_CLIQUE( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous,  int **maxTJM,  int maxcuts, CutPool *cutP , Results *res );$/;"	p	file:	signature:( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int **maxTJM, int maxcuts, CutPool *cutP , Results *res )
lp_add_cuts_conflicts_CLIQUE	./mip_compact.c	/^int lp_add_cuts_conflicts_CLIQUE( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous,  int **maxTJM,  int maxcuts, CutPool *cutP, Results *res )$/;"	f	signature:( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int **maxTJM, int maxcuts, CutPool *cutP, Results *res )
lp_add_cuts_conflicts_CLIQUE_current	./mip_compact.c	/^int lp_add_cuts_conflicts_CLIQUE_current( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous,  int **maxTJM,  int maxcuts, CutPool *cutP, Results *res )$/;"	f	signature:( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int **maxTJM, int maxcuts, CutPool *cutP, Results *res )
lp_add_cuts_conflicts_CLIQUE_old	./mip_compact.c	/^int lp_add_cuts_conflicts_CLIQUE_old( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous,  int **maxTJM,  int maxcuts, CutPool *cutP, Results *res )$/;"	f	signature:( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int **maxTJM, int maxcuts, CutPool *cutP, Results *res )
lp_add_cuts_precedence_new	./mip_compact.c	/^int lp_add_cuts_precedence_new( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int lifting, int **maxTJM, int *maxTJ, int maxcuts, CutPool *cutP ,Results *res);$/;"	p	file:	signature:( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int lifting, int **maxTJM, int *maxTJ, int maxcuts, CutPool *cutP ,Results *res)
lp_add_cuts_precedence_new	./mip_compact.c	/^int lp_add_cuts_precedence_new( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int lifting, int **maxTJM, int *maxTJ, int maxcuts, CutPool *cutP,  Results *res )$/;"	f	signature:( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int lifting, int **maxTJM, int *maxTJ, int maxcuts, CutPool *cutP, Results *res )
lp_add_cuts_separated_modes_rr	./mip_compact.c	/^int lp_add_cuts_separated_modes_rr( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int lifting,   CutPool *cutP ,  Results *res  );$/;"	p	file:	signature:( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int lifting, CutPool *cutP , Results *res )
lp_add_cuts_separated_modes_rr	./mip_compact.c	/^int lp_add_cuts_separated_modes_rr( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int lifting,  CutPool *cutP,  Results *res )$/;"	f	signature:( LinearProgram *lp, const int *origCols, LinearProgram *origLP, const Instance *inst, double timeLeft, int continuous, int lifting, CutPool *cutP, Results *res )
lp_add_row	./lp.h	/^void lp_add_row( LinearProgram *lp, const int nz, int *indexes, double *coefs, const char *name, char sense, const double rhs );$/;"	p	signature:( LinearProgram *lp, const int nz, int *indexes, double *coefs, const char *name, char sense, const double rhs )
lp_best_bound	./lp.h	/^double lp_best_bound(LinearProgram *lp); \/* best valid bound for the optimal solution obj value found *\/$/;"	p	signature:(LinearProgram *lp)
lp_best_possible_obj	./lp.h	/^double lp_best_possible_obj( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_callback_CLIQUE	./mip_compact.c	/^int lp_callback_CLIQUE( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data)$/;"	f	signature:( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data)
lp_callback_CLIQUE	./mip_compact.c	/^int lp_callback_CLIQUE( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data);$/;"	p	file:	signature:( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data)
lp_callback_prec	./mip_compact.c	/^int lp_callback_prec( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data )$/;"	f	signature:( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data )
lp_callback_prec	./mip_compact.c	/^int lp_callback_prec( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data );$/;"	p	file:	signature:( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data )
lp_callback_rr	./mip_compact.c	/^int lp_callback_rr( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data );$/;"	p	file:	signature:( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data )
lp_callback_rr	./mip_compact.c	/^int lp_callback_rr( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data)$/;"	f	signature:( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data)
lp_callbacks	./mip_compact.c	/^int lp_callbacks( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data );$/;"	p	file:	signature:( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data )
lp_callbacks	./mip_compact.c	/^int lp_callbacks( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data)$/;"	f	signature:( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data)
lp_cb	./lp.h	/^typedef int (*lp_cb)( LinearProgram *lp, int whereFrom, const int *origCols, LinearProgram *origLP, void *data );$/;"	t
lp_chg_obj	./lp.h	/^void lp_chg_obj(LinearProgram *lp, int count, int idx[], double obj[] );$/;"	p	signature:(LinearProgram *lp, int count, int idx[], double obj[] )
lp_clone	./lp.h	/^LinearProgram *lp_clone( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_close_env	./lp.h	/^void lp_close_env();$/;"	p	signature:()
lp_col	./lp.h	/^int lp_col( LinearProgram *lp, int col, int *idx, double *coef );$/;"	p	signature:( LinearProgram *lp, int col, int *idx, double *coef )
lp_col_index	./lp.h	/^int lp_col_index( LinearProgram *lp, const char *name );$/;"	p	signature:( LinearProgram *lp, const char *name )
lp_col_lb	./lp.h	/^double lp_col_lb( LinearProgram *lp, int col );$/;"	p	signature:( LinearProgram *lp, int col )
lp_col_name	./lp.h	/^char *lp_col_name( LinearProgram *lp, int col, char *dest );$/;"	p	signature:( LinearProgram *lp, int col, char *dest )
lp_col_ub	./lp.h	/^double lp_col_ub( LinearProgram *lp, int col );$/;"	p	signature:( LinearProgram *lp, int col )
lp_cols	./lp.h	/^int lp_cols( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_cols_by_type	./lp.h	/^void lp_cols_by_type( LinearProgram *lp, int *binaries, int *integers, int *continuous );$/;"	p	signature:( LinearProgram *lp, int *binaries, int *integers, int *continuous )
lp_create	./lp.h	/^LinearProgram *lp_create();$/;"	p	signature:()
lp_current_obj	./lp.h	/^double lp_current_obj( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_fix_col	./lp.h	/^void lp_fix_col( LinearProgram *lp, int col, double val );$/;"	p	signature:( LinearProgram *lp, int col, double val )
lp_free	./lp.h	/^void lp_free( LinearProgramPtr *lp );$/;"	p	signature:( LinearProgramPtr *lp )
lp_get_direction	./lp.h	/^int lp_get_direction( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_get_max_reduced_cost	./lp.h	/^double lp_get_max_reduced_cost(LinearProgram *lp);\/\/janniele$/;"	p	signature:(LinearProgram *lp)
lp_get_mip_emphasis	./lp.h	/^int lp_get_mip_emphasis( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_help_options	./lp.h	/^void lp_help_options( );$/;"	p	signature:( )
lp_is_binary	./lp.h	/^char lp_is_binary( LinearProgram *lp, const int j );$/;"	p	signature:( LinearProgram *lp, const int j )
lp_is_integer	./lp.h	/^char lp_is_integer( LinearProgram *lp, const int j );$/;"	p	signature:( LinearProgram *lp, const int j )
lp_is_mip	./lp.h	/^char lp_is_mip( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_load_mip_start	./lp.h	/^void lp_load_mip_start(LinearProgram *lp, int count, const char **colNames, const double *colValues);$/;"	p	signature:(LinearProgram *lp, int count, const char **colNames, const double *colValues)
lp_load_mip_starti	./lp.h	/^void lp_load_mip_starti( LinearProgram *lp, int count, const int *colIndexes, const double *colValues );$/;"	p	signature:( LinearProgram *lp, int count, const int *colIndexes, const double *colValues )
lp_mipstart_debug	./lp.h	/^void lp_mipstart_debug( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_num_saved_sols	./lp.h	/^int lp_num_saved_sols( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_nz	./lp.h	/^int lp_nz( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_obj_coef	./lp.h	/^const double *lp_obj_coef( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_obj_value	./lp.h	/^double lp_obj_value(LinearProgram *lp); \/* obj value of best solution found *\/$/;"	p	signature:(LinearProgram *lp)
lp_optimize	./lp.h	/^int lp_optimize( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_optimize_as_continuous	./lp.h	/^int lp_optimize_as_continuous( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_original_colummns	./lp.h	/^int *lp_original_colummns( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_parse_options	./lp.h	/^void lp_parse_options( LinearProgram *lp, int argc, const char **argv );$/;"	p	signature:( LinearProgram *lp, int argc, const char **argv )
lp_pre_process	./lp.h	/^LinearProgram *lp_pre_process( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_read	./lp.h	/^void lp_read( LinearProgram *lp, const char *fileName );$/;"	p	signature:( LinearProgram *lp, const char *fileName )
lp_read_mip_start	./lp.h	/^int lp_read_mip_start( const char *fileName, char **colNames, double colValues[] );$/;"	p	signature:( const char *fileName, char **colNames, double colValues[] )
lp_reduced_cost	./lp.h	/^double *lp_reduced_cost( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_remove_row	./lp.h	/^void lp_remove_row( LinearProgram *lp, int idxRow );$/;"	p	signature:( LinearProgram *lp, int idxRow )
lp_remove_rows	./lp.h	/^void lp_remove_rows( LinearProgram *lp, int nRows, int *rows );$/;"	p	signature:( LinearProgram *lp, int nRows, int *rows )
lp_rhs	./lp.h	/^double lp_rhs( LinearProgram *lp, int row );$/;"	p	signature:( LinearProgram *lp, int row )
lp_row	./lp.h	/^int lp_row( LinearProgram *lp, int row, int *idx, double *coef );$/;"	p	signature:( LinearProgram *lp, int row, int *idx, double *coef )
lp_row_name	./lp.h	/^char *lp_row_name( LinearProgram *lp, int row, char *dest );$/;"	p	signature:( LinearProgram *lp, int row, char *dest )
lp_row_price	./lp.h	/^double *lp_row_price( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_row_slack	./lp.h	/^double *lp_row_slack( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_row_type	./lp.h	/^int lp_row_type( LinearProgram *lp, const int row );$/;"	p	signature:( LinearProgram *lp, const int row )
lp_rows	./lp.h	/^int lp_rows( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_rows_by_type	./lp.h	/^void lp_rows_by_type( LinearProgram *lp, int rtype[] );$/;"	p	signature:( LinearProgram *lp, int rtype[] )
lp_save_mip_start	./lp.h	/^void lp_save_mip_start( LinearProgram *lp, const char *fileName );$/;"	p	signature:( LinearProgram *lp, const char *fileName )
lp_saved_sol_obj	./lp.h	/^double lp_saved_sol_obj( LinearProgram *lp, int isol );$/;"	p	signature:( LinearProgram *lp, int isol )
lp_saved_sol_x	./lp.h	/^double *lp_saved_sol_x( LinearProgram *lp, int isol );$/;"	p	signature:( LinearProgram *lp, int isol )
lp_sense	./lp.h	/^char lp_sense( LinearProgram *lp, int row );$/;"	p	signature:( LinearProgram *lp, int row )
lp_set_abs_mip_gap	./lp.h	/^void lp_set_abs_mip_gap( LinearProgram *lp, const double _value );$/;"	p	signature:( LinearProgram *lp, const double _value )
lp_set_callback	./lp.h	/^void lp_set_callback( LinearProgram *lp, lp_cb callback, void *data );$/;"	p	signature:( LinearProgram *lp, lp_cb callback, void *data )
lp_set_col_bounds	./lp.h	/^void lp_set_col_bounds( LinearProgram *lp, int col, const double lb, const double ub );$/;"	p	signature:( LinearProgram *lp, int col, const double lb, const double ub )
lp_set_cuts	./lp.h	/^void lp_set_cuts( LinearProgram *lp, char onOff );$/;"	p	signature:( LinearProgram *lp, char onOff )
lp_set_direction	./lp.h	/^void lp_set_direction( LinearProgram *lp, const char direction );$/;"	p	signature:( LinearProgram *lp, const char direction )
lp_set_heur_fp_passes	./lp.h	/^void lp_set_heur_fp_passes( LinearProgram *lp, int passes );$/;"	p	signature:( LinearProgram *lp, int passes )
lp_set_heur_proximity	./lp.h	/^void lp_set_heur_proximity( LinearProgram *lp, char onOff );$/;"	p	signature:( LinearProgram *lp, char onOff )
lp_set_integer	./lp.h	/^void lp_set_integer( LinearProgram *lp, int nCols, int cols[] );$/;"	p	signature:( LinearProgram *lp, int nCols, int cols[] )
lp_set_max_nodes	./lp.h	/^void lp_set_max_nodes( LinearProgram *lp, int _max );$/;"	p	signature:( LinearProgram *lp, int _max )
lp_set_max_num_strong	./lp.h	/^void lp_set_max_num_strong(LinearProgram *lp, int _max);$/;"	p	signature:(LinearProgram *lp, int _max)
lp_set_max_reduced_cost	./lp.h	/^void lp_set_max_reduced_cost(LinearProgram *lp, double _max); \/\/janiele$/;"	p	signature:(LinearProgram *lp, double _max)
lp_set_max_reduced_cost	./lp.h	/^void lp_set_max_reduced_cost(LinearProgram *lp, double _max);\/\/janniele$/;"	p	signature:(LinearProgram *lp, double _max)
lp_set_max_saved_sols	./lp.h	/^void lp_set_max_saved_sols( LinearProgram *lp, int _max );$/;"	p	signature:( LinearProgram *lp, int _max )
lp_set_max_seconds	./lp.h	/^void lp_set_max_seconds( LinearProgram *lp, int _max );$/;"	p	signature:( LinearProgram *lp, int _max )
lp_set_max_solutions	./lp.h	/^void lp_set_max_solutions( LinearProgram *lp, int _max );$/;"	p	signature:( LinearProgram *lp, int _max )
lp_set_mip_emphasis	./lp.h	/^void lp_set_mip_emphasis( LinearProgram *lp, const int mipEmphasis );$/;"	p	signature:( LinearProgram *lp, const int mipEmphasis )
lp_set_obj	./lp.h	/^void lp_set_obj( LinearProgram *lp, double *obj );$/;"	p	signature:( LinearProgram *lp, double *obj )
lp_set_ownCutPool	./lp.h	/^void lp_set_ownCutPool(LinearProgram *lp, char value);$/;"	p	signature:(LinearProgram *lp, char value)
lp_set_parallel	./lp.h	/^void lp_set_parallel( LinearProgram *lp, char onOff );$/;"	p	signature:( LinearProgram *lp, char onOff )
lp_set_print_messages	./lp.h	/^void lp_set_print_messages( LinearProgram *lp, char onOff );$/;"	p	signature:( LinearProgram *lp, char onOff )
lp_set_rel_mip_gap	./lp.h	/^void lp_set_rel_mip_gap( LinearProgram *lp, const double _value );$/;"	p	signature:( LinearProgram *lp, const double _value )
lp_set_rhs	./lp.h	/^void lp_set_rhs( LinearProgram *lp, int row, double rhs );$/;"	p	signature:( LinearProgram *lp, int row, double rhs )
lp_set_sol_in_file_name	./lp.h	/^void lp_set_sol_in_file_name( LinearProgram *lp, const char *sfn );$/;"	p	signature:( LinearProgram *lp, const char *sfn )
lp_set_sol_out_file_name	./lp.h	/^void lp_set_sol_out_file_name( LinearProgram *lp, const char *sfn );$/;"	p	signature:( LinearProgram *lp, const char *sfn )
lp_set_store_names	./lp.h	/^void lp_set_store_names( int store );$/;"	p	signature:( int store )
lp_solution_time	./lp.h	/^double lp_solution_time( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
lp_status_str	./lp.h	/^char *lp_status_str( int status, char *statusStr );$/;"	p	signature:( int status, char *statusStr )
lp_strengthen_with_cuts	./lp.h	/^int lp_strengthen_with_cuts( LinearProgram *lp, const int maxRoundsCuts[] );$/;"	p	signature:( LinearProgram *lp, const int maxRoundsCuts[] )
lp_write_lp	./lp.h	/^void lp_write_lp( LinearProgram *lp, const char *fileName );$/;"	p	signature:( LinearProgram *lp, const char *fileName )
lp_write_sol	./lp.h	/^void lp_write_sol( LinearProgram *lp, const char *fileName );$/;"	p	signature:( LinearProgram *lp, const char *fileName )
lp_x	./lp.h	/^double *lp_x( LinearProgram *lp );$/;"	p	signature:( LinearProgram *lp )
m	./mip_compact.c	/^    int m;$/;"	m	struct:__anon10	file:	access:public
main	./dcg.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./iinfo.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./lscplex.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./lsdvnd.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./lslahc.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./lsplahc.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./lspvlahc.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./lssa.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./lsvns.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./main.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
main	./mip.c	/^int main( int argc, const char **argv )$/;"	f	signature:( int argc, const char **argv )
main	./mlahc.c	/^int main( int argc, char **argv )$/;"	f	signature:( int argc, char **argv )
master	./proj_decomp.c	/^    LinearProgram *master;$/;"	m	struct:_ProjDecomp	file:	access:public
matMaxD	./instance.c	/^    int **matMaxD;$/;"	m	struct:_Instance	file:	access:public
matMaxDJM	./instance.c	/^    int ***matMaxDJM;$/;"	m	struct:_Instance	file:	access:public
maxCandidates	./clique_extender.c	/^    int maxCandidates;$/;"	m	struct:_CliqueExtender	file:	access:public
maxCliques	./clique_separation.c	/^    int maxCliques;$/;"	m	struct:_CliqueSeparation	file:	access:public
maxClqGen	./clique_extender.c	/^    int maxClqGen;$/;"	m	struct:_CliqueExtender	file:	access:public
maxDegree	./cgraph.c	/^    unsigned long int maxDegree;$/;"	m	struct:_CGraph	file:	access:public
maxDegree	./grasp.c	/^    float maxDegree;$/;"	m	struct:_Grasp	file:	access:public
maxDistanceByModes	./instance.c	/^void maxDistanceByModes(const Instance *inst, int **D, int *** DJM)$/;"	f	signature:(const Instance *inst, int **D, int *** DJM)
maxDistanceByModes	./instance.h	/^void maxDistanceByModes(const Instance *inst, int **D, int *** DJM);$/;"	p	signature:(const Instance *inst, int **D, int *** DJM)
maxDuration	./instance.c	/^    int maxDuration;$/;"	m	struct:_Job	file:	access:public
maxDurationPath	./instance.c	/^    int **maxDurationPath;$/;"	m	struct:_Instance	file:	access:public
maxDurationPathInterMode	./instance.c	/^    int ****maxDurationPathInterMode;$/;"	m	struct:_Instance	file:	access:public
maxFE	./neighborhood.c	/^    long double maxFE;$/;"	m	struct:_Neighborhood	file:	access:public
maxFE	./test.c	/^    long double *maxFE;$/;"	m	struct:_Test	file:	access:public
maxFI	./neighborhood.c	/^    long double maxFI;$/;"	m	struct:_Neighborhood	file:	access:public
maxFI	./test.c	/^    long double *maxFI;$/;"	m	struct:_Test	file:	access:public
maxModes	./mip_compact.c	/^    int maxModes;$/;"	m	struct:_MIPCompact	file:	access:public
maxNode	./mip_compact.c	/^    int maxNode;$/;"	m	struct:_MIPCompact	file:	access:public
maxNodeW	./grasp.c	/^    float maxNodeW;$/;"	m	struct:_Grasp	file:	access:public
maxPasses	./clique_separation.c	/^    int maxPasses;$/;"	m	struct:_CliqueSeparation	file:	access:public
maxReducedCost	./mip_compact.c	/^    double maxReducedCost;$/;"	m	struct:_MIPCompact	file:	access:public
maxT	./mip_compact.c	/^    int maxT;$/;"	m	struct:_MIPCompact	file:	access:public
maxTJ	./mip_compact.c	/^    int *maxTJ;$/;"	m	struct:_MIPCompact	file:	access:public
maxTJM	./mip_compact.c	/^    int **maxTJM;$/;"	m	struct:_MIPCompact	file:	access:public
maxTime	./proj_decomp.c	/^    int maxTime;$/;"	m	struct:_ProjDecomp	file:	access:public
maxTimeBK	./clique_separation.c	/^    double maxTimeBK;$/;"	m	struct:_CliqueSeparation	file:	access:public
maxViol	./results.c	/^    double **maxViol; \/\/para cada round e para cada tipo de corte a maior violação;$/;"	m	struct:_Results	file:	access:public
maxViolCut	./results.c	/^    IntDblPair ***maxViolCut; \/\/para cada round e para cada tipo o corte com maior violação (elementos)$/;"	m	struct:_Results	file:	access:public
max_ni_it	./grasp.c	/^    int max_ni_it;$/;"	m	struct:_Grasp	file:	access:public
max_seconds	./grasp.c	/^    int max_seconds;$/;"	m	struct:_Grasp	file:	access:public
maxcuts	./mip_compact.c	/^    int maxcuts;$/;"	m	struct:_MIPCompact	file:	access:public
minDegree	./cgraph.c	/^    unsigned long int minDegree;$/;"	m	struct:_CGraph	file:	access:public
minDegree	./grasp.c	/^    float minDegree;$/;"	m	struct:_Grasp	file:	access:public
minDuration	./instance.c	/^    int minDuration;$/;"	m	struct:_Job	file:	access:public
minFE	./neighborhood.c	/^    long double minFE;$/;"	m	struct:_Neighborhood	file:	access:public
minFE	./test.c	/^    long double *minFE;$/;"	m	struct:_Test	file:	access:public
minFI	./neighborhood.c	/^    long double minFI;$/;"	m	struct:_Neighborhood	file:	access:public
minFI	./test.c	/^    long double *minFI;$/;"	m	struct:_Test	file:	access:public
minFrac	./clique_separation.c	/^    double minFrac;$/;"	m	struct:_CliqueSeparation	file:	access:public
minNodeW	./grasp.c	/^    float minNodeW;$/;"	m	struct:_Grasp	file:	access:public
minRoundUp	./mip_compact.c	/^    float minRoundUp;$/;"	m	struct:_MIPCompact	file:	access:public
minT	./solution.c	/^    int *minT;$/;"	m	struct:_Solution	file:	access:public
minViol	./clique_separation.c	/^    double minViol;$/;"	m	struct:_CliqueSeparation	file:	access:public
minViol	./results.c	/^    double **minViol; \/\/para cada round e para cada tipo de corte a menor violação;$/;"	m	struct:_Results	file:	access:public
minViolCut	./results.c	/^    IntDblPair ***minViolCut; \/\/para cada round e para cada tipo o corte com maior violação (elementos)$/;"	m	struct:_Results	file:	access:public
minW	./clique_enum.c	/^    int minW;$/;"	m	struct:_CliqueEnumerator	file:	access:public
minW	./grasp.c	/^    int minW;$/;"	m	struct:_Grasp	file:	access:public
mip	./mip_compact.c	/^    LinearProgram *mip;$/;"	m	struct:_MIPCompact	file:	access:public
mip	./ms_solver_mip.c	/^    LinearProgram *mip;$/;"	m	struct:_MSM_Solver	file:	access:public
mipCParams	./mip_compact.c	/^VecStr *mipCParams = NULL;$/;"	v
mipP	./proj_decomp.c	/^    MIPProject **mipP;$/;"	m	struct:_ProjDecomp	file:	access:public
modeSet	./ms_solver_mip.c	/^    ModeSet *modeSet;$/;"	m	struct:_MSM_Solver	file:	access:public
modeSet	./solution.c	/^    struct _ModeSet *modeSet;$/;"	m	struct:_Solution	typeref:struct:_Solution::_ModeSet	file:	access:public
modes	./instance.c	/^    Mode *modes;$/;"	m	struct:_Job	file:	access:public
modes	./mode_set.c	/^    int *modes;$/;"	m	struct:_ModeSet	file:	access:public
moveSW	./neighborhood.c	/^    int moveSW;$/;"	m	struct:_Neighborhood	file:	access:public
mpmTime	./instance.c	/^    int mpmTime;$/;"	m	struct:_Project	file:	access:public
msm	./mip_compact.c	/^    MSM_Solver *msm;$/;"	m	struct:_MIPCompact	file:	access:public
nCandidates	./grasp.c	/^    int nCandidates;$/;"	m	struct:_Grasp	file:	access:public
nChangesModes	./lahc.c	/^    int *nChangesModes;$/;"	m	struct:_LAHC	file:	access:public
nChangesModes	./sa.c	/^    int *nChangesModes;$/;"	m	struct:_SA	file:	access:public
nChangesModes	./vns.c	/^    int *nChangesModes;$/;"	m	struct:_VNS	file:	access:public
nChangesSequence	./lahc.c	/^    int *nChangesSequence;$/;"	m	struct:_LAHC	file:	access:public
nChangesSequence	./vns.c	/^    int *nChangesSequence;$/;"	m	struct:_VNS	file:	access:public
nCostList	./lahc.c	/^    int nCostList;$/;"	m	struct:_LAHC	file:	access:public
nCutsTotal	./results.c	/^    int **nCutsTotal; \/\/para cada round e para cada tipo o numero total de cortes$/;"	m	struct:_Results	file:	access:public
nDiversification	./lahc.c	/^    int nDiversification;$/;"	m	struct:_LAHC	file:	access:public
nElementsCuts	./results.c	/^    int **nElementsCuts;     \/\/ para cada round para cada tipo o número total de elementos (soma dos elementos)$/;"	m	struct:_Results	file:	access:public
nElementsMaxViol	./results.c	/^    int **nElementsMaxViol; \/\/ para cada round e para cada tipo o número de elementos da maior violação.$/;"	m	struct:_Results	file:	access:public
nElementsMinViol	./results.c	/^    int **nElementsMinViol; \/\/ para cada round e para cada tipo o número de elementos da maior violação.$/;"	m	struct:_Results	file:	access:public
nFixed	./mip_compact.c	/^    int nFixed;$/;"	m	struct:_MIPCompact	file:	access:public
nFractional	./mip_compact.c	/^    int nFractional;$/;"	m	struct:_MIPCompact	file:	access:public
nHash	./cut_pool.c	/^    int nHash;$/;"	m	struct:_CutPool	file:	access:public
nHashvalues	./cut_pool.c	/^static const unsigned int nHashvalues = sizeof(hashval)\/sizeof(int);$/;"	v	file:
nHashvalues	./dict_int.c	/^static const unsigned int nHashvalues = sizeof(hashval)\/sizeof(int);$/;"	v	file:
nInfeasModes	./instance.c	/^    int nInfeasModes;$/;"	m	struct:_Job	file:	access:public
nIntegral	./mip_compact.c	/^    int nIntegral;$/;"	m	struct:_MIPCompact	file:	access:public
nJobs	./instance.c	/^    int nJobs;$/;"	m	struct:_Instance	file:	access:public
nJobs	./instance.c	/^    int nJobs;$/;"	m	struct:_Project	file:	access:public
nJobs	./mip_compact.c	/^    int nJobs;$/;"	m	struct:_MIPCompact	file:	access:public
nJobs	./mode_set.c	/^    int nJobs;$/;"	m	struct:_ModeSet	file:	access:public
nJobsTS	./top_sort.c	/^    int nJobsTS;$/;"	m	struct:_TopSort	file:	access:public
nLastJModify	./neighborhood.c	/^    int *nLastJModify;$/;"	m	struct:_Neighborhood	file:	access:public
nMaxElementsConf	./results.c	/^    int *nMaxElementsConf; \/\/tamanho do maior conflito encontrado, ou seja, maior número de elementos.$/;"	m	struct:_Results	file:	access:public
nMaxElementsCuts	./results.c	/^    int **nMaxElementsCuts; \/\/para cada round e para cada tipo o maior corte (número de elementos)$/;"	m	struct:_Results	file:	access:public
nMaxModes	./instance.c	/^    int nMaxModes;$/;"	m	struct:_Instance	file:	access:public
nMinElementsCuts	./results.c	/^    int **nMinElementsCuts; \/\/para cada round e para cada tipo o menor corte (número de elementos)$/;"	m	struct:_Results	file:	access:public
nModes	./instance.c	/^    int nModes;$/;"	m	struct:_Job	file:	access:public
nMoves	./vns.c	/^    int nMoves;$/;"	m	struct:_VNS	file:	access:public
nNeigh	./test.c	/^    int nNeigh;$/;"	m	struct:_Test	file:	access:public
nNeighborhood	./neighborhood.c	/^    int nNeighborhood;$/;"	m	struct:_Neighborhood	file:	access:public
nNodesLeft	./grasp.c	/^    int nNodesLeft;$/;"	m	struct:_Grasp	file:	access:public
nPred	./instance.c	/^    int nPred;$/;"	m	struct:_Job	file:	access:public
nProbabilities	./learning.c	/^    int nProbabilities;$/;"	m	struct:_LearningAutomata	file:	access:public
nProjects	./instance.c	/^    int nProjects;$/;"	m	struct:_Instance	file:	access:public
nResN	./instance.c	/^    int nResN;$/;"	m	struct:_Instance	file:	access:public
nResN	./instance.c	/^    int nResN;$/;"	m	struct:_Mode	file:	access:public
nResN	./mode_set.c	/^    int nResN;$/;"	m	struct:_ModeSet	file:	access:public
nResR	./instance.c	/^    int nResR;$/;"	m	struct:_Instance	file:	access:public
nResR	./instance.c	/^    int nResR;$/;"	m	struct:_Mode	file:	access:public
nResR	./rrusage.c	/^    int nResR;$/;"	m	struct:_RRUsage	file:	access:public
nResRGlobal	./instance.c	/^    int nResRGlobal;$/;"	m	struct:_Instance	file:	access:public
nRounds	./results.c	/^    int nRounds; \/\/número de rounds para encontrar cortes$/;"	m	struct:_Results	file:	access:public
nStages	./neighborhood.c	/^    int nStages;$/;"	m	struct:_Neighborhood	file:	access:public
nStages	./test.c	/^    int nStages;$/;"	m	struct:_Test	file:	access:public
nStayDiversification	./lahc.c	/^    int nStayDiversification;$/;"	m	struct:_LAHC	file:	access:public
nSucc	./instance.c	/^    int nSucc;$/;"	m	struct:_Job	file:	access:public
nSumAllElementsConf	./results.c	/^    int *nSumAllElementsConf; \/\/número total de elementos dos conflitos em todas as rodadas$/;"	m	struct:_Results	file:	access:public
nSumAllVarWithConf	./results.c	/^    int *nSumAllVarWithConf; \/\/ número total de variáveis com conflitos em todas as rodadas$/;"	m	struct:_Results	file:	access:public
nThread	./lahc.c	/^    int nThread;$/;"	m	struct:_LAHC	file:	access:public
nThread	./neighborhood.c	/^    int nThread;$/;"	m	struct:_Neighborhood	file:	access:public
nThread	./vnd.c	/^    int nThread;$/;"	m	struct:_VND	file:	access:public
nTimesJobOnModes	./lahc.c	/^    int **nTimesJobOnModes;$/;"	m	struct:_LAHC	file:	access:public
nTimesJobOnModes	./sa.c	/^    int **nTimesJobOnModes;$/;"	m	struct:_SA	file:	access:public
nTimesJobOnModes	./vns.c	/^    int **nTimesJobOnModes;$/;"	m	struct:_VNS	file:	access:public
nTimesJobOnSequence	./lahc.c	/^    int **nTimesJobOnSequence;$/;"	m	struct:_LAHC	file:	access:public
nTimesJobOnSequence	./vns.c	/^    int **nTimesJobOnSequence;$/;"	m	struct:_VNS	file:	access:public
nWOImprove	./lahc.c	/^    int nWOImprove;$/;"	m	struct:_LAHC	file:	access:public
n_hash_numbers	./clique.c	/^static const size_t n_hash_numbers = 8;$/;"	v	file:
nd	./cgraph.c	/^    NodeDegree *nd;$/;"	m	struct:_CGraph	file:	access:public
neighborMaxK	./neighborhood.c	/^    int *neighborMaxK;$/;"	m	struct:_Neighborhood	file:	access:public
neighborMinK	./neighborhood.c	/^    int *neighborMinK;$/;"	m	struct:_Neighborhood	file:	access:public
neighborhood	./ils.c	/^    Neighborhood *neighborhood;$/;"	m	struct:_ILS	file:	access:public
neighborhood	./ms_solver_lahc.c	/^    Neighborhood *neighborhood;$/;"	m	struct:_MSSolverLAHC	file:	access:public
neighs	./spaths.c	/^    Neighbor *neighs;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
newClique	./clique_extender.c	/^    int *newClique;$/;"	m	struct:_CliqueExtender	file:	access:public
newCliqueSize	./clique_extender.c	/^    int newCliqueSize;$/;"	m	struct:_CliqueExtender	file:	access:public
newModes	./neighborhood.c	/^    int *newModes;$/;"	m	struct:_Neighborhood	file:	access:public
next	./list_int.c	/^    struct _Node *next;$/;"	m	struct:_Node	typeref:struct:_Node::_Node	file:	access:public
nh	./clique_elite_set.c	/^    NodeHeap *nh;$/;"	m	struct:_CliqueEliteSet	file:	access:public
nh	./spaths.c	/^    NodeHeap *nh;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
nh_create	./node_heap.c	/^NodeHeap *nh_create( const size_t nodes, const int infinity )$/;"	f	signature:( const size_t nodes, const int infinity )
nh_create	./node_heap.h	/^NodeHeap *nh_create( const size_t nodes, const int infinity );$/;"	p	signature:( const size_t nodes, const int infinity )
nh_down	./node_heap.c	/^inline void nh_down( NodeHeap *npq, const int index );$/;"	p	file:	signature:( NodeHeap *npq, const int index )
nh_down	./node_heap.c	/^void nh_down( NodeHeap *npq, const int index )$/;"	f	signature:( NodeHeap *npq, const int index )
nh_free	./node_heap.c	/^void nh_free( NodeHeap **nh )$/;"	f	signature:( NodeHeap **nh )
nh_free	./node_heap.h	/^void nh_free( NodeHeap **nh );$/;"	p	signature:( NodeHeap **nh )
nh_get_cost	./node_heap.h	/^int nh_get_cost( NodeHeap * npq, const int node );$/;"	p	signature:( NodeHeap * npq, const int node )
nh_get_dist	./node_heap.c	/^inline int nh_get_dist( NodeHeap * npq, const int node )$/;"	f	signature:( NodeHeap * npq, const int node )
nh_get_dist	./node_heap.h	/^int nh_get_dist( NodeHeap * npq, const int node );$/;"	p	signature:( NodeHeap * npq, const int node )
nh_print_trace	./node_heap.c	/^void nh_print_trace(FILE *out, const char *file, int line)$/;"	f	signature:(FILE *out, const char *file, int line)
nh_print_trace	./node_heap.c	/^void nh_print_trace(FILE *out, const char *file, int line);$/;"	p	file:	signature:(FILE *out, const char *file, int line)
nh_remove_first	./node_heap.c	/^inline int nh_remove_first( NodeHeap * npq, int *node )$/;"	f	signature:( NodeHeap * npq, int *node )
nh_remove_first	./node_heap.h	/^int nh_remove_first( NodeHeap * npq, int *node );$/;"	p	signature:( NodeHeap * npq, int *node )
nh_reset	./node_heap.c	/^void nh_reset( NodeHeap * npq )$/;"	f	signature:( NodeHeap * npq )
nh_reset	./node_heap.h	/^void nh_reset( NodeHeap * npq );$/;"	p	signature:( NodeHeap * npq )
nh_swap	./node_heap.c	/^void nh_swap( NodeHeap * npq, const int i1, const int i2 )$/;"	f	signature:( NodeHeap * npq, const int i1, const int i2 )
nh_up	./node_heap.c	/^inline void nh_up( NodeHeap *npq, const int index );$/;"	p	file:	signature:( NodeHeap *npq, const int index )
nh_up	./node_heap.c	/^void nh_up( NodeHeap *npq, const int index )$/;"	f	signature:( NodeHeap *npq, const int index )
nh_update	./node_heap.c	/^void nh_update( NodeHeap *npq, const int node, const int cost )$/;"	f	signature:( NodeHeap *npq, const int node, const int cost )
nh_update	./node_heap.h	/^void nh_update( NodeHeap * npq, const int node, const int cost );$/;"	p	signature:( NodeHeap * npq, const int node, const int cost )
nheap	./oddhs.c	/^    NodeHeap *nheap;$/;"	m	struct:_OddHoleSep	file:	access:public
nit	./clique_extender.c	/^    NeighIterator *nit;$/;"	m	struct:_CliqueExtender	file:	access:public
nit_bhv_add	./cgraph.c	/^void nit_bhv_add( NeighIterator *nit, int node, int cost )$/;"	f	signature:( NeighIterator *nit, int node, int cost )
nit_bhv_down	./cgraph.c	/^void nit_bhv_down( NodeCost *bhv, int size, int index )$/;"	f	signature:( NodeCost *bhv, int size, int index )
nit_bhv_up	./cgraph.c	/^void nit_bhv_up( NodeCost *bhv, int index )$/;"	f	signature:( NodeCost *bhv, int index )
nit_check_capacity	./cgraph.c	/^void nit_check_capacity( NeighIterator *nit, int required )$/;"	f	signature:( NeighIterator *nit, int required )
nit_create	./cgraph.c	/^NeighIterator *nit_create( )$/;"	f
nit_create	./cgraph.h	/^NeighIterator *nit_create( );$/;"	p	signature:( )
nit_fill_bhv	./cgraph.c	/^void nit_fill_bhv( NeighIterator *nit, const CGraph *cgraph, int node, const int costs[] )$/;"	f	signature:( NeighIterator *nit, const CGraph *cgraph, int node, const int costs[] )
nit_free	./cgraph.c	/^void nit_free( NeighIterator **nit )$/;"	f	signature:( NeighIterator **nit )
nit_free	./cgraph.h	/^void nit_free( NeighIterator **nit );$/;"	p	signature:( NeighIterator **nit )
nit_next	./cgraph.c	/^int nit_next( NeighIterator *nit )$/;"	f	signature:( NeighIterator *nit )
nit_next	./cgraph.h	/^int nit_next( NeighIterator *nit );$/;"	p	signature:( NeighIterator *nit )
nit_start	./cgraph.c	/^void nit_start( NeighIterator *nit, const CGraph *cgraph, int node, const int costs[] )$/;"	f	signature:( NeighIterator *nit, const CGraph *cgraph, int node, const int costs[] )
nit_start	./cgraph.h	/^void nit_start( NeighIterator *nit, const CGraph *cgraph, int node, const int costs[] );$/;"	p	signature:( NeighIterator *nit, const CGraph *cgraph, int node, const int costs[] )
node	./cgraph.c	/^    int node;$/;"	m	struct:_NeighIterator	file:	access:public
node	./cgraph.c	/^    int node;$/;"	m	struct:__anon1	file:	access:public
node	./cgraph.c	/^    int node;$/;"	m	struct:__anon2	file:	access:public
node	./digraph.h	/^    int node;$/;"	m	struct:__anon8	access:public
node	./node_heap.c	/^    int node;$/;"	m	struct:__anon12	file:	access:public
nodeCap	./clique_separation.c	/^    int nodeCap;$/;"	m	struct:_CliqueSeparation	file:	access:public
nodeCliques	./cgraph.c	/^    IntSet *nodeCliques;  \/* all cliques in which a node appears *\/$/;"	m	struct:_CGraph	file:	access:public
nodeConflicts	./cgraph.c	/^    IntSet *nodeConflicts;$/;"	m	struct:_CGraph	file:	access:public
nodeNames	./cgraph.c	/^    char **nodeNames;$/;"	m	struct:_CGraph	file:	access:public
nodeSize	./cgraph.c	/^    int nodeSize;         \/* number of nodes considered *\/$/;"	m	struct:_CGraph	file:	access:public
nodes	./node_heap.c	/^    int nodes;$/;"	m	struct:_NodeHeap	file:	access:public
nodes	./spaths.c	/^    int nodes;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
nodesLeft	./grasp.c	/^    int *nodesLeft;$/;"	m	struct:_Grasp	file:	access:public
normFE	./neighborhood.c	/^    long double *normFE;$/;"	m	struct:_Neighborhood	file:	access:public
normFE	./test.c	/^    long double **normFE;$/;"	m	struct:_Test	file:	access:public
normFI	./neighborhood.c	/^    long double *normFI;$/;"	m	struct:_Neighborhood	file:	access:public
normFI	./test.c	/^    long double **normFI;$/;"	m	struct:_Test	file:	access:public
numberOfCliques	./clique.c	/^    int numberOfCliques;$/;"	m	struct:_CliqueSet	file:	access:public
oddhs_add_doh	./oddhs.c	/^int oddhs_add_doh( OddHoleSep *oddhs, const int nz, int _idx[], const CGraph *cgraph )  __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const int nz, int _idx[], const CGraph *cgraph )
oddhs_add_doh	./oddhs.c	/^int oddhs_add_doh( OddHoleSep *oddhs, const int nz, int _idx[], const CGraph *cgraph )$/;"	f	signature:( OddHoleSep *oddhs, const int nz, int _idx[], const CGraph *cgraph )
oddhs_check_ica_capacity	./oddhs.c	/^void oddhs_check_ica_capacity( OddHoleSepPtr oddhs ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSepPtr oddhs )
oddhs_check_ica_capacity	./oddhs.c	/^void oddhs_check_ica_capacity( OddHoleSepPtr oddhs )$/;"	f	signature:( OddHoleSepPtr oddhs )
oddhs_check_space_sp_arcs	./oddhs.c	/^void oddhs_check_space_sp_arcs( OddHoleSep *oddhs, const int arcs ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const int arcs )
oddhs_check_space_sp_arcs	./oddhs.c	/^void oddhs_check_space_sp_arcs( OddHoleSep *oddhs, const int arcs )$/;"	f	signature:( OddHoleSep *oddhs, const int arcs )
oddhs_check_space_sp_nodes	./oddhs.c	/^void oddhs_check_space_sp_nodes( OddHoleSep *oddhs, const int nodes ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const int nodes )
oddhs_check_space_sp_nodes	./oddhs.c	/^void oddhs_check_space_sp_nodes( OddHoleSep *oddhs, const int nodes )$/;"	f	signature:( OddHoleSep *oddhs, const int nodes )
oddhs_clear_doh	./oddhs.c	/^void oddhs_clear_doh( OddHoleSep *oddhs ) __attribute__ ((visibility("hidden")));;$/;"	p	file:	signature:( OddHoleSep *oddhs )
oddhs_clear_doh	./oddhs.c	/^void oddhs_clear_doh( OddHoleSep *oddhs )$/;"	f	signature:( OddHoleSep *oddhs )
oddhs_create	./oddhs.c	/^OddHoleSep *oddhs_create( )$/;"	f
oddhs_create	./oddhs.h	/^OddHoleSep *oddhs_create( );$/;"	p	signature:( )
oddhs_doh_already_exists	./oddhs.c	/^int oddhs_doh_already_exists ( OddHoleSep *oddhs, const int nz, const int idxs[] )$/;"	f	signature:( OddHoleSep *oddhs, const int nz, const int idxs[] )
oddhs_doh_already_exists	./oddhs.c	/^int oddhs_doh_already_exists( OddHoleSep *oddhs, const int nz, const int idxs[] )  __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const int nz, const int idxs[] )
oddhs_fill_active_intcols	./oddhs.c	/^int oddhs_fill_active_intcols( OddHoleSepPtr oddhs, const int cols, const double x[], const CGraph * conflicts ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSepPtr oddhs, const int cols, const double x[], const CGraph * conflicts )
oddhs_fill_active_intcols	./oddhs.c	/^int oddhs_fill_active_intcols( OddHoleSepPtr oddhs, const int cols, const double x[], const CGraph *conflicts )$/;"	f	signature:( OddHoleSepPtr oddhs, const int cols, const double x[], const CGraph *conflicts )
oddhs_find_odd_holes_with_node	./oddhs.c	/^int oddhs_find_odd_holes_with_node( OddHoleSep *oddhs, const int node, const double x[], const CGraph *cgraph ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const int node, const double x[], const CGraph *cgraph )
oddhs_find_odd_holes_with_node	./oddhs.c	/^int oddhs_find_odd_holes_with_node( OddHoleSep *oddhs, const int node, const double x[], const CGraph *cgraph )$/;"	f	signature:( OddHoleSep *oddhs, const int node, const double x[], const CGraph *cgraph )
oddhs_find_wheel_centers	./oddhs.c	/^int oddhs_find_wheel_centers( const int cols, const double *x, const double rc[],$/;"	f	signature:( const int cols, const double *x, const double rc[], const CGraph *cgraph, const int *oh, const int ohSize, int centers[], const int maxCenters )
oddhs_find_wheel_centers	./oddhs.c	/^int oddhs_find_wheel_centers( const int cols, const double *x, const double rc[],$/;"	p	file:	signature:( const int cols, const double *x, const double rc[], const CGraph *cgraph, const int *oh, const int ohSize, int centers[], const int maxCenters )
oddhs_frac_part	./oddhs.c	/^double oddhs_frac_part( const double x )$/;"	f	signature:( const double x )
oddhs_free	./oddhs.c	/^void oddhs_free( OddHoleSepPtr *oddhs )$/;"	f	signature:( OddHoleSepPtr *oddhs )
oddhs_free	./oddhs.h	/^void oddhs_free( OddHoleSepPtr *oddhs );$/;"	p	signature:( OddHoleSepPtr *oddhs )
oddhs_get_activity	./oddhs.c	/^int oddhs_get_activity( const double val ) __attribute__ ((const,visibility("hidden")));$/;"	p	file:	signature:( const double val )
oddhs_get_activity	./oddhs.c	/^int oddhs_get_activity( const double val )$/;"	f	signature:( const double val )
oddhs_get_activityD	./oddhs.c	/^double oddhs_get_activityD( const long int val ) __attribute__ ((const,visibility("hidden")));$/;"	p	file:	signature:( const long int val )
oddhs_get_activityD	./oddhs.c	/^double oddhs_get_activityD( const long int val )$/;"	f	signature:( const long int val )
oddhs_get_cliques	./oddhs.c	/^const CliqueSet *oddhs_get_cliques( OddHoleSep *oddhs )$/;"	f	signature:( OddHoleSep *oddhs )
oddhs_get_cliques	./oddhs.h	/^const CliqueSet *oddhs_get_cliques( OddHoleSep *oddhs );$/;"	p	signature:( OddHoleSep *oddhs )
oddhs_get_nwc_doh	./oddhs.c	/^int oddhs_get_nwc_doh( OddHoleSep *oddhs, const int doh )$/;"	f	signature:( OddHoleSep *oddhs, const int doh )
oddhs_get_nwc_doh	./oddhs.h	/^int oddhs_get_nwc_doh( OddHoleSep *oddhs, const int doh );$/;"	p	signature:( OddHoleSep *oddhs, const int doh )
oddhs_get_odd_hole	./oddhs.c	/^int *oddhs_get_odd_hole( OddHoleSep *oddhs, const int idx )$/;"	f	signature:( OddHoleSep *oddhs, const int idx )
oddhs_get_odd_hole	./oddhs.h	/^int *oddhs_get_odd_hole( OddHoleSep *oddhs, const int idx );$/;"	p	signature:( OddHoleSep *oddhs, const int idx )
oddhs_get_odd_hole_count	./oddhs.c	/^int oddhs_get_odd_hole_count( OddHoleSep *oddhs )$/;"	f	signature:( OddHoleSep *oddhs )
oddhs_get_odd_hole_count	./oddhs.h	/^int oddhs_get_odd_hole_count( OddHoleSep *oddhs );$/;"	p	signature:( OddHoleSep *oddhs )
oddhs_get_wc_doh	./oddhs.c	/^const int *oddhs_get_wc_doh( OddHoleSep *oddhs, const int doh )$/;"	f	signature:( OddHoleSep *oddhs, const int doh )
oddhs_get_wc_doh	./oddhs.h	/^const int *oddhs_get_wc_doh( OddHoleSep *oddhs, const int doh );$/;"	p	signature:( OddHoleSep *oddhs, const int doh )
oddhs_get_x_from_ica	./oddhs.c	/^double oddhs_get_x_from_ica( OddHoleSep *oddhs, const long int idx )  __attribute__ ((const,visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const long int idx )
oddhs_get_x_from_ica	./oddhs.c	/^double oddhs_get_x_from_ica( OddHoleSep *oddhs, const long int idx )$/;"	f	signature:( OddHoleSep *oddhs, const long int idx )
oddhs_lhs	./oddhs.c	/^double oddhs_lhs( const int size, const int idx[], const double x[] )$/;"	f	signature:( const int size, const int idx[], const double x[] )
oddhs_lhs	./oddhs.h	/^double oddhs_lhs( const int size, const int idx[], const double x[] );$/;"	p	signature:( const int size, const int idx[], const double x[] )
oddhs_make_maximal_cliques	./oddhs.c	/^void oddhs_make_maximal_cliques( OddHoleSep *oddhs, const CGraph *cgraph, const double x[] ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const CGraph *cgraph, const double x[] )
oddhs_make_maximal_cliques	./oddhs.c	/^void oddhs_make_maximal_cliques( OddHoleSep *oddhs, const CGraph *cgraph, const double x[] )$/;"	f	signature:( OddHoleSep *oddhs, const CGraph *cgraph, const double x[] )
oddhs_prepare_dist_graph	./oddhs.c	/^void oddhs_prepare_dist_graph( OddHoleSepPtr oddhs, const double x[], const CGraph * conflicts ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSepPtr oddhs, const double x[], const CGraph * conflicts )
oddhs_prepare_dist_graph	./oddhs.c	/^void oddhs_prepare_dist_graph( OddHoleSepPtr oddhs, const double x[], const CGraph * conflicts )$/;"	f	signature:( OddHoleSepPtr oddhs, const double x[], const CGraph * conflicts )
oddhs_rhs	./oddhs.c	/^double oddhs_rhs( const int size )$/;"	f	signature:( const int size )
oddhs_rhs	./oddhs.h	/^double oddhs_rhs( const int size );$/;"	p	signature:( const int size )
oddhs_search_odd_holes	./oddhs.c	/^int oddhs_search_odd_holes( OddHoleSep *oddhs, const int cols, const double x[],$/;"	f	signature:( OddHoleSep *oddhs, const int cols, const double x[], const double rc[], const CGraph *conflicts )
oddhs_search_odd_holes	./oddhs.h	/^int oddhs_search_odd_holes( OddHoleSep *oddhs, const int cols, const double x[],$/;"	p	signature:( OddHoleSep *oddhs, const int cols, const double x[], const double rc[], const CGraph *conflicts )
oddhs_search_wheel_centers_all_dohs	./oddhs.c	/^int oddhs_search_wheel_centers_all_dohs( OddHoleSep *oddhs, const CGraph *cgraph, const double x[], const double rc[] ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const CGraph *cgraph, const double x[], const double rc[] )
oddhs_search_wheel_centers_all_dohs	./oddhs.c	/^int oddhs_search_wheel_centers_all_dohs( OddHoleSep *oddhs, const CGraph *cgraph, const double x[], const double rc[] )$/;"	f	signature:( OddHoleSep *oddhs, const CGraph *cgraph, const double x[], const double rc[] )
oddhs_try_path	./oddhs.c	/^int oddhs_try_path( OddHoleSep *oddhs, const int i, const int nz, int _idx[], const CGraph *cgraph ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const int i, const int nz, int _idx[], const CGraph *cgraph )
oddhs_try_path	./oddhs.c	/^int oddhs_try_path( OddHoleSep *oddhs, const int i, const int nz, int _idx[], const CGraph *cgraph )$/;"	f	signature:( OddHoleSep *oddhs, const int i, const int nz, int _idx[], const CGraph *cgraph )
oddhs_vector_has_repeated_entries	./oddhs.c	/^int oddhs_vector_has_repeated_entries( OddHoleSep *oddhs, const int maxIndex, const int nz, const int idx[] ) __attribute__ ((visibility("hidden")));$/;"	p	file:	signature:( OddHoleSep *oddhs, const int maxIndex, const int nz, const int idx[] )
oddhs_vector_has_repeated_entries	./oddhs.c	/^int oddhs_vector_has_repeated_entries( OddHoleSep *oddhs, const int maxIndex, const int nz, const int idx[] )$/;"	f	signature:( OddHoleSep *oddhs, const int maxIndex, const int nz, const int idx[] )
oddhs_viol	./oddhs.c	/^double oddhs_viol( const int size, const int idx[], const double x[] )$/;"	f	signature:( const int size, const int idx[], const double x[] )
oddhs_viol	./oddhs.h	/^double oddhs_viol( const int size, const int idx[], const double x[] );$/;"	p	signature:( const int size, const int idx[], const double x[] )
online	./lahc.c	/^    int online;$/;"	m	struct:_LAHC	file:	access:public
online	./neighborhood.c	/^    int online;$/;"	m	struct:_Neighborhood	file:	access:public
origIdx	./cgraph.c	/^    int *origIdx; \/* if it is a preprocessed graph,$/;"	m	struct:_CGraph	file:	access:public
origJob	./instance.c	/^    const struct _Job *origJob;$/;"	m	struct:_Job	typeref:struct:_Job::_Job	file:	access:public
origMinT	./solution.c	/^    int *origMinT;$/;"	m	struct:_Solution	file:	access:public
parallel	./lahc.c	/^    int parallel;$/;"	m	struct:_LAHC	file:	access:public
parallel	./vnd.c	/^    int parallel;$/;"	m	struct:_VND	file:	access:public
parseName	./cut_pool.c	/^int parseName( const char *name, char *prefix, int *idx )$/;"	f	signature:( const char *name, char *prefix, int *idx )
parseName	./cut_pool.c	/^static int parseName( const char *name, char *prefix, int *idx );$/;"	p	file:	signature:( const char *name, char *prefix, int *idx )
parseName	./mip_compact.c	/^int parseName( const char *name, char *prefix, int *idx )$/;"	f	signature:( const char *name, char *prefix, int *idx )
parseName	./mip_compact.c	/^static int parseName( const char *name, char *prefix, int *idx );$/;"	p	file:	signature:( const char *name, char *prefix, int *idx )
path	./spaths.c	/^    int *path;     \/\/ temporary storage for path$/;"	m	struct:_ShortestPathsFinder	file:	access:public
paths	./instance.c	/^    VecInt **paths;$/;"	m	struct:_Instance	file:	access:public
penaltyChangeMode	./neighborhood.c	/^    int penaltyChangeMode;$/;"	m	struct:_Neighborhood	file:	access:public
penaltySW	./lahc.c	/^    float penaltySW;$/;"	m	struct:_LAHC	file:	access:public
perc	./lahc.c	/^    double perc, percRS;$/;"	m	struct:_LAHC	file:	access:public
perc	./vns.c	/^    double perc;$/;"	m	struct:_VNS	file:	access:public
percRS	./lahc.c	/^    double perc, percRS;$/;"	m	struct:_LAHC	file:	access:public
percRS	./vns.c	/^    double percRS;$/;"	m	struct:_VNS	file:	access:public
pos	./node_heap.c	/^    int *pos;$/;"	m	struct:_NodeHeap	file:	access:public
pos	./tokenizer.c	/^    VecInt *pos;$/;"	m	struct:_Tokenizer	file:	access:public
posJobs	./solution.c	/^    int *posJobs;$/;"	m	struct:_Solution	file:	access:public
posNLastJModify	./neighborhood.c	/^    int *posNLastJModify;$/;"	m	struct:_Neighborhood	file:	access:public
pq	./node_heap.c	/^    NodeCost *pq;$/;"	m	struct:_NodeHeap	file:	access:public
precConsType	./mip_compact.c	/^static int precConsType = 2;$/;"	v	file:
pred	./instance.c	/^    int *pred;$/;"	m	struct:_Job	file:	access:public
previous	./spaths.c	/^    int *previous;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
previousNode	./cgraph.c	/^    int previousNode;$/;"	m	struct:_NeighIterator	file:	access:public
priorities	./solution.c	/^    NodeHeap *priorities;$/;"	m	struct:_Solution	file:	access:public
prjc_dummy_cost	./proj_decomp.c	/^double prjc_dummy_cost( const ProjDecomp *prjdc )$/;"	f	signature:( const ProjDecomp *prjdc )
prjc_dummy_cost	./proj_decomp.c	/^static double prjc_dummy_cost( const ProjDecomp *prjdc );$/;"	p	file:	signature:( const ProjDecomp *prjdc )
prjdc_create	./proj_decomp.c	/^ProjDecomp *prjdc_create( const Instance *instance, int tpdSum )$/;"	f	signature:( const Instance *instance, int tpdSum )
prjdc_create	./proj_decomp.h	/^ProjDecomp *prjdc_create( const Instance *instance, int tpdSum );$/;"	p	signature:( const Instance *instance, int tpdSum )
prjdc_create_constraint_convexification	./proj_decomp.c	/^static void prjdc_create_constraint_convexification( ProjDecomp *prjdc );$/;"	p	file:	signature:( ProjDecomp *prjdc )
prjdc_create_constraint_convexification	./proj_decomp.c	/^void prjdc_create_constraint_convexification( ProjDecomp *prjdc )$/;"	f	signature:( ProjDecomp *prjdc )
prjdc_create_constraint_resources	./proj_decomp.c	/^static void prjdc_create_constraint_resources( ProjDecomp *prjdc );$/;"	p	file:	signature:( ProjDecomp *prjdc )
prjdc_create_constraint_resources	./proj_decomp.c	/^void prjdc_create_constraint_resources( ProjDecomp *prjdc )$/;"	f	signature:( ProjDecomp *prjdc )
prjdc_create_dummy_variables	./proj_decomp.c	/^static void prjdc_create_dummy_variables( ProjDecomp *prjdc );$/;"	p	file:	signature:( ProjDecomp *prjdc )
prjdc_create_dummy_variables	./proj_decomp.c	/^void prjdc_create_dummy_variables( ProjDecomp *prjdc )$/;"	f	signature:( ProjDecomp *prjdc )
prjdc_create_master	./proj_decomp.c	/^static void prjdc_create_master( ProjDecomp *prjdc );$/;"	p	file:	signature:( ProjDecomp *prjdc )
prjdc_create_master	./proj_decomp.c	/^void prjdc_create_master( ProjDecomp *prjdc )$/;"	f	signature:( ProjDecomp *prjdc )
prjdc_free	./proj_decomp.c	/^void prjdc_free( ProjDecomp **_prjdc )$/;"	f	signature:( ProjDecomp **_prjdc )
prjdc_free	./proj_decomp.h	/^void prjdc_free( ProjDecomp **_prjdc );$/;"	p	signature:( ProjDecomp **_prjdc )
probabilities	./learning.c	/^    double *initialProbabilities, *probabilities;$/;"	m	struct:_LearningAutomata	file:	access:public
project	./mip_compact.c	/^    const Project *project;$/;"	m	struct:_MIPCompact	file:	access:public
projects	./instance.c	/^    Project *projects;$/;"	m	struct:_Instance	file:	access:public
qsort_int	./vint_set.c	/^inline void qsort_int( int v[], const size_t n )$/;"	f	signature:( int v[], const size_t n )
qsort_int	./vint_set.h	/^void qsort_int( int v[], const size_t n );$/;"	p	signature:( int v[], const size_t n )
ra_alphaIndex	./grasp.c	/^    int ra_alphaIndex;$/;"	m	struct:_Grasp	file:	access:public
ra_count	./grasp.c	/^    int *ra_count;$/;"	m	struct:_Grasp	file:	access:public
ra_p	./grasp.c	/^    double *ra_p;$/;"	m	struct:_Grasp	file:	access:public
ra_q	./grasp.c	/^    double *ra_q;$/;"	m	struct:_Grasp	file:	access:public
ra_roullete	./grasp.c	/^    int *ra_roullete;$/;"	m	struct:_Grasp	file:	access:public
ra_roullete_size	./grasp.c	/^    int ra_roullete_size;$/;"	m	struct:_Grasp	file:	access:public
ra_score	./grasp.c	/^    int *ra_score;    \/* score: sumation of weights in iterations where cliqueSet is updated$/;"	m	struct:_Grasp	file:	access:public
rcPercentage	./clique_extender.c	/^    double rcPercentage;$/;"	m	struct:_CliqueExtender	file:	access:public
readIntVectorStr	./instance.c	/^int readIntVectorStr( const char *str, Tokenizer *tok, int minElements, int maxElements, int *el )$/;"	f	signature:( const char *str, Tokenizer *tok, int minElements, int maxElements, int *el )
readIntVectorStr	./instance.c	/^int readIntVectorStr( const char *str, Tokenizer *tok, int minElements, int maxElements, int el[] );$/;"	p	file:	signature:( const char *str, Tokenizer *tok, int minElements, int maxElements, int el[] )
releaseDate	./instance.c	/^    int releaseDate;$/;"	m	struct:_Project	file:	access:public
res	./mip_compact.c	/^    Results *res;$/;"	m	struct:_MIPCompact	file:	access:public
resetInterval	./learning.c	/^    int  resetInterval;$/;"	m	struct:_LearningAutomata	file:	access:public
rewardedActions	./learning.c	/^    int rewardedActions;$/;"	m	struct:_LearningAutomata	file:	access:public
rootPos	./node_heap.c	23;"	d	file:
rootPosBHV	./cgraph.c	1436;"	d	file:
roundCuts	./mip_compact.c	/^    int *roundCuts;$/;"	m	struct:_MIPCompact	file:	access:public
rowCap	./dict_int.c	/^    int *rowCap;$/;"	m	struct:_Dict_int	file:	access:public
rowSize	./dict_int.c	/^    int *rowSize;$/;"	m	struct:_Dict_int	file:	access:public
rru	./solution.c	/^    RRUsage *rru;$/;"	m	struct:_Solution	file:	access:public
s	./vec_str.c	/^    char *s;$/;"	m	struct:_VecStr	file:	access:public
sIdx	./ms_solver_mip.c	/^    int **sIdx;$/;"	m	struct:_MSM_Solver	file:	access:public
seqCompOnExtrem	./neighborhood.h	/^                        seqSwapJobFILS=11, seqInsertJobFILS=12, seqCompOnExtrem=13, seqMoveProj=14$/;"	e	enum:NeighborhoodType
seqCompactProj	./neighborhood.h	/^enum NeighborhoodType { seqInvert=1, seqShiftJob=2, seqSwapJob=3, seqShiftProj=4, seqSwapProj=5, seqCompactProj=6,$/;"	e	enum:NeighborhoodType
seqInsertJobFILS	./neighborhood.h	/^                        seqSwapJobFILS=11, seqInsertJobFILS=12, seqCompOnExtrem=13, seqMoveProj=14$/;"	e	enum:NeighborhoodType
seqInvert	./neighborhood.h	/^enum NeighborhoodType { seqInvert=1, seqShiftJob=2, seqSwapJob=3, seqShiftProj=4, seqSwapProj=5, seqCompactProj=6,$/;"	e	enum:NeighborhoodType
seqMoveProj	./neighborhood.h	/^                        seqSwapJobFILS=11, seqInsertJobFILS=12, seqCompOnExtrem=13, seqMoveProj=14$/;"	e	enum:NeighborhoodType
seqShiftJob	./neighborhood.h	/^enum NeighborhoodType { seqInvert=1, seqShiftJob=2, seqSwapJob=3, seqShiftProj=4, seqSwapProj=5, seqCompactProj=6,$/;"	e	enum:NeighborhoodType
seqShiftProj	./neighborhood.h	/^enum NeighborhoodType { seqInvert=1, seqShiftJob=2, seqSwapJob=3, seqShiftProj=4, seqSwapProj=5, seqCompactProj=6,$/;"	e	enum:NeighborhoodType
seqSwapJob	./neighborhood.h	/^enum NeighborhoodType { seqInvert=1, seqShiftJob=2, seqSwapJob=3, seqShiftProj=4, seqSwapProj=5, seqCompactProj=6,$/;"	e	enum:NeighborhoodType
seqSwapJobFILS	./neighborhood.h	/^                        seqSwapJobFILS=11, seqInsertJobFILS=12, seqCompOnExtrem=13, seqMoveProj=14$/;"	e	enum:NeighborhoodType
seqSwapProj	./neighborhood.h	/^enum NeighborhoodType { seqInvert=1, seqShiftJob=2, seqSwapJob=3, seqShiftProj=4, seqSwapProj=5, seqCompactProj=6,$/;"	e	enum:NeighborhoodType
sequence	./solution.c	/^    int *sequence;$/;"	m	struct:_Solution	file:	access:public
sideway	./lahc.c	/^    int sideway;$/;"	m	struct:_LAHC	file:	access:public
sideway	./learning.c	/^    int sideway;$/;"	m	struct:_LearningAutomata	file:	access:public
size	./list_int.c	/^    int size;$/;"	m	struct:_ListInt	file:	access:public
size	./vec_char.c	/^    int size;$/;"	m	struct:_VecChar	file:	access:public
size	./vec_double.c	/^    int size;$/;"	m	struct:_VecDbl	file:	access:public
size	./vec_int.c	/^    int size;$/;"	m	struct:_VecInt	file:	access:public
size	./vec_str.c	/^    int size;$/;"	m	struct:_VecStr	file:	access:public
size	./vint_set.h	/^    int size;$/;"	m	struct:__anon14	access:public
sizeSamplingShake	./vns.c	/^    int sizeSamplingShake;$/;"	m	struct:_VNS	file:	access:public
slack	./mip_compact.c	/^    double slack;$/;"	m	struct:_MIPCompact	file:	access:public
sol	./mip_compact.c	/^    Solution *sol;$/;"	m	struct:_MIPCompact	file:	access:public
solIni	./ils.c	/^    Solution *solIni;$/;"	m	struct:_ILS	file:	access:public
solInitial	./constructive.c	/^    Solution *solInitial;$/;"	m	struct:_Constructive	file:	access:public
solutionHash	./solution.c	/^    unsigned int solutionHash;$/;"	m	struct:_Solution	file:	access:public
somaMinDurationPathsByJob	./instance.c	/^int somaMinDurationPathsByJob(const Instance *inst, int j, int nSuccs)$/;"	f	signature:(const Instance *inst, int j, int nSuccs)
somaMinDurationPathsByJob	./instance.h	/^int somaMinDurationPathsByJob( const Instance *inst, int j, int nSuccs);$/;"	p	signature:( const Instance *inst, int j, int nSuccs)
somaMinDurationPathsByJobAndInter	./instance.c	/^int somaMinDurationPathsByJobAndInter(const Instance *inst, int j, int nSuccs, int inter , int durInter)$/;"	f	signature:(const Instance *inst, int j, int nSuccs, int inter , int durInter)
somaMinDurationPathsByJobAndInter	./instance.h	/^int somaMinDurationPathsByJobAndInter(const Instance *inst, int j, int nSuccs, int inter , int durInter);$/;"	p	signature:(const Instance *inst, int j, int nSuccs, int inter , int durInter)
spArcDist	./oddhs.c	/^    int *spArcDist;  \/\/ distance for each arc$/;"	m	struct:_OddHoleSep	file:	access:public
spArcStart	./oddhs.c	/^    int *spArcStart; \/\/ start index for arcs of each node$/;"	m	struct:_OddHoleSep	file:	access:public
spArcTo	./oddhs.c	/^    int *spArcTo;    \/\/ destination of each arc$/;"	m	struct:_OddHoleSep	file:	access:public
spArcs	./oddhs.c	/^    int spArcs;$/;"	m	struct:_OddHoleSep	file:	access:public
spArcsCap	./oddhs.c	/^    int spArcsCap;$/;"	m	struct:_OddHoleSep	file:	access:public
spNodeCap	./oddhs.c	/^    int spNodeCap;$/;"	m	struct:_OddHoleSep	file:	access:public
spNodes	./oddhs.c	/^    int spNodes;$/;"	m	struct:_OddHoleSep	file:	access:public
spOrigPathIdx	./oddhs.c	/^    int *spOrigPathIdx;      \/\/ to store discovered shortest path$/;"	m	struct:_OddHoleSep	file:	access:public
spPathIdx	./oddhs.c	/^    int *spPathIdx;      \/\/ to store discovered shortest path$/;"	m	struct:_OddHoleSep	file:	access:public
spf	./oddhs.c	/^    ShortestPathsFinder *spf;$/;"	m	struct:_OddHoleSep	file:	access:public
spf_arcs	./spaths.c	/^int spf_arcs( ShortestPathsFinder* spf )$/;"	f	signature:( ShortestPathsFinder* spf )
spf_arcs	./spaths.h	/^int spf_arcs( ShortestPathsFinder* spf );$/;"	p	signature:( ShortestPathsFinder* spf )
spf_create	./spaths.c	/^ShortestPathsFinderPtr spf_create( )$/;"	f
spf_create	./spaths.h	/^ShortestPathsFinderPtr spf_create(  );$/;"	p	signature:( )
spf_end_n	./spaths.c	/^Neighbor *spf_end_n( ShortestPathsFinder* spf, const int node )$/;"	f	signature:( ShortestPathsFinder* spf, const int node )
spf_end_n	./spaths.c	/^Neighbor *spf_end_n( ShortestPathsFinder* spf, const int node );$/;"	p	file:	signature:( ShortestPathsFinder* spf, const int node )
spf_find	./spaths.c	/^void spf_find( ShortestPathsFinder* spf, const int origin )$/;"	f	signature:( ShortestPathsFinder* spf, const int origin )
spf_find	./spaths.h	/^void spf_find( ShortestPathsFinder* spf, const int origin ) __attribute__((hot));$/;"	p	signature:( ShortestPathsFinder* spf, const int origin )
spf_free	./spaths.c	/^void spf_free( ShortestPathsFinderPtr *spf )$/;"	f	signature:( ShortestPathsFinderPtr *spf )
spf_free	./spaths.h	/^void spf_free( ShortestPathsFinderPtr *spf );$/;"	p	signature:( ShortestPathsFinderPtr *spf )
spf_fw_find	./spaths.c	/^void spf_fw_find( ShortestPathsFinder* spf )$/;"	f	signature:( ShortestPathsFinder* spf )
spf_fw_find	./spaths.h	/^void spf_fw_find( ShortestPathsFinder* spf );$/;"	p	signature:( ShortestPathsFinder* spf )
spf_fw_get_dist	./spaths.c	/^inline int spf_fw_get_dist( ShortestPathsFinder* spf, const int i, const int j )$/;"	f	signature:( ShortestPathsFinder* spf, const int i, const int j )
spf_fw_get_dist	./spaths.h	/^int spf_fw_get_dist( ShortestPathsFinder* spf, const int i, const int j ) __attribute__((always_inline));$/;"	p	signature:( ShortestPathsFinder* spf, const int i, const int j )
spf_fw_ran	./spaths.c	/^int spf_fw_ran( ShortestPathsFinder* spf )$/;"	f	signature:( ShortestPathsFinder* spf )
spf_fw_ran	./spaths.h	/^int spf_fw_ran( ShortestPathsFinder* spf );$/;"	p	signature:( ShortestPathsFinder* spf )
spf_get_arc	./spaths.c	/^int spf_get_arc( ShortestPathsFinder* spf, const int head, const int tail )$/;"	f	signature:( ShortestPathsFinder* spf, const int head, const int tail )
spf_get_arc	./spaths.h	/^int spf_get_arc( ShortestPathsFinder* spf, const int tail, const int head );$/;"	p	signature:( ShortestPathsFinder* spf, const int tail, const int head )
spf_get_dist	./spaths.c	/^inline int spf_get_dist( const ShortestPathsFinderPtr spf, const int node )$/;"	f	signature:( const ShortestPathsFinderPtr spf, const int node )
spf_get_dist	./spaths.h	/^int spf_get_dist( const ShortestPathsFinderPtr spf, const int node ) __attribute__((always_inline));$/;"	p	signature:( const ShortestPathsFinderPtr spf, const int node )
spf_get_path	./spaths.c	/^int spf_get_path( const ShortestPathsFinder *spf, const int toNode, int indexes[] )$/;"	f	signature:( const ShortestPathsFinder *spf, const int toNode, int indexes[] )
spf_get_path	./spaths.h	/^int spf_get_path( const ShortestPathsFinder *spf, const int toNode, int indexes[] );$/;"	p	signature:( const ShortestPathsFinder *spf, const int toNode, int indexes[] )
spf_get_path_fw	./spaths.c	/^int spf_get_path_fw( const ShortestPathsFinder *spf, const int fromNode, const int toNode, int indexes[] )$/;"	f	signature:( const ShortestPathsFinder *spf, const int fromNode, const int toNode, int indexes[] )
spf_get_path_fw	./spaths.h	/^int spf_get_path_fw( const ShortestPathsFinder *spf, const int fromNode, const int toNode, int indexes[] );$/;"	p	signature:( const ShortestPathsFinder *spf, const int fromNode, const int toNode, int indexes[] )
spf_get_previous	./spaths.c	/^inline int spf_get_previous( const ShortestPathsFinderPtr spf, const int node )$/;"	f	signature:( const ShortestPathsFinderPtr spf, const int node )
spf_get_previous	./spaths.h	/^int spf_get_previous( const ShortestPathsFinderPtr spf, const int node ) __attribute__((always_inline));$/;"	p	signature:( const ShortestPathsFinderPtr spf, const int node )
spf_load_gr	./spaths.c	/^ShortestPathsFinder *spf_load_gr( const char *fileName )$/;"	f	signature:( const char *fileName )
spf_load_gr	./spaths.h	/^ShortestPathsFinder *spf_load_gr( const char *fileName );$/;"	p	signature:( const char *fileName )
spf_nodes	./spaths.c	/^int spf_nodes( ShortestPathsFinder* spf )$/;"	f	signature:( ShortestPathsFinder* spf )
spf_nodes	./spaths.h	/^int spf_nodes( ShortestPathsFinder* spf );$/;"	p	signature:( ShortestPathsFinder* spf )
spf_previous	./spaths.c	/^int *spf_previous( const ShortestPathsFinder *spf )$/;"	f	signature:( const ShortestPathsFinder *spf )
spf_previous	./spaths.h	/^int *spf_previous( const ShortestPathsFinder *spf );$/;"	p	signature:( const ShortestPathsFinder *spf )
spf_proccessFWLoop	./spaths.c	/^void spf_proccessFWLoop( ShortestPathsFinder* spf ) __attribute__((hot));$/;"	p	file:	signature:( ShortestPathsFinder* spf )
spf_proccessFWLoop	./spaths.c	/^void spf_proccessFWLoop( ShortestPathsFinder* spf )$/;"	f	signature:( ShortestPathsFinder* spf )
spf_restore_arc	./spaths.c	/^void spf_restore_arc( ShortestPathsFinder* spf, const int tail, const int head )$/;"	f	signature:( ShortestPathsFinder* spf, const int tail, const int head )
spf_restore_arc	./spaths.h	/^void spf_restore_arc( ShortestPathsFinder* spf, const int tail, const int head );$/;"	p	signature:( ShortestPathsFinder* spf, const int tail, const int head )
spf_start_n	./spaths.c	/^Neighbor *spf_start_n( ShortestPathsFinder* spf, const int node )$/;"	f	signature:( ShortestPathsFinder* spf, const int node )
spf_start_n	./spaths.c	/^Neighbor *spf_start_n( ShortestPathsFinder* spf, const int node );$/;"	p	file:	signature:( ShortestPathsFinder* spf, const int node )
spf_temp_remove_arc	./spaths.c	/^void spf_temp_remove_arc( ShortestPathsFinder* spf, const int tail, const int head )$/;"	f	signature:( ShortestPathsFinder* spf, const int tail, const int head )
spf_temp_remove_arc	./spaths.h	/^void spf_temp_remove_arc( ShortestPathsFinder* spf, const int tail, const int head );$/;"	p	signature:( ShortestPathsFinder* spf, const int tail, const int head )
spf_update_arc	./spaths.c	/^void spf_update_arc( ShortestPathsFinder* spf, const int tail, const int head, const int cost )$/;"	f	signature:( ShortestPathsFinder* spf, const int tail, const int head, const int cost )
spf_update_arc	./spaths.h	/^void spf_update_arc( ShortestPathsFinder* spf, const int tail, const int head, const int cost );$/;"	p	signature:( ShortestPathsFinder* spf, const int tail, const int head, const int cost )
spf_update_digraph	./spaths.c	/^void spf_update_digraph( ShortestPathsFinder* spf, const int nodes, const int narcs, Arc *arcs )$/;"	f	signature:( ShortestPathsFinder* spf, const int nodes, const int narcs, Arc *arcs )
spf_update_digraph	./spaths.c	/^void spf_update_digraph( ShortestPathsFinder* spf, const int nodes, const int narcs, Arc *arcs );$/;"	p	file:	signature:( ShortestPathsFinder* spf, const int nodes, const int narcs, Arc *arcs )
spf_update_graph	./spaths.c	/^void spf_update_graph( ShortestPathsFinder* spf, const int nodes, const int arcs, const int *arcStart, const int *toNode, const int *dist )$/;"	f	signature:( ShortestPathsFinder* spf, const int nodes, const int arcs, const int *arcStart, const int *toNode, const int *dist )
spf_update_graph	./spaths.h	/^void spf_update_graph( ShortestPathsFinder* spf, const int nodes, const int arcs, const int *arcStart, const int *toNode, const int *dist );$/;"	p	signature:( ShortestPathsFinder* spf, const int nodes, const int arcs, const int *arcStart, const int *toNode, const int *dist )
splitString	./str_utils.c	/^int splitString( char **columns, const char *str, const char delimiter,$/;"	f	signature:( char **columns, const char *str, const char delimiter, const int maxColumns, const int columnSize, const char multDel )
splitString	./str_utils.h	/^int splitString( char **columns, const char *str, const char delimiter,$/;"	p	signature:( char **columns, const char *str, const char delimiter, const int maxColumns, const int columnSize, const char multDel )
startJobs	./solution.c	/^    int *startJobs;$/;"	m	struct:_Solution	file:	access:public
startResN	./mode_set.c	/^    int startResN;$/;"	m	struct:_ModeSet	file:	access:public
startn	./spaths.c	/^    Neighbor **startn;$/;"	m	struct:_ShortestPathsFinder	file:	access:public
storeVarNames	./mip_compact.c	/^static void storeVarNames( int n, const char **names, MIPCompact *mipp );$/;"	p	file:	signature:( int n, const char **names, MIPCompact *mipp )
storeVarNames	./mip_compact.c	/^void storeVarNames( int n, const char **names, MIPCompact *mipp )$/;"	f	signature:( int n, const char **names, MIPCompact *mipp )
str	./dict_int.c	/^    char str[256];$/;"	m	struct:__anon6	file:	access:public
str	./tokenizer.c	/^    VecChar *str;$/;"	m	struct:_Tokenizer	file:	access:public
strAllToUpper	./str_utils.c	/^void strAllToUpper( char *str )$/;"	f	signature:( char *str )
strAllToUpper	./str_utils.h	/^void strAllToUpper( char *str );$/;"	p	signature:( char *str )
strClearSpaces	./str_utils.c	/^char *strClearSpaces(char *str)$/;"	f	signature:(char *str)
strClearSpaces	./str_utils.h	/^char *strClearSpaces(char *str);$/;"	p	signature:(char *str)
strFillSpacesBoth	./str_utils.c	/^void strFillSpacesBoth( char *dest, const char *str, int n )$/;"	f	signature:( char *dest, const char *str, int n )
strFillSpacesLeft	./str_utils.c	/^void strFillSpacesLeft( char* dest, const char* str, int n )$/;"	f	signature:( char* dest, const char* str, int n )
strFillSpacesLeft	./str_utils.h	/^void strFillSpacesLeft( char *dest, const char *str, int n );$/;"	p	signature:( char *dest, const char *str, int n )
strFillSpacesRight	./str_utils.c	/^void strFillSpacesRight(char* dest, const char* str, int n)$/;"	f	signature:(char* dest, const char* str, int n)
strFillSpacesRight	./str_utils.h	/^void strFillSpacesRight( char *dest, const char *str, int n );$/;"	p	signature:( char *dest, const char *str, int n )
strFillSpaces_both	./str_utils.h	/^void strFillSpaces_both( char *dest, const char *str, int n );$/;"	p	signature:( char *dest, const char *str, int n )
strRemoveDblSpaces	./str_utils.c	/^char *strRemoveDblSpaces( char *str )$/;"	f	signature:( char *str )
strRemoveDblSpaces	./str_utils.h	/^void strRemoveDblSpaces( char *str );$/;"	p	signature:( char *str )
strRemoveSpsEol	./str_utils.c	/^char *strRemoveSpsEol( char *str )$/;"	f	signature:( char *str )
strRemoveSpsEol	./str_utils.h	/^char* strRemoveSpsEol( char *str );$/;"	p	signature:( char *str )
strRemoveSpsSol	./str_utils.c	/^char *strRemoveSpsSol( char *dest, const char *str )$/;"	f	signature:( char *dest, const char *str )
strRemoveSpsSol	./str_utils.h	/^char *strRemoveSpsSol( char *dest, const char *str );$/;"	p	signature:( char *dest, const char *str )
strSize	./vec_str.c	/^    int strSize;$/;"	m	struct:_VecStr	file:	access:public
str_hash	./dict_int.c	/^static unsigned int str_hash( const char *str, const unsigned int hashSize )$/;"	f	file:	signature:( const char *str, const unsigned int hashSize )
succ	./instance.c	/^    int *succ;$/;"	m	struct:_Job	file:	access:public
sumTPD	./instance.c	/^    int sumTPD;$/;"	m	struct:_Instance	file:	access:public
sumViol	./results.c	/^    double **sumViol; \/\/para cada round e para cada tipo de corte a soma das violações;$/;"	m	struct:_Results	file:	access:public
sv	./vec_str.c	/^    char **sv;$/;"	m	struct:_VecStr	file:	access:public
sw	./neighborhood.c	/^    int sw;$/;"	m	struct:_Neighborhood	file:	access:public
t	./mip_compact.c	/^    int t;$/;"	m	struct:__anon10	file:	access:public
tCutsTotal	./results.c	/^    double **tCutsTotal; \/\/total de tempo para gerar os cortes cortes em cada round para cada tipo de corte$/;"	m	struct:_Results	file:	access:public
tail	./cgraph.c	/^    int tail;$/;"	m	struct:CGArc	file:	access:public
tail	./digraph.h	/^    int tail;$/;"	m	struct:__anon7	access:public
tardCost	./instance.c	/^    int tardCost;$/;"	m	struct:_Project	file:	access:public
timeNeigh	./test.c	/^    double *timeNeigh;$/;"	m	struct:_Test	file:	access:public
timePrint	./learning.c	/^    int timePrint;$/;"	m	struct:_LearningAutomata	file:	access:public
timePrint	./neighborhood.c	/^    int timePrint;$/;"	m	struct:_Neighborhood	file:	access:public
tlp	./long_compl_path.c	/^    int *tlp;$/;"	m	struct:_LongestComplPath	file:	access:public
tmpClique	./clique.c	/^    IntSet tmpClique;$/;"	m	struct:_CliqueSet	file:	access:public
tmpCliqueOI	./clique.c	/^    IntSet tmpCliqueOI;$/;"	m	struct:_CliqueSet	file:	access:public
tokens	./tokenizer.c	/^    VecStr *tokens;$/;"	m	struct:_Tokenizer	file:	access:public
top	./stack.c	/^    int top;$/;"	m	struct:_Stack	file:	access:public
topSort	./long_compl_path.c	/^    TopSort *topSort;$/;"	m	struct:_LongestComplPath	file:	access:public
totalTime	./test.c	/^    double totalTime;$/;"	m	struct:_Test	file:	access:public
tpd	./mip_compact.c	/^    double tpd;$/;"	m	struct:_MIPCompact	file:	access:public
tpdSum	./mip_compact.c	/^    int tpdSum;$/;"	m	struct:_MIPCompact	file:	access:public
tpdSum	./proj_decomp.c	/^    int tpdSum;$/;"	m	struct:_ProjDecomp	file:	access:public
tsCap	./rrusage.c	/^    int tsCap;$/;"	m	struct:_RRUsage	file:	access:public
tsUsed	./rrusage.c	/^    int tsUsed;$/;"	m	struct:_RRUsage	file:	access:public
uIdx	./mip_compact.c	/^    int **uIdx;$/;"	m	struct:_MIPCompact	file:	access:public
uniform	./neighborhood.c	/^    int uniform;$/;"	m	struct:_Neighborhood	file:	access:public
usageNonRenewable	./mode_set.c	/^    int *usageNonRenewable;$/;"	m	struct:_ModeSet	file:	access:public
useR	./rrusage.c	/^    int **useR;$/;"	m	struct:_RRUsage	file:	access:public
useResN	./instance.c	/^    int *useResN;$/;"	m	struct:_Mode	file:	access:public
useResR	./instance.c	/^    int *useResR;$/;"	m	struct:_Mode	file:	access:public
value	./dict_int.c	/^    int value;$/;"	m	struct:__anon6	file:	access:public
value	./list_int.c	/^    int value;$/;"	m	struct:_Node	file:	access:public
value	./mip_compact.c	/^    float value;$/;"	m	struct:__anon10	file:	access:public
vector	./vec_char.c	/^    char *vector;$/;"	m	struct:_VecChar	file:	access:public
vector	./vec_double.c	/^    double *vector;$/;"	m	struct:_VecDbl	file:	access:public
vector	./vec_int.c	/^    int *vector;$/;"	m	struct:_VecInt	file:	access:public
verbose	./clique_separation.c	/^    int verbose;$/;"	m	struct:_CliqueSeparation	file:	access:public
vint_insert_sort	./vint_set.c	/^inline void vint_insert_sort( const int key, int v[], const size_t n )$/;"	f	signature:( const int key, int v[], const size_t n )
vint_insert_sort	./vint_set.h	/^void vint_insert_sort( const int key, int v[], const size_t n );$/;"	p	signature:( const int key, int v[], const size_t n )
vint_queue_clean	./vint_queue.c	/^void vint_queue_clean( IntQueue *iqueue )$/;"	f	signature:( IntQueue *iqueue )
vint_queue_clean	./vint_queue.h	/^void vint_queue_clean( IntQueue *iqueue );$/;"	p	signature:( IntQueue *iqueue )
vint_queue_init	./vint_queue.c	/^void vint_queue_init( IntQueue *iqueue, int cap )$/;"	f	signature:( IntQueue *iqueue, int cap )
vint_queue_init	./vint_queue.h	/^void vint_queue_init( IntQueue *iqueue, int cap );$/;"	p	signature:( IntQueue *iqueue, int cap )
vint_queue_is_empty	./vint_queue.c	/^int vint_queue_is_empty( const IntQueue *iqueue )$/;"	f	signature:( const IntQueue *iqueue )
vint_queue_is_empty	./vint_queue.h	/^int vint_queue_is_empty( const IntQueue *iqueue ); \/\/returns 1 if queue is empty$/;"	p	signature:( const IntQueue *iqueue )
vint_queue_pop	./vint_queue.c	/^void vint_queue_pop( IntQueue *iqueue, int *value )$/;"	f	signature:( IntQueue *iqueue, int *value )
vint_queue_pop	./vint_queue.h	/^void vint_queue_pop( IntQueue *iqueue, int *value );$/;"	p	signature:( IntQueue *iqueue, int *value )
vint_queue_push	./vint_queue.c	/^void vint_queue_push( IntQueue *iqueue, int value )$/;"	f	signature:( IntQueue *iqueue, int value )
vint_queue_push	./vint_queue.h	/^void vint_queue_push( IntQueue *iqueue, int value );$/;"	p	signature:( IntQueue *iqueue, int value )
vint_set_add	./vint_set.c	/^void vint_set_add( IntSet *iset, const int elements[], int size )$/;"	f	signature:( IntSet *iset, const int elements[], int size )
vint_set_add	./vint_set.h	/^void vint_set_add( IntSet *iset, const int elements[], int size );$/;"	p	signature:( IntSet *iset, const int elements[], int size )
vint_set_add_opt	./vint_set.c	/^void vint_set_add_opt( IntSet *iset, const int elements[], int size )$/;"	f	signature:( IntSet *iset, const int elements[], int size )
vint_set_add_opt	./vint_set.h	/^void vint_set_add_opt( IntSet *iset, const int elements[], int size );$/;"	p	signature:( IntSet *iset, const int elements[], int size )
vint_set_add_using_original_indexes	./vint_set.c	/^void vint_set_add_using_original_indexes( IntSet *iset, const int elements[], int size, const int orig[] )$/;"	f	signature:( IntSet *iset, const int elements[], int size, const int orig[] )
vint_set_add_using_original_indexes	./vint_set.h	/^void vint_set_add_using_original_indexes( IntSet *iset, const int elements[], int size, const int orig[] );$/;"	p	signature:( IntSet *iset, const int elements[], int size, const int orig[] )
vint_set_check_capacity	./vint_set.c	/^inline void vint_set_check_capacity( IntSet *iset, const size_t required )$/;"	f	signature:( IntSet *iset, const size_t required )
vint_set_check_capacity	./vint_set.h	/^void vint_set_check_capacity( IntSet *iset, const size_t required );$/;"	p	signature:( IntSet *iset, const size_t required )
vint_set_clean	./vint_set.c	/^void vint_set_clean( IntSet *iset )$/;"	f	signature:( IntSet *iset )
vint_set_clean	./vint_set.h	/^void vint_set_clean( IntSet *iset );$/;"	p	signature:( IntSet *iset )
vint_set_clear	./vint_set.c	/^void vint_set_clear( IntSet *iset )$/;"	f	signature:( IntSet *iset )
vint_set_clear	./vint_set.h	/^void vint_set_clear( IntSet *iset );$/;"	p	signature:( IntSet *iset )
vint_set_cmp_int	./vint_set.c	/^int vint_set_cmp_int( const void *e1, const void *e2 )$/;"	f	signature:( const void *e1, const void *e2 )
vint_set_cmp_int	./vint_set.h	/^int vint_set_cmp_int( const void *e1, const void *e2 );$/;"	p	signature:( const void *e1, const void *e2 )
vint_set_equals	./vint_set.c	/^int vint_set_equals( const IntSet *is1, const IntSet *is2 )$/;"	f	signature:( const IntSet *is1, const IntSet *is2 )
vint_set_equals	./vint_set.h	/^int vint_set_equals( const IntSet *is1, const IntSet *is2 );$/;"	p	signature:( const IntSet *is1, const IntSet *is2 )
vint_set_find	./vint_set.c	/^const int *vint_set_find( const IntSet *iset, int key )$/;"	f	signature:( const IntSet *iset, int key )
vint_set_find	./vint_set.h	/^const int *vint_set_find( const IntSet *iset, int key );$/;"	p	signature:( const IntSet *iset, int key )
vint_set_force_check	./vint_set.c	/^void vint_set_force_check( IntSet *iset )$/;"	f	signature:( IntSet *iset )
vint_set_force_check	./vint_set.h	/^void vint_set_force_check( IntSet *iset );$/;"	p	signature:( IntSet *iset )
vint_set_force_elements_access	./vint_set.c	/^int *vint_set_force_elements_access( IntSet *iset )$/;"	f	signature:( IntSet *iset )
vint_set_force_elements_access	./vint_set.h	/^int *vint_set_force_elements_access( IntSet *iset );$/;"	p	signature:( IntSet *iset )
vint_set_force_size	./vint_set.c	/^void vint_set_force_size( IntSet *iset, const int size )$/;"	f	signature:( IntSet *iset, const int size )
vint_set_force_size	./vint_set.h	/^void vint_set_force_size( IntSet *iset, const int size );$/;"	p	signature:( IntSet *iset, const int size )
vint_set_get_elements	./vint_set.c	/^int *vint_set_get_elements( const IntSet *iset )$/;"	f	signature:( const IntSet *iset )
vint_set_get_elements	./vint_set.h	/^int *vint_set_get_elements( const IntSet *iset );$/;"	p	signature:( const IntSet *iset )
vint_set_init	./vint_set.c	/^void vint_set_init( IntSet *iset )$/;"	f	signature:( IntSet *iset )
vint_set_init	./vint_set.h	/^void vint_set_init( IntSet *iset );$/;"	p	signature:( IntSet *iset )
vint_set_int_find	./vint_set.c	/^int *vint_set_int_find( const int key, const int n, int numbers[] )$/;"	f	signature:( const int key, const int n, int numbers[] )
vint_set_int_find	./vint_set.h	/^int *vint_set_int_find( const int key, const int n, int numbers[] );$/;"	p	signature:( const int key, const int n, int numbers[] )
vint_set_intersection	./vint_set.c	/^const int vint_set_intersection( int intersection[], const int size, const int elements[], const IntSet *is2 )$/;"	f	signature:( int intersection[], const int size, const int elements[], const IntSet *is2 )
vint_set_intersection	./vint_set.h	/^const int vint_set_intersection( int intersection[], const int size, const int elements[], const IntSet *is2 );$/;"	p	signature:( int intersection[], const int size, const int elements[], const IntSet *is2 )
vint_set_size	./vint_set.c	/^int vint_set_size( const IntSet *iset )$/;"	f	signature:( const IntSet *iset )
vint_set_size	./vint_set.h	/^int vint_set_size( const IntSet *iset );$/;"	p	signature:( const IntSet *iset )
visitNeigh	./test.c	/^    int *visitNeigh;$/;"	m	struct:_Test	file:	access:public
vmg_adjust_vector_capacity	./vectormgm.c	/^void vmg_adjust_vector_capacity( void **v, int *cap, const int required, const size_t elementSize )$/;"	f	signature:( void **v, int *cap, const int required, const size_t elementSize )
vmg_adjust_vector_capacity	./vectormgm.h	/^void vmg_adjust_vector_capacity( void **v, int *cap, const int required, const size_t elementSize );$/;"	p	signature:( void **v, int *cap, const int required, const size_t elementSize )
w	./cgraph.c	/^    int *w;$/;"	m	struct:_CGraph	file:	access:public
w	./grasp.c	/^    const int *w;$/;"	m	struct:_Grasp	file:	access:public
weight	./clique_extender.c	/^    int weight;$/;"	m	struct:__anon3	file:	access:public
weightSum	./clique.c	/^    int weightSum;$/;"	m	struct:_CliqueSet	file:	access:public
worstWeight	./grasp.c	/^    int worstWeight;$/;"	m	struct:_Grasp	file:	access:public
xcalloc	./memory.c	/^void *xcalloc( const size_t elements, const size_t size )$/;"	f	signature:( const size_t elements, const size_t size )
xcalloc	./memory.h	/^void *xcalloc( const size_t elements, const size_t size );$/;"	p	signature:( const size_t elements, const size_t size )
xmalloc	./memory.c	/^void *xmalloc( const size_t size )$/;"	f	signature:( const size_t size )
xmalloc	./memory.h	/^void *xmalloc( const size_t size );$/;"	p	signature:( const size_t size )
xrealloc	./memory.c	/^void *xrealloc( void *ptr, const size_t size )$/;"	f	signature:( void *ptr, const size_t size )
xrealloc	./memory.h	/^void *xrealloc( void *ptr, const size_t size );$/;"	p	signature:( void *ptr, const size_t size )
yIdx	./mip_compact.c	/^    int *yIdx;$/;"	m	struct:_MIPCompact	file:	access:public
yIdx	./ms_solver_mip.c	/^    int *yIdx; \/* index of variable of job i *\/$/;"	m	struct:_MSM_Solver	file:	access:public
